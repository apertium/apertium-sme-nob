<?xml version="1.0" encoding="UTF-8"?>
<!-- -*- nxml -*- -->
<postchunk>
  <section-def-cats>
    <def-cat n="nom">
      <cat-item name="nom"/>
      <cat-item name="av_nom"/>
      <cat-item name="med_nom"/>
      <cat-item name="sin_nom"/>
      <cat-item name="som_nom"/>
      <cat-item name="til_nom"/>
    </def-cat>
    <def-cat n="prop">
      <cat-item name="prop"/>
      <cat-item name="av_prop"/>
      <cat-item name="med_prop"/>
      <cat-item name="sin_prop"/>
      <cat-item name="som_prop"/>
      <cat-item name="til_prop"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item name="pron"/>
      <cat-item name="av_pron"/>
      <cat-item name="med_pron"/>
      <cat-item name="sin_pron"/>
      <cat-item name="som_pron"/>
      <cat-item name="til_pron"/>
    </def-cat>
    <def-cat n="coor">
      <cat-item name="coor"/>
      <cat-item name="av_coor"/>
      <cat-item name="med_coor"/>
      <cat-item name="sin_coor"/>
      <cat-item name="som_coor"/>
      <cat-item name="til_coor"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item name="verb"/>
    </def-cat>
    <def-cat n="adv_verb">
      <cat-item name="adv_verb"/>
    </def-cat>
    <def-cat n="verb_adv_verb">
      <cat-item name="verb_adv_verb"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item name="adj"/>
    </def-cat>
    <def-cat n="adj_nom">
      <cat-item name="adj_nom"/>
      <cat-item name="av_adj_nom"/>
      <cat-item name="med_adj_nom"/>
      <cat-item name="sin_adj_nom"/>
      <cat-item name="som_adj_nom"/> 
      <cat-item name="til_adj_nom"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="posi"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
      <attr-item tags="ord.posi"/>
      <attr-item tags="ord.comp"/>
      <attr-item tags="ord.sup"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="Nom"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Loc"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ela"/>
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="Sg"/>
      <attr-item tags="Du"/>
      <attr-item tags="Pl"/>
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="ND"/>
      <!-- the bidix pardef __verb should split these: -->
      <attr-item tags="Sg1"/>
      <attr-item tags="Du1"/>
      <attr-item tags="Pl1"/>
      <attr-item tags="Sg2"/>
      <attr-item tags="Du2"/>
      <attr-item tags="Pl2"/>
      <attr-item tags="Sg3"/>
      <attr-item tags="Du3"/>
      <attr-item tags="Pl3"/>
    </def-attr>
    <def-attr n="defnes">
      <attr-item tags="ind"/>
      <attr-item tags="def"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="V"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="Ind.Prs"/>
      <attr-item tags="Ind.Prt"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="Inf"/>
      <attr-item tags="inf"/>
      <attr-item tags="PrfPrc"/>
      <attr-item tags="pp"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pass"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="c_defnes"/>
    <def-var n="case_prep"/>
  </section-def-vars>

  <section-def-macros>    
    <def-macro n="clean_adj_tags" npar="1"
               c="defness is only on superlatives or singular pp/posi in nob
                  If we don't have any number, give plural (no defnes) a shot.">
      <choose>
        <when>
          <test>
            <and>
              <or>
                <equal><clip pos="1" part="grau"/><lit v=""/></equal>
                <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
                <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
              </or>
              <equal><clip pos="1" part="nbr"/><lit v=""/></equal>
            </and>
          </test>
          <let>
            <clip pos="1" part="a_adj"/>
            <lit-tag v="adj.posi.pl"/>
            <!-- todo: why doesn't this work? (as it is, pp/posi tags will disappear) -->
<!--             <concat> -->
<!--               <clip pos="1" part="a_adj"/> -->
<!--               <lit-tag v="pl"/> -->
<!--             </concat> -->
          </let>
        </when>
        <when>
          <test>
            <not>
              <or>
                <and>                
                  <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
                  <or>
                    <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
                    <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
                  </or>
                </and>
                <equal><clip pos="1" part="grau"/><lit-tag v="sup"/></equal>
              </or>
            </not>
          </test>
          <let><clip pos="1" part="defnes"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>
    
    <def-macro n="out_case_prep" npar="2"
               c="arg.1: chunk, arg.2: prepositional object
                  1. If the chunk name is prepended by a preposition, set that as case_prep
                  2. Handle exceptions based on prepositional objects (loc + top gets 'i')
                  3. Possibly output a preposition
                  4. Finally, the prepositional object might have a genitive case; we remove that unless the chunk name begins with 'sin'">
      <let><var n="case_prep"/><lit v=""/></let>
      <choose>
        <when>
          <test><begins-with><clip pos="1" part="lemh"/><lit v="av"/></begins-with></test>
          <let><var n="case_prep"/><lit v="av"/></let>
        </when>
        <when>
          <test><begins-with><clip pos="1" part="lemh"/><lit v="med"/></begins-with></test>
          <let><var n="case_prep"/><lit v="med"/></let>
        </when>
        <when>
          <test><begins-with><clip pos="1" part="lemh"/><lit v="som"/></begins-with></test>
          <let><var n="case_prep"/><lit v="som"/></let>
        </when>
        <when>
          <test><begins-with><clip pos="1" part="lemh"/><lit v="til"/></begins-with></test>
          <let><var n="case_prep"/><lit v="til"/></let>
        </when>
      </choose>
      <choose><when>
        <test><and>
          <equal><var n="case_prep"/><lit v="av"/></equal>
          <equal><clip pos="1" part="case"/><lit-tag v="loc"/></equal>
          <equal><clip pos="2" part="a_nom"/><lit-tag v="np.top"/></equal>
          <!-- todo: "på øya", copy def-list from nb-nn.t1x -->
        </and></test>
        <let><var n="case_prep"/><lit v="i"/></let>
      </when></choose>
      <choose><when>
        <test><not><equal>
          <var n="case_prep"/><lit v=""/>
        </equal></not></test>
        <out>
          <lu>
            <var n="case_prep"/>
            <lit-tag v="pr"/>
          </lu>
          <b/>
        </out>
      </when></choose>
      <choose>
        <when>
          <test><and>
            <equal><clip pos="2" part="case"/><lit-tag v="gen"/></equal>
            <not><equal><clip pos="1" part="a_case-prep"/><lit v="sin"/></equal></not>
          </and></test>
          <let><clip pos="2" part="case"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>
  </section-def-macros>


  <section-rules>
    <rule comment="CHUNK: prop
                   Possibly add case preposition.">
      <pattern>
        <pattern-item n="prop"/>
      </pattern>
      <action>
        <call-macro n="out_case_prep">
          <with-param pos="0"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <lu>
            <clip pos="1" part="whole"/>
          </lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: nom
                   Possibly add case preposition.">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="out_case_prep">
          <with-param pos="0"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <lu>
            <clip pos="1" part="whole"/>
          </lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: pron
                   Possibly add case preposition.">
      <pattern>
        <pattern-item n="pron"/>
      </pattern>
      <action>
        <call-macro n="out_case_prep">
          <with-param pos="0"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <lu>
            <clip pos="1" part="whole"/>
          </lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: coor (SN CC SN)
                   Possibly add case preposition.">
      <pattern>
        <pattern-item n="coor"/>
      </pattern>
      <action>
        <call-macro n="out_case_prep">
          <with-param pos="0"/>
          <with-param pos="1"/>
        </call-macro>
        <out>
          <lu>
            <clip pos="1" part="whole"/>
          </lu>
          <b pos="1"/>
          <lu>
            <clip pos="2" part="whole"/>
          </lu>
          <b pos="2"/>
          <lu>
            <clip pos="3" part="whole"/>
          </lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj
                   Clean adjective tags">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="clean_adj_tags"><with-param pos="1"/></call-macro>
        <out>
          <lu>
            <clip pos="1" part="lemh"/>
            <clip pos="1" part="a_adj"/>
            <clip pos="1" part="grau"/>
            <clip pos="1" part="gen"/>
            <clip pos="1" part="nbr"/>
            <clip pos="1" part="defnes"/>
            <clip pos="1" part="lemq"/>
          </lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_nom
                   Clean adjective tags, possibly add case preposition.">
      <pattern>
        <pattern-item n="adj_nom"/>
      </pattern>
      <action>
        <call-macro n="out_case_prep">
          <with-param pos="0"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="clean_adj_tags"><with-param pos="1"/></call-macro>
        <out>          
          <lu>
            <clip pos="1" part="lemh"/>
            <clip pos="1" part="a_adj"/>
            <clip pos="1" part="grau"/>
            <clip pos="1" part="gen"/>
            <clip pos="1" part="nbr"/>
            <clip pos="1" part="defnes"/>
            <clip pos="1" part="lemq"/>
          </lu>
          <!-- for now, this space isn't output since we don't have
               superblanks in the hfst stream, so we add a space -->
          <b pos="1"/>
          <b/>
          <lu>
            <clip pos="2" part="whole"/>
          </lu>
        </out>
      </action>
    </rule>
    
  </section-rules>

</postchunk>
