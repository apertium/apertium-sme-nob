<?xml version="1.0" encoding="UTF-8"?>


<!--
This is the fourth pass, it contains:

Insert articles
Cleanup
-->

<!-- -*- nxml -*- -->
<postchunk>
  <section-def-cats>
    <def-cat n="nom">
      <cat-item name="nom"/>
    </def-cat>
    <def-cat n="prenom_nom">
      <cat-item name="num_nom"/>
      <cat-item name="cmpd_nom"/>
    </def-cat>
    <def-cat n="prop">
      <cat-item name="prop"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item name="pron"/>
    </def-cat>
    <def-cat n="adj_conj_adj">
      <cat-item name="adj_conj_adj"/>
    </def-cat>
    <def-cat n="nom_conj_nom">
      <cat-item name="nom_conj_nom"/>
    </def-cat>
    <def-cat n="adj_nom_conj_nom">
      <cat-item name="adj_nom_conj_nom"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item name="verb"/>
    </def-cat>
    <def-cat n="adv_verb">
      <cat-item name="adv_verb"/>
    </def-cat>
    <def-cat n="verb_adv_verb">
      <cat-item name="verb_adv_verb"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item name="adj"/>
    </def-cat>
    <def-cat n="det_adj_nom">
      <cat-item name="det_adj_nom"/>
    </def-cat>
    <def-cat n="adj_nom">
      <cat-item name="adj_nom"/>
    </def-cat>
    <def-cat n="det">
      <cat-item name="det"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_det">
      <attr-item tags="det"/> 
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="a_pron">
      <attr-item tags="Pron"/>
      <attr-item tags="Pron.Rel"/>
      <attr-item tags="Pron.Indef"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Pers"/>
      <attr-item tags="prn"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="posi"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
      <attr-item tags="ord.posi"/>
      <attr-item tags="ord.comp"/>
      <attr-item tags="ord.sup"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="Nom"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Loc"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ela"/>
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="a_case-prep">
      <attr-item tags="av"/>
      <attr-item tags="med"/>
      <attr-item tags="sin"/>
      <attr-item tags="som"/>
      <attr-item tags="til"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="Sg"/>
      <attr-item tags="Du"/>
      <attr-item tags="Pl"/>
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="ND"/>
      <!-- the bidix pardef __verb should split these: -->
      <attr-item tags="Sg1"/>
      <attr-item tags="Du1"/>
      <attr-item tags="Pl1"/>
      <attr-item tags="Sg2"/>
      <attr-item tags="Du2"/>
      <attr-item tags="Pl2"/>
      <attr-item tags="Sg3"/>
      <attr-item tags="Du3"/>
      <attr-item tags="Pl3"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="ind"/>
      <attr-item tags="def"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="V"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="Ind.Prs"/>
      <attr-item tags="Ind.Prt"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="Inf"/>
      <attr-item tags="inf"/>
      <attr-item tags="PrfPrc"/>
      <attr-item tags="pp"/>
      <attr-item tags="pprs"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pass"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="foo"/>
  </section-def-vars>

  <section-def-macros>    
    <def-macro n="clean_adj" npar="2"
               c="arg.1: adj, arg.2: chunk
                  defness is only on superlatives or posi/pp.sg in nob
                  Gender is only on posi/pp.sg.ind in nob
                  If we don't have any number, give plural (no defnes) a shot.
                  TODO: why doesn't (concat grau pl) work?">
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="grau"/><lit v=""/></equal>
          <not><equal><clip pos="1" part="a_adj"/><lit-tag v="adj.pprs"/></equal></not>
        </and></test>
        <let>
          <clip pos="1" part="a_adj"/>
          <concat><clip pos="1" part="a_adj"/><lit-tag v="posi"/></concat>
        </let>
      </when></choose>
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit v=""/></equal>
          <or>
            <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
            <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
          </or>
        </and></test>
        <let>
          <clip pos="1" part="grau"/>
          <concat><clip pos="1" part="grau"/><lit-tag v="pl"/></concat>
        </let>
      </when></choose>
      <choose><when>
        <test><not>
          <or>
            <equal><clip pos="1" part="grau"/><lit-tag v="sup"/></equal>
            <and>
              <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
              <or>
                <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
                <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
              </or>
            </and>
          </or>
        </not></test>
        <let><clip pos="1" part="art"/><lit v=""/></let>
      </when></choose>
      <choose><when>
        <test><not>
          <and>
            <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
            <equal><clip pos="1" part="art"/><lit-tag v="ind"/></equal>
            <or>
              <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
              <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
            </or>
          </and>
        </not></test>
        <let><clip pos="1" part="gen"/><lit v=""/></let>
      </when></choose>
    </def-macro>
    
    <def-macro n="clean_case" npar="2"
               c="arg.1: prepositional object, arg.2: chunk
                  Remove object genitive if chunk doesn't have genitive">
      <choose>
        <when>
          <test><and>
            <equal><clip pos="1" part="case"/><lit-tag v="gen"/></equal>
            <not><equal><clip pos="2" part="case"/><lit-tag v="gen"/></equal></not>
          </and></test>
          <let><clip pos="1" part="case"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>
  </section-def-macros>


  <section-rules>
    <rule comment="CHUNK: verb">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <let><clip pos="1" part="temps"/><clip pos="0" part="temps"/></let>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: prop">
      <pattern>
        <pattern-item n="prop"/>
      </pattern>
      <action>
        <call-macro n="clean_case"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: nom">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: prenom_nom">
      <pattern>
        <pattern-item n="prenom_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu>
            <clip pos="2" part="whole"/>
          </lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: pron">
      <pattern>
        <pattern-item n="pron"/>
      </pattern>
      <action>
        <call-macro n="clean_case"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: nom_conj_nom (SN CC SN)">
      <pattern>
        <pattern-item n="nom_conj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_case"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_nom_conj_nom (SN CC SN)">
      <pattern>
        <pattern-item n="adj_nom_conj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_case"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_case"><with-param pos="4"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
          <b pos="3"/>
          <lu><clip pos="4" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_conj_adj (SA CC SA)">
      <pattern>
        <pattern-item n="adj_conj_adj"/>
      </pattern>
      <action>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj
                   Clean adjective tags">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: det_adj_nom">
      <pattern>
        <pattern-item n="det_adj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <out> 
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <b/>         
          <lu><clip pos="2" part="whole"/></lu>
          <!-- for now, this space isn't output since we don't have
               superblanks in the hfst stream, so we add a space -->
          <b pos="2"/>
          <b/>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_nom">
      <pattern>
        <pattern-item n="adj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>          
          <lu><clip pos="1" part="whole"/></lu>
          <!-- for now, this space isn't output since we don't have
               superblanks in the hfst stream, so we add a space -->
          <b pos="1"/>
          <b/>
          <lu><clip pos="2" part="whole"/></lu>
        </out>
      </action>
    </rule>
    
    <rule comment="CHUNK: det">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <choose><when>
          <test><and>
            <equal><clip pos="1" part="a_det"/><lit-tag v="det.pos"/></equal>
            <equal><clip pos="0" part="case"/><lit v=""/></equal>
          </and></test>
          <let><clip pos="1" part="a_det"/><lit-tag v="prn"/></let>
        </when></choose>
        <out> 
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>

  </section-rules>

</postchunk>
