<?xml version="1.0" encoding="UTF-8"?>

<!--
This is the fourth pass. Responsibilities of this file include:

* Inserting articles
  * See rule: adj_nom
  * See macro: maybe_out_det
* Cleanup
  * Making sure tags are consistent with nob.dix (esp. adjectives, personal pronouns)
  * See macro: clean_adj

TODO: prpers entries in nob.dix, to avoid the clean_pron mess.
-->

<!-- -*- nxml -*- -->
<postchunk>
  <section-def-cats>
    <def-cat n="nom">
      <cat-item name="nom"/>
    </def-cat>
    <def-cat n="cmp_nom">
      <cat-item name="cmp_nom"/>
    </def-cat>
    <def-cat n="det_cmp_nom">
      <cat-item name="det_cmp_nom"/>
    </def-cat>
    <def-cat n="prenom_nom">
      <cat-item name="num_nom"/>
    </def-cat>
    <def-cat n="prop">
      <cat-item name="prop"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item name="pron"/>
    </def-cat>
    <def-cat n="adj_conj_adj">
      <cat-item name="adj_conj_adj"/>
    </def-cat>
    <def-cat n="nom_conj_nom">
      <cat-item name="nom_conj_nom"/>
    </def-cat>
    <def-cat n="adj_nom_conj_nom">
      <cat-item name="adj_nom_conj_nom"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item name="verb"/>
      <cat-item name="vcop"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item name="adj"/>
    </def-cat>
    <def-cat n="det_adj_nom">
      <cat-item name="det_adj_nom"/>
    </def-cat>
    <def-cat n="det_nom">
      <cat-item name="det_nom"/>
    </def-cat>
    <def-cat n="det_adj">
      <cat-item name="det_adj"/>
    </def-cat>
    <def-cat n="adj_nom">
      <cat-item name="adj_nom"/>
    </def-cat>
    <def-cat n="adj_cmp_nom">
      <cat-item name="adj_cmp_nom"/>
    </def-cat>
    <def-cat n="det">
      <cat-item name="det"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_sintagma">
      <attr-item tags="SN"/>
      <attr-item tags="SV"/>
      <attr-item tags="SA"/>
    </def-attr>
    <def-attr n="a_det">
      <attr-item tags="det"/> 
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="a_pron">
      <attr-item tags="Pron"/>
      <attr-item tags="Pron.Rel"/>
      <attr-item tags="Pron.Indef"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Pers"/>
      <attr-item tags="prn"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
    </def-attr>
    <def-attr n="a_rel">
      <attr-item tags="Refl"/>
      <attr-item tags="ref"/>
      <attr-item tags="res" c="Reciprocal"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="posi"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
      <attr-item tags="ord.posi"/>
      <attr-item tags="ord.comp"/>
      <attr-item tags="ord.sup"/>
    </def-attr>
    <def-attr n="pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="Nom"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Loc"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ela"/>
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="a_count">
      <attr-item tags="Coll"/>
      <attr-item tags="unc"/>
    </def-attr>
    <def-attr n="a_case-prep">
      <attr-item tags="av"/>
      <attr-item tags="med"/>
      <attr-item tags="sin"/>
      <attr-item tags="som"/>
      <attr-item tags="til"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
      <attr-item tags="GD_pers"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="Sg"/>
      <attr-item tags="Du"/>
      <attr-item tags="Pl"/>
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="ND"/>
      <!-- the bidix pardef __verb should split these: -->
      <attr-item tags="Sg1"/>
      <attr-item tags="Du1"/>
      <attr-item tags="Pl1"/>
      <attr-item tags="Sg2"/>
      <attr-item tags="Du2"/>
      <attr-item tags="Pl2"/>
      <attr-item tags="Sg3"/>
      <attr-item tags="Du3"/>
      <attr-item tags="Pl3"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
      <attr-item tags="DD"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="V"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="Prs"/>
      <attr-item tags="Prt"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="Inf"/>
      <attr-item tags="inf"/>
      <attr-item tags="Imprt"/>
      <attr-item tags="imp"/>
      <attr-item tags="PrfPrc"/>
      <attr-item tags="pp"/>
      <attr-item tags="TD"/>
    </def-attr>
    <def-attr n="modality">
      <attr-item tags="Ind"/>
      <attr-item tags="Cond"/>
      <attr-item tags="Pot"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pass"/>
    </def-attr>
    <def-attr n="syn_label">
      <attr-item tags="@X"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@→Pron"/>
      <attr-item tags="@OBJ→"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@→ADVL"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@→A"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@←PPRED"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OBJ"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="foo"/>
  </section-def-vars>

  <section-def-lists>
    <def-list n="inf-mark"
              c="Verbs with these functions need an infinitive marker (rather heuristic...test!)
                 TODO: Go su áhčči jámii de gildui sámegiela hállat.@-FMAINV telefuvnnas.
                       is this a mistagging, or what?">
      <list-item v="&lt;@←SUBJ&gt;"/>
      <list-item v="&lt;@SUBJ→&gt;"/>
      <list-item v="&lt;@←OBJ&gt;"/>
      <list-item v="&lt;@←ADVL&gt;"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>    
    <def-macro n="clean_adj" npar="2"
               c="arg.1: adj, arg.2: chunk
                  -----
                  - Try to apply chunk nbr/gender if ND/GD, else set to sg/nt.
                  - Change m or f to mf.
                  - If empty number tag and posi/pp, set to pl.
                    - Can we fix this in bidix?
                  - Remove defness unless superlatives or posi/pp.sg 
                  - Remove gender unless posi/pp.sg.ind
                  ">
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit-tag v="ND"/></equal>
          <not><equal><clip pos="2" part="nbr"/><lit v=""/></equal></not>
        </and></test>
        <let><clip pos="1" part="nbr"/><clip pos="2" part="nbr"/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="nbr"/><lit-tag v="ND"/></equal></test>
        <let><clip pos="1" part="nbr"/><lit-tag v="sg"/></let>
      </when></choose>
      
      <choose><when>
        <test><and>
          <not><equal><clip pos="2" part="gen"/><lit v=""/></equal></not>
          <not><equal><clip pos="2" part="gen"/><lit v="GD"/></equal></not>
        </and></test>
        <let><clip pos="1" part="gen"/><clip pos="2" part="gen"/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="gen"/><lit-tag v="GD"/></equal></test>
        <let><clip pos="1" part="gen"/><lit-tag v="nt"/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="2" part="gen"/><lit-tag v="GD"/></equal></test>
        <let><clip pos="2" part="gen"/><lit-tag v="nt"/></let>
      </when></choose>
      
      <choose><when>
        <test><or>
          <equal><clip pos="1" part="gen"/><lit-tag v="m"/></equal>
          <equal><clip pos="1" part="gen"/><lit-tag v="f"/></equal>
        </or></test>
        <let><clip pos="1" part="gen"/><lit-tag v="mf"/></let>
      </when></choose>
      
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="grau"/><lit v=""/></equal>
          <not><equal><clip pos="1" part="a_adj"/><lit-tag v="adj.pprs"/></equal></not>
        </and></test>
        <let>
          <clip pos="1" part="a_adj"/>
          <concat><clip pos="1" part="a_adj"/><lit-tag v="posi"/></concat>
        </let>
      </when></choose>
      
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit v=""/></equal>
          <or>
            <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
            <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
          </or>
        </and></test>
        <let>
          <clip pos="1" part="grau"/>
          <concat><clip pos="1" part="grau"/><lit-tag v="pl"/></concat>
        </let>
      </when></choose>
      
      <choose><when>
        <test><not>
          <or>
            <equal><clip pos="1" part="grau"/><lit-tag v="sup"/></equal>
            <and>
              <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
              <or>
                <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
                <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
              </or>
            </and>
          </or>
        </not></test>
        <let><clip pos="1" part="art"/><lit v=""/></let>
      </when></choose>
      
      <choose><when>
        <test><not>
          <and>
            <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
            <equal><clip pos="1" part="art"/><lit-tag v="ind"/></equal>
            <or>
              <equal><clip pos="1" part="grau"/><lit-tag v="pp"/></equal>
              <ends-with><clip pos="1" part="grau"/><lit-tag v="posi"/></ends-with>
            </or>
          </and>
        </not></test>
        <let><clip pos="1" part="gen"/><lit v=""/></let>
      </when></choose>
    </def-macro>
    
    <def-macro n="clean_pron" npar="2"
               c="arg.1: pronoun/determiner, arg.2: chunk
                  -----
                  Put non-GD chunk gender on pronoun/determiner.">
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit-tag v="ND"/></equal>
          <not><equal><clip pos="2" part="nbr"/><lit v=""/></equal></not>
        </and></test>
        <let><clip pos="1" part="nbr"/><clip pos="2" part="nbr"/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="nbr"/><lit-tag v="ND"/></equal></test>
        <let><clip pos="1" part="nbr"/><lit-tag v="sg"/></let>
      </when></choose>
      
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
          <equal><clip pos="1" part="pers"/><lit-tag v="p3"/></equal>
          <not><equal><clip pos="2" part="gen"/><lit v=""/></equal></not>
          <not><equal><clip pos="2" part="gen"/><lit v="GD"/></equal></not>
        </and></test>
        <let><clip pos="1" part="gen"/><clip pos="2" part="gen"/></let>
        <!-- TODO: use prpers so we don't need these hacks (but that needs changes in nob.dix) -->
        <choose><when>
          <test><equal><clip pos="1" part="gen"/><lit-tag v="f"/></equal></test>
          <let><clip pos="1" part="lemh"/><get-case-from pos="2"><lit v="hun"/></get-case-from></let>
        </when></choose>
        <choose><when>
          <test><equal><clip pos="1" part="gen"/><lit-tag v="nt"/></equal></test>
          <let><clip pos="1" part="lemh"/><get-case-from pos="2"><lit v="det"/></get-case-from></let>
        </when></choose>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="gen"/><lit-tag v="GD"/></equal></test>
        <let><clip pos="1" part="gen"/><lit-tag v="m"/></let>
      </when></choose>
    </def-macro>
    
    <def-macro n="clean_det" npar="2"
               c="arg.1: determiner, arg.2: chunk
                  -----
                  Put non-GD chunk gender and non-ND chunk number on determiner.">
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="art"/><lit-tag v="DD"/></equal>
          <not><equal><clip pos="2" part="art"/><lit v=""/></equal></not>
        </and></test>
        <let><clip pos="1" part="art"/><clip pos="2" part="art"/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="art"/><lit-tag v="DD"/></equal></test>
        <let><clip pos="1" part="art"/><lit-tag v="ind"/></let>
      </when></choose>
      
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit-tag v="ND"/></equal>
          <not><equal><clip pos="2" part="nbr"/><lit v=""/></equal></not>
        </and></test>
        <let><clip pos="1" part="nbr"/><clip pos="2" part="nbr"/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="nbr"/><lit-tag v="ND"/></equal></test>
        <let><clip pos="1" part="nbr"/><lit-tag v="sg"/></let>
      </when></choose>
      
      <choose><when>
        <test><and>
          <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
          <not><equal><clip pos="2" part="gen"/><lit v=""/></equal></not>
          <not><equal><clip pos="2" part="gen"/><lit v="GD"/></equal></not>
        </and></test>
        <let><clip pos="1" part="gen"/><clip pos="2" part="gen"/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="gen"/><lit-tag v="GD"/></equal></test>
        <let><clip pos="1" part="gen"/><lit-tag v="m"/></let>
      </when></choose>

      <choose><when>
        <test><or>
          <equal><clip pos="1" part="nbr"/><lit-tag v="pl"/></equal>
          <equal><clip pos="1" part="art"/><lit-tag v="def"/></equal>
        </or></test>
        <let><clip pos="1" part="gen"/><lit v=""/></let>
      </when></choose>
      <choose><when>
        <test><equal><clip pos="1" part="nbr"/><lit-tag v="pl"/></equal></test>
        <let><clip pos="1" part="art"/><lit v=""/></let>
      </when></choose>
    </def-macro>
    
    <def-macro n="clean_case_defnes" npar="2"
               c="arg.1: n,np,prn (possible prepositional object), arg.2: chunk
                  -----
                  Remove object genitive if chunk doesn't have genitive
                  Remove defnes if noun is proper.">
      <choose>
        <when>
          <test><and>
            <equal><clip pos="1" part="case"/><lit-tag v="gen"/></equal>
            <not><equal><clip pos="2" part="case"/><lit-tag v="gen"/></equal></not>
          </and></test>
          <let><clip pos="1" part="case"/><lit v=""/></let>
        </when>
      </choose>
      <choose>
        <when>
          <test><begins-with><clip pos="1" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><clip pos="1" part="art"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>
    
    <!-- Output macros: -->
    <def-macro n="maybe_out_det" npar="1"
               c="arg.1: chunk
                  -----
                  For eg. 'det_nom' or 'adj_nom', to make sure we say 'den andre/lyse hunden' (not 'andre/lyse hunden')">
      <choose>
        <when>
          <test><and>
            <not><begins-with caseless="yes"><clip pos="1" part="lemh"/><lit v="nom"/></begins-with></not>
            <not><begins-with caseless="yes"><clip pos="1" part="lemh"/><lit v="cmp"/></begins-with></not>
            <equal><clip pos="1" part="art"/><lit-tag v="def"/></equal>
          </and></test>
          <choose>
            <when>
              <test><equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal></test>
              <out>
                <lu>
                  <lit v="den"/>
                  <lit-tag v="det.dem"/>
                  <clip pos="1" part="gen"/>
                  <clip pos="1" part="nbr"/>
                </lu>
                <b/>
              </out>
            </when>
            <otherwise>
              <out>
                <lu>
                  <lit v="den"/>
                  <lit-tag v="det.dem.pl"/>
                </lu>
                <b/>
              </out>
            </otherwise>
          </choose>
        </when>
        <when>
          <test><and>
            <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
            <equal><clip pos="1" part="art"/><lit-tag v="ind"/></equal>
            <not><equal><clip pos="1" part="case"/><lit-tag v="ess"/></equal></not>
            <not><equal><clip pos="1" part="a_count"/><lit-tag v="unc"/></equal></not>
          </and></test>
          <out>
            <lu>
              <lit v="en"/>
              <lit-tag v="det.qnt"/>
              <clip pos="1" part="gen"/>
              <clip pos="1" part="nbr"/>
            </lu>
            <b/>
          </out>
        </when>
        <!-- otherwise: no determiner -->
      </choose>
    </def-macro>    
    <def-macro n="maybe_out_det2" npar="2"
               c="arg.1: nominal chunk, arg.2: determiner
                  -----
                  For eg. 'det_nom', to make sure we say 'den andre hunden' (not 'andre hunden')">
      <choose>
        <when>
          <test><equal><clip pos="2" part="lemh"/><lit v="annen"/></equal></test>
          <call-macro n="maybe_out_det"><with-param pos="1"/></call-macro>
        </when>
        <!-- otherwise: no determiner -->
      </choose>
    </def-macro>    
  </section-def-macros>


  <section-rules>
    <rule comment="CHUNK: verb">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <let><clip pos="1" part="temps"/><clip pos="0" part="temps"/></let>
        <choose><when>
          <test><equal><clip pos="1" part="temps"/><lit-tag v="TD"/></equal></test>
          <let><clip pos="1" part="temps"/><lit-tag v="inf"/></let>
        </when></choose>
        <choose>
          <when>
            <test><and>
              <equal><clip pos="1" part="temps"/><lit-tag v="inf"/></equal>
              <not><equal><clip pos="0" part="modality"/><lit-tag v="Cond"/></equal></not>
              <in><clip pos="0" part="syn_label"/><list n="inf-mark"/></in>
            </and></test>
            <out>
              <lu><get-case-from pos="1"><lit v="å"/></get-case-from><lit-tag v="part"/></lu>
              <b/>
            </out>
          </when>
          <when>
            <test><and>
              <equal><clip pos="1" part="temps"/><lit-tag v="inf"/></equal>
              <equal><clip pos="0" part="modality"/><lit-tag v="Cond"/></equal>
            </and></test>
            <out>
              <lu><get-case-from pos="1"><lit v="skulle"/></get-case-from><lit-tag v="vblex.inf"/></lu>
              <b/>
            </out>
          </when>
        </choose>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: prop">
      <pattern>
        <pattern-item n="prop"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: nom
                   Maybe insert a determiner">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det"><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: cmp_nom
                   Maybe insert a determiner">
      <pattern>
        <pattern-item n="cmp_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det"><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <!-- Compound; we keep the given space but don't add anything: -->
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: prenom_nom
                   Don't insert a determiner">
      <pattern>
        <pattern-item n="prenom_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: nom_conj_nom (SN CC SN)
                   Maybe insert a determiner">
      <pattern>
        <pattern-item n="nom_conj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_case_defnes"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det"><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_nom_conj_nom (SN CC SN)
                   Maybe insert a determiner">
      <pattern>
        <pattern-item n="adj_nom_conj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_case_defnes"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_case_defnes"><with-param pos="4"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det"><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
          <b pos="3"/>
          <lu><clip pos="4" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_conj_adj (SA CC SA)">
      <pattern>
        <pattern-item n="adj_conj_adj"/>
      </pattern>
      <action>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj
                   Clean adjective tags">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: det_adj_nom">
      <pattern>
        <pattern-item n="det_adj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det2"><with-param pos="0"/><with-param pos="1"/></call-macro>
        <out> 
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: det_nom">
      <pattern>
        <pattern-item n="det_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det2"><with-param pos="0"/><with-param pos="1"/></call-macro>
        <out> 
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: det_cmp_nom">
      <pattern>
        <pattern-item n="det_cmp_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det2"><with-param pos="0"/><with-param pos="1"/></call-macro>
        <out> 
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <b pos="2"/>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: det_adj">
      <pattern>
        <pattern-item n="det_adj"/>
      </pattern>
      <action>
        <call-macro n="clean_det"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det2"><with-param pos="0"/><with-param pos="1"/></call-macro>
        <out> 
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>         
          <lu><clip pos="2" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_nom
                   Maybe insert a determiner">
      <pattern>
        <pattern-item n="adj_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="2"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det"><with-param pos="0"/></call-macro>
        <out>          
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: adj_cmp_nom
                   Maybe insert a determiner">
      <pattern>
        <pattern-item n="adj_cmp_nom"/>
      </pattern>
      <action>
        <call-macro n="clean_case_defnes"><with-param pos="3"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_adj"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="maybe_out_det"><with-param pos="0"/></call-macro>
        <out>          
          <lu><clip pos="1" part="whole"/></lu>
          <b pos="1"/>
          <lu><clip pos="2" part="whole"/></lu>
          <lu><clip pos="3" part="whole"/></lu>
        </out>
      </action>
    </rule>
    
    
    <rule comment="CHUNK: pron">
      <pattern>
        <pattern-item n="pron"/>
      </pattern>
      <action>
        <call-macro n="clean_pron"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <call-macro n="clean_case_defnes"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <out>
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>
    <rule comment="CHUNK: det
                   Might have begun life as a pronoun.">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="clean_det"><with-param pos="1"/><with-param pos="0"/></call-macro>
        <choose><when>
          <test><and>
            <equal><clip pos="1" part="a_det"/><lit-tag v="det.pos"/></equal>
            <equal><clip pos="0" part="case"/><lit v=""/></equal>
          </and></test>
          <let><clip pos="1" part="a_det"/><lit-tag v="prn"/></let>
        </when></choose>
        <out> 
          <lu><clip pos="1" part="whole"/></lu>
        </out>
      </action>
    </rule>

  </section-rules>

</postchunk>
