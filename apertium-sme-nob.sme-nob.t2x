<?xml version="1.0" encoding="UTF-8"?>

<!--
This is the second pass. Responsibilities of this file include:

* Simple anaphora resolution; we keep track of gender of p3 sg
  subjects using the variables "ana_m_f" and "ana_gen", applying 
  this to GD-tagged SN's and all FV's.
  * See rule: FV, SN
  * Note: this only applies gender in a forward direction, applying gender
    from the noun to pronoun in 'Pron is N' constructions happens in t3x
* Keeping track of verb temps for eg. Actio.Ess
  (which is tagged TD) using the variable "ana_temps"
  * See rule: FV, V_TD
* Co-ordination
  * Removes superfluous prepositons
  * See rule: SN CNP SN, FV CVP FV
* Some definiteness changes for genitive clauses etc.
  * See rule: SN-prenom SN
* Moving postpositions
  * See rule: SN ADPOS -> ADPOS SN
* Removing prepositions when case is governed by adpositions
  * See rule: PR SN-post adpos
* Removing essive caseprep ('som') after vcop
  * See rule: FV-cop PR-caseprep-ess
* Removing Pcle.Qst and putting the Qst tag on the preceding chunk,
  so that they're treated as if there were no space
  * See rule: SN PCLE.QST
  * PCLE.QST variants could probably be added to many of the other rules here too,
    still TODO, but the most likely seem to be covered.

TODO:
* relatives (SN "who" SV SV* -> SN), both 'real' and those that started life as Agent Constructions
* 'adpos' covers both Pr and Po, tag them as such in t1x so that the rules here don't overgeneralise
-->

<interchunk>

  <section-def-cats>
    <def-cat n="CLB">
      <cat-item tags="CLB.*"/>
    </def-cat>
    <def-cat n="SA">
      <cat-item tags="SA"/>
      <cat-item tags="SA.*"/>
    </def-cat>
    <def-cat n="SN">
      <cat-item tags="SN"/>
      <cat-item tags="SN.*"/>
    </def-cat>
    <def-cat n="SN-prenom">
      <cat-item tags="SN.@→N.*"/>
    </def-cat>
    <def-cat n="SN-nom">
      <cat-item tags="SN.*.nom"/>
    </def-cat>
    <def-cat n="SN-pron">
      <cat-item lemma="pron" tags="SN.*"/>
    </def-cat>
    <def-cat n="spred-ess">
      <cat-item tags="SV.@←SPRED.*.ess"/>
      <cat-item tags="SV.@←SPRED.*.ess.*"/>
      <cat-item tags="SV.@←SPRED.*.ess"/>
      <cat-item tags="SV.@←SPRED.*.ess.*"/>
    </def-cat>
    <def-cat n="V">
      <cat-item tags="SV.*"/>
    </def-cat>
    <def-cat n="RADVL">
      <cat-item lemma="adv" tags="@←ADVL"/>
    </def-cat>
    <def-cat n="pron-RADVL">
      <cat-item lemma="pron" tags="SN.@←ADVL.*"/>
    </def-cat>
    <def-cat n="ADVL-pronl" c="ieš used as adverbial, dependent on pron">
      <cat-item lemma="adv" tags="@→Pron"/>
    </def-cat>
    <def-cat n="ADVL-noml" c="ieš used as adverbial, dependent on nom">
      <cat-item lemma="adv" tags="@→Nom"/>
    </def-cat>
    <def-cat n="PR">
      <cat-item tags="PR"/>
      <cat-item tags="PR.*"/>
    </def-cat>
    <def-cat n="PR-caseprep">
      <cat-item lemma="caseprep" tags="PR"/>
      <cat-item lemma="caseprep" tags="PR.*"/>
    </def-cat>
    <def-cat n="PR-caseprep-ess">
      <cat-item lemma="caseprep" tags="PR.ess"/>
      <cat-item lemma="caseprep" tags="PR.Ess"/>
    </def-cat>
    <def-cat n="SN-prep">
      <cat-item tags="SN.@P←.*"/>
      <cat-item lemma="ref" tags="@P←.*"/>
    </def-cat>
    <def-cat n="SN-post">
      <cat-item tags="SN.@→P.*"/>
      <cat-item lemma="ref" tags="@→P.*"/>
    </def-cat>
    <def-cat n="SN-post-advl">
      <cat-item tags="SN.@→ADVL.*"/>
    </def-cat>
    <def-cat n="adpos">
      <cat-item lemma="adpos" tags="*"/>
    </def-cat>
    <def-cat n="ROBJ">
      <cat-item tags="SV.@←OBJ.*"/>
      <cat-item tags="SN.@←OBJ.*"/>
      <cat-item tags="SA.@←OBJ.*"/>
    </def-cat>
    <def-cat n="CNP">
      <cat-item lemma="conj" tags="@CNP.cnjcoo"/>
    </def-cat>
    <def-cat n="CVP">
      <cat-item lemma="conj" tags="@CVP.cnjcoo"/>
    </def-cat>
    <def-cat n="FV">
      <cat-item tags="SV.@+FMAINV"/>
      <cat-item tags="SV.@+FMAINV.*"/>
      <cat-item tags="SV.@+FAUXV"/>
      <cat-item tags="SV.@+FAUXV.*"/>
    </def-cat>
    <def-cat n="FV-cop">
      <cat-item lemma="vcop" tags="SV.@+FMAINV"/>
      <cat-item lemma="vcop" tags="SV.@+FMAINV.*"/>
      <cat-item lemma="vcop" tags="SV.@+FAUXV"/>
      <cat-item lemma="vcop" tags="SV.@+FAUXV.*"/>
    </def-cat>
    <def-cat n="V_TD">
      <cat-item tags="SV.@←OBJ.TD.*"/>
    </def-cat>
    <def-cat n="LN-gen">
      <cat-item tags="SN.@→N.*.gen"/>
    </def-cat>
    <def-cat n="ADVL-loc">
      <cat-item tags="SN.@ADVL.*.loc"/>
      <cat-item tags="SN.@ADVL.*.loc.*"/>
      <cat-item tags="SN.@←ADVL.*.loc"/>
      <cat-item tags="SN.@←ADVL.*.loc.*"/>
      <cat-item tags="SN.@ADVL→.*.loc"/>
      <cat-item tags="SN.@ADVL→.*.loc.*"/>
      <cat-item tags="SN.@-FADVL.*.loc"/>
      <cat-item tags="SN.@-FADVL.*.loc.*"/>
      <cat-item tags="SN.@-F←ADVL.*.loc"/>
      <cat-item tags="SN.@-F←ADVL.*.loc.*"/>
      <cat-item tags="SN.@-FADVL→.*.loc"/>
      <cat-item tags="SN.@-FADVL→.*.loc.*"/>
    </def-cat>
    <def-cat n="pcle.qst">
      <cat-item tags="@PCLE.Qst"/>
      <cat-item tags="@PCLE.Qst.*"/>
    </def-cat>
  </section-def-cats>

  <section-def-attrs>
    <def-attr n="a_sintagma">
      <attr-item tags="SN"/>
      <attr-item tags="SV"/>
      <attr-item tags="SA"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
      <attr-item tags="GD_pers"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="Nom"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Loc"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ela"/>
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="a_caseprep_verb">
      <attr-item tags="loc-NIL"/>
      <attr-item tags="ill-NIL"/>
      <attr-item tags="ill-av"/>
      <attr-item tags="NC"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
      <attr-item tags="DD"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="Prs"/>
      <attr-item tags="Prt"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="Inf"/>
      <attr-item tags="inf"/>
      <attr-item tags="Imprt"/>
      <attr-item tags="imp"/>
      <attr-item tags="PrfPrc"/>
      <attr-item tags="pp"/>
      <attr-item tags="TD"/>
    </def-attr>
    <def-attr n="pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="Sg"/>
      <attr-item tags="Du"/>
      <attr-item tags="Pl"/>
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="neg">
      <attr-item tags="ConNeg"/>
      <attr-item tags="Neg"/>
    </def-attr>
    <def-attr n="syn_label">
      <attr-item tags="@X"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@→Pron"/>
      <attr-item tags="@OBJ→"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@→ADVL"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@→A"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@←PPRED"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@-FADVL"/>
      <attr-item tags="@-F←ADVL"/>
      <attr-item tags="@-FADVL→"/>
      <attr-item tags="@-F←SPRED"/>
      <attr-item tags="@-SPRED→"/>
      <attr-item tags="@-F←OPRED"/>
      <attr-item tags="@-OPRED→"/>
      <attr-item tags="@APP-N←"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="tmpcase" c="tmp variable for switch_cases"/>
    <def-var n="caseprep_verb" c="For changing/removing prepositions based on verb argument structure"/>
    <def-var n="c_name"/>
    <def-var n="c_tags"/>
    <def-var n="ana_temps" c="set by FV's, used on TD's"/>
    <def-var n="ana_m_f" c="p3 sg gender (only m or f) set by SUBJ's, used on GD_pers's, stored in FV's for t3x pro insertion"/>
    <def-var n="ana_gen" c="p3 sg gender (m, f, or nt) set by SUBJ's, used on GD's, stored in FV's for t3x pro insertion"/>
    <def-var n="ana_nbr" c="p3 number, set only if ana_gen is set, used on ND's."/>
  </section-def-vars>

  <section-def-macros>
    <def-macro n="switch_cases" npar="2"
               c="Simply switch the typographic cases (upper/lower/capital) of the two arguments.">
      <let><var n="tmpcase"/><get-case-from pos="1"><clip pos="1" part="lemh"/></get-case-from></let>
      <let><clip pos="1" part="lemh"/><get-case-from pos="2"><clip pos="1" part="lemh"/></get-case-from></let>
      <modify-case><clip pos="2" part="lemh"/><var n="tmpcase"/></modify-case>
    </def-macro>
    
    <def-macro n="tag_qst" npar="1"
               c="Add the Qst tag">
      <choose>
        <when>
          <test><not><equal><clip pos="1" part="neg"/><lit v=""/></equal></not></test>
          <let>
            <clip pos="1" part="neg"/>
            <concat><clip pos="1" part="neg"/><lit-tag v="Qst"/></concat>
          </let>
        </when>
        <when>
          <test><not><equal><clip pos="1" part="syn_label"/><lit v=""/></equal></not></test>
          <let>
            <clip pos="1" part="syn_label"/>
            <concat><clip pos="1" part="syn_label"/><lit-tag v="Qst"/></concat>
          </let>
        </when>
        <otherwise>
          <let>
            <clip pos="1" part="lemh"/>
            <concat><clip pos="1" part="lemh"/><lit-tag v="Qst"/></concat>
          </let>
        </otherwise>
      </choose>
    </def-macro>
    
    <def-macro n="clean_SN_of_adpos" npar="1"
               c="arg.1: SN, might be pronoun">
      <choose>
        <when>
          <test><or>
            <equal caseless="yes"><clip pos="1" part="lemh"/><lit v="pron"/></equal>
            <equal caseless="yes"><clip pos="1" part="lemh"/><lit v="det"/></equal>
          </or></test>
          <let><clip pos="1" part="case"/><lit-tag v="acc"/></let>
        </when>
        <otherwise>
          <let><clip pos="1" part="case"/><lit v=""/></let>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_c_name3" npar="3" c="args should be given in order of output">
      <let>
        <var n="c_name"/>
        <concat>
          <clip pos="1" part="lemh"/>
          <lit v="_"/>
          <clip pos="2" part="lemh"/>
          <lit v="_"/>
          <clip pos="3" part="lemh"/>
        </concat>
      </let>
    </def-macro>
    
    <def-macro n="set_c_tags2" npar="2">      
      <let><var n="c_tags"/><clip pos="1" part="tags"/></let>
      <choose><when>
        <test><equal><clip pos="1" part="syn_label"/><lit v=""/></equal></test>
        <let><var n="c_tags"/><clip pos="2" part="tags"/></let>
      </when></choose>
    </def-macro>
    
    <def-macro n="set_ana_temps" npar="1"
               c="arg.1: verb">
      <choose><when>
        <test><not><equal><clip pos="1" part="temps"/><lit v=""/></equal></not></test>
        <let><var n="ana_temps"/><clip pos="1" part="temps"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_caseprep" npar="1"
               c="arg.1: verb">
      <choose><when>
        <test><not><equal><clip pos="1" part="a_caseprep_verb"/><lit v=""/></equal></not></test>
        <let><var n="caseprep_verb"/><clip pos="1" part="a_caseprep_verb"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="apply_ana_gen" npar="1"
               c="arg.1: SN or verb
                  -----
                  If 'ana_m_f' is set, apply it if tagged GD_pers or no gender tag (eg. if we have a verb).
                  If there's no gender tag, make sure we make one.
                  (If no tags at all, put it after lemh; if tags but no gen, put it after the tags.)
                  Else if 'ana_gen' is set, apply it if GD.
                  TODO: check that impers verbs still output nt pro's!">
      <choose><when>
        <test><not><equal><var n="ana_m_f"/><lit v=""/></equal></not></test>
        <choose>
          <when>
            <test><equal><clip pos="1" part="gen"/><lit-tag v="GD_pers"/></equal></test>
            <let><clip pos="1" part="gen"/><var n="ana_m_f"/></let>
          </when>
          <when>
            <test><equal><clip pos="1" part="tags"/><lit v=""/></equal></test>
            <let><clip pos="1" part="lemh"/><concat><clip pos="1" part="lemh"/><var n="ana_m_f"/></concat></let>
          </when>
          <when>
            <test><equal><clip pos="1" part="gen"/><lit v=""/></equal></test>
            <let><clip pos="1" part="tags"/><concat><clip pos="1" part="tags"/><var n="ana_m_f"/></concat></let>
          </when>
        </choose>
      </when></choose>
      
      <choose><when>
        <test><and>
          <not><equal><var n="ana_gen"/><lit v=""/></equal></not>
          <equal><clip pos="1" part="gen"/><lit-tag v="GD"/></equal>
        </and></test>
        <let><clip pos="1" part="gen"/><var n="ana_gen"/></let>
      </when></choose>
      
      <choose><when>
        <test><and>
          <not><equal><var n="ana_nbr"/><lit v=""/></equal></not>
          <equal><clip pos="1" part="nbr"/><lit-tag v="ND"/></equal>
        </and></test>
        <let><clip pos="1" part="nbr"/><var n="ana_nbr"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_ana_gen" npar="1"
               c="arg.1: SN or SV
                  -----
                  If we have a subject
                  - If not p1/p2/pl:
                    * If gender is m/f, store gender in 'ana_m_f' and 'ana_gen';
                    * If gender is nt or we're given a verb, store nt in 'ana_gen' only;
                  - If sg/pl: set 'ana_nbr'

                  Call 'apply_ana_gen' regardless (in case we have a GD).
                  Call 'set_caseprep' regardless">
      <choose><when>
        <test><or>
          <equal><clip pos="1" part="syn_label"/><lit-tag v="@SUBJ→"/></equal>
          <equal><clip pos="1" part="syn_label"/><lit-tag v="@←SUBJ"/></equal>
        </or></test>
        
        <choose><when>
          <test><and>            
            <not><equal><clip pos="1" part="nbr"/><lit-tag v="pl"/></equal></not>
            <not><equal><clip pos="1" part="pers"/><lit-tag v="p1"/></equal></not>
            <not><equal><clip pos="1" part="pers"/><lit-tag v="p2"/></equal></not>
          </and></test>
          <choose><when>
            <test><or>
              <equal><clip pos="1" part="gen"/><lit-tag v="f"/></equal>
              <equal><clip pos="1" part="gen"/><lit-tag v="m"/></equal>
            </or></test>
            <let><var n="ana_m_f"/><clip pos="1" part="gen"/></let>
            <let><var n="ana_gen"/><clip pos="1" part="gen"/></let>
          </when></choose>
          <choose><when>
            <test><or>
              <equal><clip pos="1" part="gen"/><lit-tag v="nt"/></equal>
              <equal><clip pos="1" part="a_sintagma"/><lit-tag v="SV"/></equal>
            </or></test>
            <let><var n="ana_gen"/><lit-tag v="nt"/></let>
          </when></choose>
        </when></choose>

        <choose><when>
          <test><or>
            <equal><clip pos="1" part="nbr"/><lit-tag v="sg"/></equal>
            <equal><clip pos="1" part="nbr"/><lit-tag v="pl"/></equal>
          </or></test>
          <let><var n="ana_nbr"/><clip pos="1" part="nbr"/></let>
        </when></choose>
      </when></choose>
      
      <call-macro n="apply_ana_gen"><with-param pos="1"/></call-macro>
      <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>  
    </def-macro>
    
  </section-def-macros>

  <section-rules>
    <!-- <rules: nom modifiers: -->
    <rule comment="REGLA: SN-prenom SN-prenom SN-nom
                   -----
                   NRK Radio oaivil => NRK Radios mening
                   Correct defnes">
      <pattern>
        <pattern-item n="SN-prenom"/>
        <pattern-item n="SN-prenom"/>
        <pattern-item n="SN-nom"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="3"/></call-macro>
        <let><clip pos="1" part="case"/><lit v=""/></let>
        <let><clip pos="3" part="art"/><lit-tag v="ind"/></let>
        <out>
          <chunk>
            <clip pos="1" part="whole"/>
          </chunk>
          <b pos="1"/>
          <chunk>
            <clip pos="2" part="whole"/>
          </chunk>
          <b pos="2"/>
          <chunk>
            <clip pos="3" part="whole"/>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: SN-prenom SN-nom
                   -----
                   NRK oaivil => NRKs mening
                   Correct defnes">
      <pattern>
        <pattern-item n="SN-prenom"/>
        <pattern-item n="SN-nom"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="2"/></call-macro>
        <let><clip pos="2" part="art"/><lit-tag v="ind"/></let>
        <out>
          <chunk>
            <clip pos="1" part="whole"/>
          </chunk>
          <b pos="1"/>
          <chunk>
            <clip pos="2" part="whole"/>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Weird stuff -->
    <rule comment="REGLA: PR pron-RADVL spred-ess
                   til meg som hjelper => og hjelper meg
TODO: does this generalise or should we remove the whole mechanism?">
      <pattern>
        <pattern-item n="PR"/>
        <pattern-item n="pron-RADVL"/>
        <pattern-item n="PR-caseprep"/>
        <pattern-item n="spred-ess"/>
      </pattern>
      <action>
        <out>
          <chunk>
            <lit v="conj{^og"/><lit-tag v="cnjcoo"/><lit v="$}"/>
          </chunk>
          <b pos="1"/>
          <chunk>
            <clip pos="4" part="whole"/>
          </chunk>
          <b pos="2"/>
          <chunk>
            <clip pos="2" part="whole"/>
          </chunk>
        </out>
      </action>
    </rule>
    
    <!-- <rules: Coordination -->
    <rule comment="REGLA: SA CNP SA">
      <pattern>
        <pattern-item n="SA"/>
        <pattern-item n="CNP"/>
        <pattern-item n="SA"/>
      </pattern>
      <action>
        <call-macro n="apply_ana_gen"><with-param pos="1"/></call-macro>
        <call-macro n="apply_ana_gen"><with-param pos="3"/></call-macro>
        <call-macro n="set_c_name3"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="set_c_tags2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <out>
          <chunk>
           <var n="c_name"/>
           <var n="c_tags"/>
           <lit v="{"/>
           <clip pos="1" part="content"/>
           <b pos="1"/>
           <lit v=" "/>
           <clip pos="2" part="content"/>
           <b pos="2"/>
           <lit v=" "/>
           <clip pos="3" part="content"/>
           <lit v="}"/>
           <clip pos="1" part="lemq"/>
         </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: SN CNP SN
                   We assume CG only gives us SN CNP SN if they _should_ be coordinated.
                   For now only uses the case etc. of the first conjunct.
                   TODO: what should happen where we still have different cases? («i Norge og på Island»?)">
      <pattern>
        <pattern-item n="SN"/>
        <pattern-item n="CNP"/>
        <pattern-item n="SN"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="3"/></call-macro>
        <call-macro n="set_c_name3"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="set_c_tags2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <out>
          <chunk>
            <var n="c_name"/>
            <var n="c_tags"/>
            <lit v="{"/>
            <clip pos="1" part="content"/>
            <b pos="1"/>
            <lit v=" "/>
            <clip pos="2" part="content"/>
            <b pos="2"/>
            <lit v=" "/>
            <clip pos="3" part="content"/>
            <lit v="}"/>
            <clip pos="1" part="lemq"/>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: PR SN CNP PR SN">
      <pattern>
        <pattern-item n="PR"/>
        <pattern-item n="SN"/>
        <pattern-item n="CNP"/>
        <pattern-item n="PR"/>
        <pattern-item n="SN"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="5"/></call-macro>
        <call-macro n="set_c_name3"><with-param pos="2"/><with-param pos="3"/><with-param pos="5"/></call-macro>
        <call-macro n="set_c_tags2"><with-param pos="2"/><with-param pos="5"/></call-macro>
        <out>
          <chunk>
            <clip pos="1" part="whole"/>
          </chunk>
          <b pos="1"/>
          <chunk>
            <var n="c_name"/>
            <var n="c_tags"/>
           <lit v="{"/>
           <clip pos="2" part="content"/>
           <b pos="2"/>
           <clip pos="3" part="content"/>
           <b pos="3"/>
           <b pos="4"/>
           <clip pos="5" part="content"/>
           <lit v="}"/>
           <clip pos="2" part="lemq"/>
         </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Adpositions -->
    
    <rule comment="REGLA: PR-caseprep SN-post-advl RADVL
                   -----
                   Islandas eret => fra Island                                              
                   Don't output the PR since case was selected by the adverb anyway.">
      <pattern>
        <pattern-item n="PR-caseprep"/>
        <pattern-item n="SN-post-advl"/>
        <pattern-item n="RADVL"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="2"/></call-macro>
        <call-macro n="clean_SN_of_adpos"><with-param pos="2"/></call-macro>
        <choose><when>
          <test><not><equal><b pos="1"/><b/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
        <out>
          <chunk><clip pos="3" part="whole"/></chunk>
          <b pos="2"/>
          <chunk><clip pos="2" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: PR-caseprep SN-post adpos
                   -----
                   garra dálkki geažil => på_grunn_av dårlig vær
                   dan geažil => på_grunn_av det
                   Don't output the PR since case was selected by the adpos anyway.">
      <pattern>
        <pattern-item n="PR-caseprep"/>
        <pattern-item n="SN-post"/>
        <pattern-item n="adpos"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="2"/></call-macro>
        <call-macro n="clean_SN_of_adpos"><with-param pos="2"/></call-macro>
        <choose><when>
          <test><not><equal><b pos="1"/><b/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
        <out>
          <chunk><clip pos="3" part="whole"/></chunk>
          <b pos="2"/>
          <chunk><clip pos="2" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: SN-post adpos
                   -----
                   Move postposition to front">
      <pattern>
        <pattern-item n="SN-post"/>
        <pattern-item n="adpos"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <call-macro n="clean_SN_of_adpos"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="2" part="whole"/></chunk>
          <b pos="1"/>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: adpos PR-caseprep SN-prep
                   -----
                   badjel ráji =1> over til grensen =2> over grensen
                   Don't output the PR since case was selected by the adpos anyway.">
      <pattern>
        <pattern-item n="adpos"/>
        <pattern-item n="PR"/>
        <pattern-item n="SN-prep"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="2"/></call-macro>
        <call-macro n="clean_SN_of_adpos"><with-param pos="3"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
          <b pos="1"/>
          <chunk><clip pos="3" part="whole"/></chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="2"/><b/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
      </action>
    </rule>
    
    
    <rule comment="REGLA: PR-caseprep SN
                   If the above rules didn't match, we keep the PR.
                   Then we have to switch cases of PR and SN,
                   since a PR with lemh caseprep must've been added in t1x.">
      <pattern>
        <pattern-item n="PR-caseprep"/>
        <pattern-item n="SN"/>
      </pattern>
      <action>
        <call-macro n="switch_cases"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <choose>
          <when>
            <test><and>
              <equal><var n="caseprep_verb"/><lit-tag v="ill-på"/></equal>
              <equal><clip pos="1" part="case"/><lit-tag v="ill"/></equal>
            </and></test>
            <out>
              <chunk>
                <concat>
                  <lit v="caseprep"/>
                  <lit-tag v="PR"/>
                  <clip pos="1" part="case"/>
                  <lit v="{^"/>
                  <lit v="på"/>
                  <lit-tag v="pr"/>
                  <lit v="$}"/>
                </concat>
              </chunk>
              <b pos="1"/>
            </out>
          </when>
          <when>
            <test><and>
              <equal><var n="caseprep_verb"/><lit-tag v="ill-av"/></equal>
              <equal><clip pos="1" part="case"/><lit-tag v="ill"/></equal>
            </and></test>
            <out>
              <chunk>
                <concat>
                  <lit v="caseprep"/>
                  <lit-tag v="PR"/>
                  <clip pos="1" part="case"/>
                  <lit v="{^"/>
                  <lit v="av"/>
                  <lit-tag v="pr"/>
                  <lit v="$}"/>
                </concat>
              </chunk>
              <b pos="1"/>
            </out>
          </when>
          <when>
            <test><and>
              <equal><var n="caseprep_verb"/><lit-tag v="loc-for"/></equal>
              <equal><clip pos="1" part="case"/><lit-tag v="loc"/></equal>
            </and></test>
            <out>
              <chunk>
                <concat>
                  <lit v="caseprep"/>
                  <lit-tag v="PR"/>
                  <clip pos="1" part="case"/>
                  <lit v="{^"/>
                  <lit v="for"/>
                  <lit-tag v="pr"/>
                  <lit v="$}"/>
                </concat>
              </chunk>
              <b pos="1"/>
            </out>
          </when>
          <otherwise>
            <choose><when>
              <test><not>
                <and>
                  <equal><var n="caseprep_verb"/><lit-tag v="ill-NIL"/></equal>
                  <equal><clip pos="1" part="case"/><lit-tag v="ill"/></equal>
                </and>
              </not></test>
              <out>
                <chunk><clip pos="1" part="whole"/></chunk>
                <b pos="1"/>
              </out>
            </when></choose>
          </otherwise>
        </choose>
        <out>
          <chunk><clip pos="2" part="whole"/></chunk>
        </out>
      </action>
    </rule>

    
    <!-- <rules: →N ADVL -->    
    <rule comment="REGLA: LN-gen ADVL-loc
                   -----
                   (málet olbmuid) earenoamáš dáhpáhusaid oktavuođas => (male mennesker) i forbindelse med spesielle hendelser
                   Switch order, insert 'med'
                   TODO: case should be acc or something, not nil, when pron/det">
      <pattern>
        <pattern-item n="LN-gen"/>
        <pattern-item n="PR-caseprep"/>
        <pattern-item n="ADVL-loc"/>
      </pattern>
      <action>
        <let><clip pos="1" part="case"/><lit v=""/></let>
        <out>
          <chunk><clip pos="2" part="whole"/></chunk>
          <b pos="1"/>
          <chunk><clip pos="3" part="whole"/></chunk>
          <b/>
          <chunk>
            <lit v="caseprep"/><lit-tag v="PR"/><lit v="{^med"/><lit-tag v="pr"/><lit v="$}"/>
          </chunk>
          <b pos="2"/>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: ditransitives (just switch order instead of removing caseprep) -->
    <rule comment="REGLA: PR-caseprep SN ROBJ (og RSPRED?)
                   -----
                   dutnje 60 000 ruvnnu =1> til deg 60 000 kroner =2> 60 000 kroner til deg">
      <pattern>
        <pattern-item n="PR-caseprep"/>
        <pattern-item n="SN"/>
        <pattern-item n="ROBJ"/>
      </pattern>
      <action>
        <call-macro n="switch_cases"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <out>
          <chunk><clip pos="3" part="whole"/></chunk>
          <b pos="1"/>
          <chunk><clip pos="1" part="whole"/></chunk>
          <b pos="2"/>
          <chunk><clip pos="2" part="whole"/></chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Verb coordination, set/use verb-anaphoric variables -->
    <rule comment="REGLA: FV CVP FV
                   -----
                   set anaphoric temps variable
                   use anaphoric gen variable">
      <pattern>
        <pattern-item n="FV"/>
        <pattern-item n="CVP"/>
        <pattern-item n="FV"/>
      </pattern>
      <action>
        <choose>
          <when>
            <test><and>
              <equal><clip pos="1" part="temps"/><clip pos="3" part="temps"/></equal>
              <equal><clip pos="1" part="nbr"/><clip pos="3" part="nbr"/></equal>
              <equal><clip pos="1" part="pers"/><clip pos="3" part="pers"/></equal>
            </and></test>
            <call-macro n="set_ana_temps"><with-param pos="1"/></call-macro>
            <call-macro n="apply_ana_gen"><with-param pos="1"/></call-macro>

            <call-macro n="set_c_name3"><with-param pos="1"/><with-param pos="2"/><with-param pos="3"/></call-macro>
            <call-macro n="set_c_tags2"><with-param pos="1"/><with-param pos="3"/></call-macro>
            <out>
              <chunk>
                <var n="c_name"/>
                <var n="c_tags"/>
                <lit v="{"/>
                <clip pos="1" part="content"/>
                <clip pos="1" part="lemq"/>
                <b pos="1"/>
                <clip pos="2" part="content"/>
                <clip pos="2" part="lemq"/>
                <b pos="2"/>
                <clip pos="3" part="content"/>
                <clip pos="3" part="lemq"/>
                <lit v="}"/>
              </chunk>
            </out>
          </when>
          <otherwise>
            <call-macro n="apply_ana_gen"><with-param pos="1"/></call-macro>
            <call-macro n="apply_ana_gen"><with-param pos="3"/></call-macro>
            <call-macro n="set_ana_temps"><with-param pos="3"/></call-macro>
            <out>
              <chunk><clip pos="1" part="whole"/></chunk>
              <b pos="1"/>
              <chunk><clip pos="2" part="whole"/></chunk>
              <b pos="2"/>
              <chunk><clip pos="3" part="whole"/></chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: FV
                   -----
                   set anaphoric temps variable
                   use anaphoric gen variable">
      <pattern>
        <pattern-item n="FV"/>
      </pattern>
      <action>
        <call-macro n="set_ana_temps"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: FV PCLE.QST
                   -----
                   set anaphoric temps variable
                   use anaphoric gen variable">
      <pattern>
        <pattern-item n="FV"/>
        <pattern-item n="pcle.qst"/>
      </pattern>
      <action>
        <call-macro n="tag_qst"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_temps"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: V_TD
                   -----
                   use anaphoric temps variables
                   use/set anaphoric gen variable
                   mun dieđán Máreha čállime dál => jeg vet Máret skriver nå">
      <pattern>
        <pattern-item n="V_TD"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><not><equal><var n="ana_temps"/><lit v=""/></equal></not></test>
          <let><clip pos="1" part="temps"/><var n="ana_temps"/></let>
        </when></choose>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: V_TD PCLE.QST
                   -----
                   use anaphoric temps variables
                   use/set anaphoric gen variable
                   mun dieđán Máreha čállime dál => jeg vet Máret skriver nå">
      <pattern>
        <pattern-item n="V_TD"/>
        <pattern-item n="pcle.qst"/>
      </pattern>
      <action>
        <call-macro n="tag_qst"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><not><equal><var n="ana_temps"/><lit v=""/></equal></not></test>
          <let><clip pos="1" part="temps"/><var n="ana_temps"/></let>
        </when></choose>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: V
                   -----
                   use/set anaphoric gen variable">
      <pattern>
        <pattern-item n="V"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: V PCLE.QST
                   -----
                   use/set anaphoric gen variable">
      <pattern>
        <pattern-item n="V"/>
        <pattern-item n="pcle.qst"/>
      </pattern>
      <action>
        <call-macro n="tag_qst"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    
    <!-- FV-cop 'som' -->
    <rule comment="REGLA: FV-cop PR-caseprep-ess
                   -----
                   Son lea taksivuoddjin Oslos => Han er taxisjåfør i Oslo
                   Delete 'som'
                   set anaphoric temps variable
                   use anaphoric gen variable
TODO: would we ever see  FV CVP FV-cop PR-caseprep-ess  or similar? If so, needs rule.">
      <pattern>
        <pattern-item n="FV-cop"/>
        <pattern-item n="PR-caseprep-ess"/>
      </pattern>
      <action>
        <call-macro n="set_ana_temps"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>        
        <choose><when>
          <test><not><equal><b pos="1"/><b/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
      </action>
    </rule>

    <rule comment="REGLA: PR-caseprep-ess SN FV-cop
                   -----
                   
                   Delete 'som'
                   set anaphoric temps variable
                   use anaphoric gen variable">
      <pattern>
        <pattern-item n="PR-caseprep-ess"/>
        <pattern-item n="SN"/>
        <pattern-item n="FV-cop"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_gen"><with-param pos="3"/></call-macro>
        <call-macro n="set_ana_temps"><with-param pos="3"/></call-macro>
        <choose><when>
          <test><not><equal><b pos="1"/><b/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
        <out>
          <chunk><clip pos="2" part="whole"/></chunk>
          <b pos="1"/>
          <chunk><clip pos="3" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    
    <!-- Single nominal -->
    <rule comment="REGLA: SN
                   -----
                   set gen variable">
      <pattern>
        <pattern-item n="SN"/>
      </pattern>
      <action>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: SN PCLE.QST
                   -----
                   set gen variable">
      <pattern>
        <pattern-item n="SN"/>
        <pattern-item n="pcle.qst"/>
      </pattern>
      <action>
        <call-macro n="tag_qst"><with-param pos="1"/></call-macro>
        <call-macro n="set_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: SA
                   -----
                   use gen variable">
      <pattern>
        <pattern-item n="SA"/>
      </pattern>
      <action>
        <call-macro n="apply_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>    
    <rule comment="REGLA: SA PCLE.QST
                   -----
                   use gen variable">
      <pattern>
        <pattern-item n="SA"/>
        <pattern-item n="pcle.qst"/>
      </pattern>
      <action>
        <call-macro n="tag_qst"><with-param pos="1"/></call-macro>
        <call-macro n="apply_ana_gen"><with-param pos="1"/></call-macro>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
    
    <!-- <rules: Clause boundary -->
    <rule comment="REGLA: CLB">
      <pattern>
        <pattern-item n="CLB"/>
      </pattern>
      <action>
        <let><var n="caseprep_verb"/><lit v=""/></let>
        <out>
          <chunk><clip pos="1" part="whole"/></chunk>
        </out>
      </action>
    </rule>
  </section-rules>
</interchunk>
