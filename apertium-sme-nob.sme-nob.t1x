<?xml version="1.0" encoding="utf-8"?>

<!--
This is the first pass. Responsibilities of this file include:
* Chunking (all rules)
* Handling part-of-speech changes introduced by bidix.
  * Rules match on source tags, so a sme verb which is specified
    as a nob noun has to be handled by the verb rule
    (this leads to some redundancy, hopefully we'll get a bidix module soon)
* (De-)compounding
  * See rule: NOM.CMP NOM
* inchl-derivation
  * See rule: VERB Der/inchl
* Simple noun phrases
  * Heads and their simple modifiers/specifiers: adj nom, adj adj nom, det adj adj nom, num adj nom
  * See rule: DET ADJ_ATTR NOM
  * See macro: out_nom
* Insert prepositions based on nominal case
  * These get their own chunk; t2x might have to remove them in co-ordination or post-position rules
    or might change them if the verb requires something else
  * See macro: set_caseprep
* Verb auxiliaries
  * Tags from sme verbs are used to output finite verb auxiliaries before the main verb.
    All verbs get their own chunks, as do lemq's (since they can move around noun phrases in t3x)
  * See macro: out_verb



DEF-CAT NAMING SCHEME:
                       lemma-pos.tag.tag_SYNTAG

where the SYNTAG part may have an l or r before or after to signify the arrow
(where l corresponds to ← and r to →);
alternatively the SYNTAG part is something like "mod", "attr" or "head".
And then there are some categories like "month", with all the months.

-->

<transfer default="chunk">
  <section-def-cats>
   <def-cat n="sent">
      <cat-item tags="sent.*"/>
      <cat-item tags="sent"/>
      <cat-item tags="clb"/>
      <cat-item tags="clb.*"/>
    </def-cat>
    <def-cat n="adpos">
      <cat-item tags="adp.*"/>
      <cat-item tags="pr.*"/>
      <cat-item tags="post.*"/>
    </def-cat>
    <def-cat n="postpos">
      <cat-item tags="adp.*"/>
      <cat-item tags="post.*"/>
    </def-cat>
    <def-cat n="adverb">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
    </def-cat>
    <def-cat n="Pcle">
      <cat-item tags="pcle.qst.*"/>
      <cat-item tags="pcle.qst"/>
      <cat-item tags="pcle.*"/>
      <cat-item tags="pcle"/>
    </def-cat>
    <def-cat n="ij">
      <cat-item tags="ij.*"/>
      <cat-item tags="ij"/>
    </def-cat>
    <def-cat n="PcleQst">
      <cat-item tags="pcle.qst"/>
      <cat-item tags="pcle.qst.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="adj_attr">
      <cat-item tags="adj.ess.*"/>
      <cat-item tags="adj.*.ess.*"/>
      <cat-item tags="adj.attr"/>
      <cat-item tags="adj.attr.*"/>
      <cat-item tags="*.adj.attr.*"/>
      <cat-item tags="adj.*.attr.*"/>
      <!-- TODO: pstv verbs don't have adj forms, should have transfer
           <exception> if tl pstv -->
      <cat-item tags="vblex.iv.adj.attr.*"/>
      <cat-item tags="vblex.tv.adj.attr.*"/>
    </def-cat>
    <def-cat n="n.sem_time">
      <cat-item tags="n.sem_time.*"/>
      <cat-item tags="n.sem_time_wthr.*"/>
      <cat-item tags="n.sem_measr_time.*"/>
    </def-cat>
    <def-cat n="n.sg.loc">
      <cat-item tags="n.*.sg.loc.*"/>
    </def-cat>
    <def-cat n="n.sg.ill">
      <cat-item tags="n.*.sg.ill.*"/>
    </def-cat>
    <def-cat n="num_mod">
      <cat-item tags="num.*.@HNOUN"/> <!-- HNOUN=syntax couldn't find a head; might still be a modifier -->
      <cat-item tags="num.*.@→N"/>
      <cat-item tags="num.*.@→A"/>
      <cat-item tags="num.*.@←SUBJ"/>
      <cat-item tags="num.*.@←OBJ"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num.*"/>
    </def-cat>
    <def-cat n="num-year">
      <cat-item tags="num.sem_year.*"/>
    </def-cat>
    <def-cat n="prn">
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="prn.rel">
      <cat-item tags="prn.rel.*"/>
    </def-cat>
    <def-cat n="prn.res">
      <cat-item tags="prn.res.*"/>
    </def-cat>
    <def-cat n="prn.ref">
      <cat-item tags="prn.ref.*"/>
    </def-cat>
    <def-cat n="prn.ref_PRONl">
      <cat-item tags="prn.ref.*.@Pron←"/>
    </def-cat>
    <def-cat n="prnitg">
      <cat-item tags="prn.itg.*"/>
    </def-cat>
    <def-cat n="prn.pers">
      <cat-item tags="prn.pers.*"/>
    </def-cat>
    <def-cat n="prn.pers.gen">
      <cat-item tags="prn.pers.*.gen.*"/>
    </def-cat>
    <def-cat n="prn.pers.acc">
      <cat-item tags="prn.pers.*.acc.*"/>
    </def-cat>
    <def-cat n="det" c="Pronouns that end up as determiners">
      <cat-item tags="prn.pers.*.gen.*"/>
      <cat-item tags="prn.ref.gen.*"/>
      <cat-item tags="prn.dem.*"/>
      <cat-item tags="prn.ind.*"/>
      <cat-item tags="prn.dem"/>
      <cat-item tags="prn.ind"/>
      <cat-item tags="prn.res"/>
      <cat-item lemma="makkár" tags="prn.itg.*"/>
      <cat-item lemma="vaikko guhte" tags="prn.itg.*"/>
      <cat-item lemma="vaikko goabbá" tags="prn.itg.*"/>
    </def-cat>
    <def-cat n="det_mod" c="Pronouns that end up as determiners, modifying an adj/noun">
      <cat-item tags="prn.pers.*.gen.@→N"/>
      <cat-item tags="prn.pers.*.gen.@→A"/>
      <cat-item tags="prn.ref.gen.*.@→N"/>
      <cat-item tags="prn.ref.gen.*.@→A"/>
      <cat-item tags="prn.ref.gen.@→N"/>
      <cat-item tags="prn.ref.gen.@→A"/>
      <cat-item tags="prn.dem.*.@→N"/>
      <cat-item tags="prn.dem.*.@→A"/>
      <cat-item tags="prn.ind.*.@→N"/>
      <cat-item tags="prn.ind.*.@→A"/>
      <cat-item tags="prn.ind.@→N"/>
      <cat-item tags="prn.ind.@→A"/>
      <cat-item lemma="makkár" tags="prn.itg.*.@→N"/>
      <cat-item lemma="makkár" tags="prn.itg.*.@→A"/>
      <cat-item lemma="ieš" tags="prn.ref.*.nom.*"/> <!-- Lene: ieš - selv -->
    </def-cat>
    <def-cat n="cmp" c="Words only seen as compund parts">
      <cat-item tags="cmp.*"/>
      <cat-item tags="cmp_sh.*"/>
      <cat-item tags="cmp"/>
      <cat-item tags="cmp_sh"/>
    </def-cat>
    <def-cat n="adj.cmp">
      <cat-item tags="adj.*.cmp"/>
      <cat-item tags="adj.*.cmp.*"/>
    </def-cat>
    <def-cat n="nom.cmp">
      <cat-item tags="n.cmp"/>
      <cat-item tags="n.cmp.*"/>
      <cat-item tags="n.*.cmp"/>
      <cat-item tags="n.*.cmp.*"/>
      <cat-item tags="np.*.cmp"/>
      <cat-item tags="np.*.cmp.*"/>
    </def-cat>
    <def-cat n="nom_head" c="Head nom's are sent to out_nom, thus we can have Verb derivatives here.">
      <cat-item tags="vblex.*.n.*"/>
      <!-- <cat-item tags="n.*"/> We don't want to catch cmp's with this! -->
      <cat-item tags="n.cmp_splitr.*"/>
      <cat-item tags="n.*.cmp_splitr.*"/>
      <cat-item tags="n.*.cmp_splitr"/>
      <cat-item tags="n.pl"/>
      <cat-item tags="n.pl.*"/>
      <cat-item tags="n.sg"/>
      <cat-item tags="n.sg.*"/>
      <cat-item tags="n.ess.*"/>
      <cat-item tags="n.*.pl"/>
      <cat-item tags="n.*.pl.*"/>
      <cat-item tags="n.*.sg"/>
      <cat-item tags="n.*.sg.*"/>
      <cat-item tags="n.*.ess.*"/>
      <cat-item tags="n.*.ess"/>
      <cat-item tags="n.abbr"/>
      <cat-item tags="n.*.abbr"/>
      <cat-item tags="n.*.abbr.*"/>
      <cat-item tags="n.abbr.*"/>
      <cat-item tags="np"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nom_all" c="In case nom_head doesn't catch all non-compounds, use this for the single-word rule.">
      <cat-item tags="vblex.*.*.n.*"/>
      <cat-item tags="vblex.*.*.n"/>
      <cat-item tags="n.*"/>
      <cat-item tags="n"/>
      <cat-item tags="np.*"/>
      <cat-item tags="np"/>
      <cat-item tags="abbr.*"/>
      <cat-item tags="abbr"/>
    </def-cat>
    <def-cat n="nom_rP" c="Head nom before a postposition, sent to out_nom">
      <cat-item tags="vblex.*.*.n.*.@→P"/>
      <cat-item tags="n.*.@→P"/>
      <cat-item tags="np.*.@→P"/>
      <cat-item tags="abbr.*.@→P"/>
    </def-cat>
    <def-cat n="nom.gen">
      <cat-item tags="n.*.gen.*"/>
      <cat-item tags="np.*.gen"/>
      <cat-item tags="np.*.gen.*"/>
    </def-cat>
    <def-cat n="nom.unprop.gen">
      <cat-item tags="n.*.gen.*"/>
    </def-cat>
    <def-cat n="nom.gen_NUMl">
      <cat-item tags="n.*.gen.@Num←"/>
      <cat-item tags="np.*.gen.@Num←"/>
    </def-cat>
    <def-cat n="nom.prop.antcog_mod">
      <cat-item tags="np.ant.f.*.@→N"/>
      <cat-item tags="np.ant.m.*.@→N"/>
    </def-cat>
    <def-cat n="nom.prop.antcog">
      <cat-item tags="np.ant.f.*"/>
      <cat-item tags="np.ant.m.*"/>
      <cat-item tags="np.cog.*"/>
    </def-cat>
    <def-cat n="nom.prop">
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nom.prop_mod">
      <cat-item tags="np.*.attr.*"/>
    </def-cat>
    <def-cat n="nom.prop.gen">
      <cat-item tags="np.*.gen"/>
      <cat-item tags="np.*.gen.*"/>
    </def-cat>
    <def-cat n="nom.prop_attr">
      <cat-item tags="np.attr.*"/>
      <cat-item tags="n.*.@→N"/>
      <cat-item tags="np.*.@→N"/>
      <cat-item lemma="gonagas" tags="n.*"/>
      <cat-item lemma="dronnet" tags="n.*"/>
      <cat-item lemma="prinsa" tags="n.*"/>
      <cat-item lemma="ruvdnaprinsa" tags="n.*"/>
      <cat-item lemma="prinseassa" tags="n.*"/>
      <cat-item lemma="ruvdnaprinseassa" tags="n.*"/>
    </def-cat>
    <def-cat n="vblex">
      <cat-item tags="vblex.*"/>
    </def-cat>
    <def-cat n="vblex.actio">
      <cat-item tags="vblex.*.actio.*"/>
    </def-cat>
    <def-cat n="vblex.actio.ess">
      <cat-item tags="vblex.*.actio.ess.*"/>
    </def-cat>
    <def-cat n="cc">
      <cat-item tags="cnjcoo.*"/>
    </def-cat>
    <def-cat n="conj">
      <cat-item tags="cnjcoo"/>
      <cat-item tags="cnjsub"/>
      <cat-item tags="cnjcoo.*"/>
      <cat-item tags="cnjsub.*"/>
    </def-cat>
    <def-cat n="time-noun">
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagimánnu" tags="n.*"/>
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="njukčamánnu" tags="n.*"/>
      <cat-item lemma="cuoŋománnu" tags="n.*"/>
      <cat-item lemma="miessemánnu" tags="n.*"/>
      <cat-item lemma="geassemánnu" tags="n.*"/>
      <cat-item lemma="suoidnemánnu" tags="n.*"/>
      <cat-item lemma="borgemánnu" tags="n.*"/>
      <cat-item lemma="čakčamánnu" tags="n.*"/>
      <cat-item lemma="golggotmánnu" tags="n.*"/>
      <cat-item lemma="skábmamánnu" tags="n.*"/>
      <cat-item lemma="juovlamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagemánnu" tags="n.*"/>

      <cat-item lemma="giđđa" tags="n.*"/>
      <cat-item lemma="geassi" tags="n.*"/>
      <cat-item lemma="dálvi" tags="n.*"/>
      <cat-item lemma="čakča" tags="n.*"/>
      <cat-item lemma="jahki" tags="n.*"/>
      <cat-item lemma="vahkku" tags="n.*"/>
      <cat-item lemma="vahkuloahppa" tags="n.*"/>
      <cat-item lemma="beaivi" tags="n.*"/>
      <cat-item lemma="diibmu" tags="n.*"/>
      <cat-item lemma="tiibmu" tags="n.*"/>
      <cat-item lemma="tiibma" tags="n.*"/>
    </def-cat>
    <def-cat n="month">
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagimánnu" tags="n.*"/>
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="njukčamánnu" tags="n.*"/>
      <cat-item lemma="cuoŋománnu" tags="n.*"/>
      <cat-item lemma="miessemánnu" tags="n.*"/>
      <cat-item lemma="geassemánnu" tags="n.*"/>
      <cat-item lemma="suoidnemánnu" tags="n.*"/>
      <cat-item lemma="borgemánnu" tags="n.*"/>
      <cat-item lemma="čakčamánnu" tags="n.*"/>
      <cat-item lemma="golggotmánnu" tags="n.*"/>
      <cat-item lemma="skábmamánnu" tags="n.*"/>
      <cat-item lemma="juovlamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagemánnu" tags="n.*"/>
    </def-cat>
    <def-cat n="season">
      <cat-item lemma="giđđa" tags="n.*"/>
      <cat-item lemma="geassi" tags="n.*"/>
      <cat-item lemma="dálvi" tags="n.*"/>
      <cat-item lemma="čakča" tags="n.*"/>
      <cat-item lemma="čakčat" tags="adv.*"/>
      <cat-item lemma="giđđat" tags="adv.*"/>
      <cat-item lemma="geassit" tags="adv.*"/>
      <cat-item lemma="geasset" tags="adv.*"/>
      <cat-item lemma="dálvit" tags="adv.*"/>
      <cat-item lemma="dálvet" tags="adv.*"/>
    </def-cat>
    <def-cat n="num.cmp">
      <cat-item tags="num.cmp"/>
      <cat-item tags="num.cmp.*"/>
      <cat-item tags="num.*.cmp"/>
      <cat-item tags="num.*.cmp.*"/>
      <cat-item tags="num.cmp_splitr"/>
      <cat-item tags="num.cmp_splitr.*"/>
      <cat-item tags="num.*.cmp_splitr"/>
      <cat-item tags="num.*.cmp_splitr.*"/>
    </def-cat>
    <def-cat n="lex-guovttos">
      <cat-item lemma="guovttos" tags="n.*.coll.*"/>
      <cat-item lemma="guovttos" tags="n.coll.*"/>
    </def-cat>
    <def-cat n="hum_gen">
      <cat-item tags="n.*.sem_hum.sg.gen.*"/>
      <cat-item tags="n.sem_hum.sg.gen.*"/>
    </def-cat>
    <def-cat n="lex-sadjai">
      <cat-item lemma="sadji" tags="n.*.sg.ill.*"/>
      <cat-item lemma="sadji" tags="n.sg.ill.*"/>
    </def-cat>
    <def-cat n="lex-siden">
      <cat-item lemma="áigi" tags="n.*"/>
      <cat-item lemma="dassái" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-jahki">
      <cat-item lemma="jahki" tags="n.*"/>
    </def-cat>
  
    <def-cat n="lex-minuhtta-loc">
      <cat-item lemma="minuhtta" tags="n.*.loc.*"/>
    </def-cat>
    <def-cat n="lex-minuhtta-ill">
      <cat-item lemma="minuhtta" tags="n.*.ill.*"/>
    </def-cat>
  
    <def-cat n="lex-vel">
      <cat-item lemma="vel" tags="adv.*"/>
      <cat-item lemma="vel" tags="adv"/>
    </def-cat>
    <def-cat n="lex-lassin">
      <cat-item lemma="lassin" tags="n.*"/>
      <cat-item lemma="*lássin" tags=""/> <!-- common typo -->
    </def-cat>
    <def-cat n="lex-arvvus">
      <cat-item lemma="árvu" tags="n.sg.loc"/>
      <cat-item lemma="árvu" tags="n.sg.loc.*"/>
      <cat-item lemma="árvu" tags="n.*.sg.loc"/>
      <cat-item lemma="árvu" tags="n.*.sg.loc.*"/>
    </def-cat>
    <def-cat n="lex-orrut-indic">
      <cat-item lemma="orrut" tags="vblex.*.indic.*"/>
    </def-cat>
    <def-cat n="lex-adnojuvvon">
      <cat-item lemma="atnit" tags="vblex.tv.der_passl.vblex.iv.prfprc"/>
      <cat-item lemma="atnit" tags="vblex.tv.der_passl.vblex.iv.prfprc.*"/>
    </def-cat>
    <def-cat n="lex-buresboahtin">
      <cat-item lemma="buresboahtin" tags="n.*"/>
      <cat-item lemma="Buresboahtin" tags="n.*"/> <!-- big init letter so it'll match first word of sentence too -->
    </def-cat>
    <def-cat n="lex-diibmu">
      <cat-item lemma="diibmu" tags="n.*"/>
      <cat-item lemma="dii" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-das-her">
      <cat-item lemma="dat" tags="prn.dem.sg.loc.@ADVL→"/> <!-- dát -->
      <cat-item lemma="dat" tags="prn.dem.sg.loc.@ADVL-ela→"/> <!-- dát -->
      <cat-item lemma="dat" tags="prn.dem.sg.loc.@ADVL-ine→"/> <!-- dát -->
    </def-cat>
    <def-cat n="lex-mannan">
      <cat-item lemma="mannat" tags="vblex.iv.prfprc.@→N"/>
    </def-cat>
    <def-cat n="lex-dan">
      <cat-item lemma="dat" tags="prn.dem.sg.*"/>
      <cat-item lemma="Dat" tags="prn.dem.sg.*"/>
    </def-cat>
    <def-cat n="lex-sivas">
      <cat-item lemma="sivva" tags="n.*.sg.loc.*"/>
      <cat-item lemma="sivva" tags="n.sg.loc.*"/>
    </def-cat>
    <def-cat n="lex-ektui">
      <cat-item lemma="ektui" tags="post"/>
      <cat-item lemma="ektui" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-mielde">
      <cat-item lemma="mielde" tags="adv"/>
      <cat-item lemma="mielde" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-dáfus">
      <cat-item lemma="dáfus" tags="post"/>
      <cat-item lemma="dáfus" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-máŋga">
      <cat-item lemma="máŋga" tags="num"/>
      <cat-item lemma="máŋga" tags="num.*"/>
    </def-cat>
    <def-cat n="lex-go">
      <cat-item lemma="go" tags="cnjsub.*"/>
      <cat-item lemma="go" tags="cnjsub"/>
    </def-cat>
    <def-cat n="lex-botta">
      <cat-item lemma="bodda" tags="n.*.sg.gen.*"/>
      <cat-item lemma="bodda" tags="n.*.sg.acc.*"/>
      <cat-item lemma="bodda" tags="n.sg.gen.*"/>
      <cat-item lemma="bodda" tags="n.*.sg.gen.*"/>
      <cat-item lemma="bodda" tags="n.sg.acc.*"/>
      <cat-item lemma="bodda" tags="n.*.sg.acc.*"/>
    </def-cat>
    <def-cat n="ord">
      <cat-item tags="adj.ord.*"/>
      <cat-item tags="adj.ord"/>
    </def-cat>
    <def-cat n="adj-nonord">
      <cat-item tags="adj.sg.*"/>
      <cat-item tags="adj.pl.*"/>
      <cat-item tags="adj.*.sg.*"/>
      <cat-item tags="adj.*.pl.*"/>
    </def-cat>
    <def-cat n="lex-beaivi">
      <cat-item lemma="beaivi" tags="n.*"/>
      <cat-item lemma="b" tags="abbr.*"/>
      <cat-item lemma="b" tags="n.abbr.*"/>
      <cat-item lemma="b" tags="n.*.abbr.*"/>
      <cat-item lemma="b" tags="adv.abbr.*"/>
    </def-cat>
    <def-cat n="ij-adj">
      <cat-item lemma="buorre" tags="adj.sg.*"/>
      <cat-item lemma="buorre" tags="adj.pl.*"/>
      <cat-item lemma="ilolaš" tags="adj.sg.*"/>
      <cat-item lemma="ilolaš" tags="adj.attr.*"/>
      <cat-item lemma="buorre" tags="adj.*.sg.*"/>
      <cat-item lemma="buorre" tags="adj.*.pl.*"/>
      <cat-item lemma="ilolaš" tags="adj.*.sg.*"/>
      <cat-item lemma="ilolaš" tags="adj.*.attr.*"/>
    </def-cat>
    <def-cat n="ij-adj2">
      <cat-item lemma="ođas" tags="adj.attr.*"/>
      <cat-item lemma="ođas" tags="adj.*.attr.*"/>
    </def-cat>
    <def-cat n="ij-nom">
      <cat-item lemma="beaivi" tags="n.sg.*"/>
      <cat-item lemma="beaivi" tags="n.*.sg.*"/>
      <cat-item lemma="eahket" tags="n.sg.*"/>
      <cat-item lemma="eahket" tags="n.*.sg.*"/>
      <cat-item lemma="idja" tags="n.sg.*"/>
      <cat-item lemma="idja" tags="n.*.sg.*"/>
      <cat-item lemma="iđit" tags="n.sg.*"/>
      <cat-item lemma="iđit" tags="n.*.sg.*"/>
      <cat-item lemma="vahkkoloahppa" tags="n.sg.*"/>
      <cat-item lemma="vahkkoloahppa" tags="n.*.sg.*"/>
      <cat-item lemma="juovllat" tags="n.pl.*"/>
      <cat-item lemma="juovllat" tags="n.*.pl.*"/>
      <cat-item lemma="jahki" tags="n.sg.*"/>
      <cat-item lemma="jahki" tags="n.*.sg.*"/>
    </def-cat>
    <def-cat n="prn-nonreferential">
      <!-- Turns to nt.sg in Norwegian if used as lone pron, although it may be pl in sme. -->
      <!-- See Nickel p.128–129, http://giellatekno.uit.no/oahpa/pronomen.nno.html#Ubestemte+pronomen -->
      <cat-item lemma="mihkke" tags="prn.*"/>
      <cat-item lemma="giige" tags="prn.*"/>
      <cat-item lemma="guhtege" tags="prn.*"/>
      <cat-item lemma="goabbáge" tags="prn.*"/>
      <cat-item lemma="guhtemušge" tags="prn.*"/>
      <cat-item lemma="makkárge" tags="prn.*"/>
      <cat-item lemma="oktage" tags="prn.*"/>
      <cat-item lemma="okta" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="mihkke" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="gii" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="guhte" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="guhte" tags="prn.ind.attr.foc_neg-ge.*"/>
      <cat-item lemma="goabbá" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="goabbá" tags="prn.ind.attr.foc_neg-ge.*"/>
      <cat-item lemma="guhtemuš" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="makkár" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="makkár" tags="prn.ind.attr.foc_neg-ge.*"/>
    </def-cat>

     <def-cat n="neg-verb">
      <cat-item tags="vblex.iv.neg.*"/>
    </def-cat>


  </section-def-cats>
  <section-def-attrs>
    <def-attr n="a_der">
      <attr-item tags="der_halla"/>
      <attr-item tags="der_inchl"/>
      <attr-item tags="der_dimin"/>
      <attr-item tags="der_nomact"/>
      <attr-item tags="der_nomag"/>
      <attr-item tags="der_muš"/>
      <attr-item tags="der_sasj"/>
      <attr-item tags="der_caus"/>
      <attr-item tags="der_h"/>
      <attr-item tags="der_d"/>
      <attr-item tags="der_st"/>
      <attr-item tags="der_vuota"/>
    </def-attr>
    <def-attr n="a_der_v2n">
      <attr-item tags="der_nomact"/>
      <attr-item tags="der_nomag"/>
      <attr-item tags="der_muš"/>
    </def-attr>
    <def-attr n="a_sintagma">
      <attr-item tags="SN"/>
      <attr-item tags="SV"/>
      <attr-item tags="SA"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="v"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="a_pstv">
      <attr-item tags="pstv"/>
    </def-attr>
    <def-attr n="a_lemq">
      <attr-item tags="lemq-obj"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
      <attr-item tags="adj.sint"/>
      <attr-item tags="adj.sint.pp"/>
      <attr-item tags="adj.sint.pprs"/>
    </def-attr>
    <def-attr n="a_adj-pure">
      <attr-item tags="adj"/>
      <attr-item tags="adj.sint"/>
    </def-attr>
    <def-attr n="a_adv">
      <attr-item tags="adv"/>
      <attr-item tags="cnjcoo"/>
    </def-attr>
    <def-attr n="a_ij">
      <attr-item tags="ij"/>
      <attr-item tags="ij"/>
    </def-attr>
    <def-attr n="a_prep">
      <attr-item tags="post"/>
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="prop_type">
      <attr-item tags="top"/>
      <attr-item tags="cog"/>
      <attr-item tags="ant"/>
      <attr-item tags="org"/>
    </def-attr>
    <def-attr n="a_num">
      <attr-item tags="num"/>
      <attr-item tags="det.qnt"/>
    </def-attr>
    <def-attr n="a_cmp">
      <attr-item tags="cmp"/>
      <attr-item tags="guio"/>
      <attr-item tags="cmp.guio"/>
      <attr-item tags="cmp_splitr"/>
    </def-attr>
    <def-attr n="a_cmp_nbrcas">
      <attr-item tags="cmp_plgen"/>
      <attr-item tags="cmp_plnom"/>
      <attr-item tags="cmp_sggen"/>
      <attr-item tags="cmp_sgnom"/>
    </def-attr>
    <def-attr n="a_prn">
      <attr-item tags="prn"/>
      <attr-item tags="prn.rel"/>
      <attr-item tags="prn.res"/>
      <attr-item tags="prn.ind"/>
      <attr-item tags="prn.dem"/>
      <attr-item tags="prn.pers"/>
      <attr-item tags="prn"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.ref"/>
    </def-attr>
    <def-attr n="a_det">
      <attr-item tags="det"/>
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="lettercase">
      <attr-item tags="fixedcase"/>
    </def-attr>
    <def-attr n="a_conj">
      <attr-item tags="cnjcoo"/>
      <attr-item tags="cnjcoo.clb"/>
      <attr-item tags="cnjsub"/>
    </def-attr>
    <def-attr n="a_count">
      <attr-item tags="coll"/>
      <attr-item tags="unc"/>
    </def-attr>
    <def-attr n="a_nom_all">
      <attr-item tags="abbr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.sem_org"/>
      <attr-item tags="np.ant.m"/>
      <attr-item tags="np.ant.f"/>
      <attr-item tags="np.sem_ani"/>
      <attr-item tags="np.attr"/>
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.attr"/>
      <attr-item tags="np.cog"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.org"/>
      <attr-item tags="np.ant"/>
    </def-attr>
    <def-attr n="a_rel">
      <attr-item tags="ref"/>
      <attr-item tags="ref"/>
      <attr-item tags="res" c="Reciprocal"/>
    </def-attr>
    <def-attr n="a_abess">
      <attr-item tags="vabess"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pasv"/>
    </def-attr>
    <def-attr n="animacy">
      <attr-item tags="impers"/>
      <attr-item tags="pers"/>
    </def-attr>
    <def-attr n="trans">
      <attr-item tags="tv"/>
      <attr-item tags="iv"/>
    </def-attr>
    <def-attr n="actio">                                       <!--TODO: what's the category name?-->
      <attr-item tags="actio"/>
    </def-attr>
    <def-attr n="a_caus">                                      <!--TODO: what's the category name?-->
      <attr-item tags="caus"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="gen-case">
      <attr-item tags="gen"/>
    </def-attr>
    <def-attr n="pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="ord.pst"/>
      <attr-item tags="ord.comp"/>
      <attr-item tags="ord.sup"/>
      <attr-item tags="comp"/>
      <attr-item tags="pst"/>
      <attr-item tags="sup"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="un"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
      <attr-item tags="GD_pers"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
      <attr-item tags="DD"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="inf"/>
      <attr-item tags="imp"/>
      <attr-item tags="prfprc"/>
      <attr-item tags="pp"/>
      <attr-item tags="TD"/>
    </def-attr>
    <def-attr n="neg">
      <attr-item tags="conneg"/>
      <attr-item tags="neg"/>
    </def-attr>
    <def-attr n="mode">
      <attr-item tags="qst"/>
    </def-attr>
    <def-attr n="a_acr">
      <attr-item tags="acr"/>
    </def-attr>
    <def-attr n="ext">
      <attr-item tags="←ext→"/>
    </def-attr>
    <def-attr n="a_part">
      <attr-item tags="part"/>
    </def-attr>
    <def-attr n="modality">
      <attr-item tags="indic"/>
      <attr-item tags="cond"/>
      <attr-item tags="cond2"/>
      <attr-item tags="cond3"/>
      <attr-item tags="pot"/>
    </def-attr>
    <def-attr n="syn_label">
      <attr-item tags="@→A"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@←ADVL"/>
       <attr-item tags="@←ADVL-ela"/>
       <attr-item tags="@←ADVL-ine"/>
       <attr-item tags="@→ADVL"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@ADVL←"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@ADVL-ela→"/>
      <attr-item tags="@ADVL-ine→"/>
      <attr-item tags="@ADVL→CS"/>
      <attr-item tags="@ADVL←OBJ"/>
      <attr-item tags="@ADVL→SUBJ"/>
      <attr-item tags="@APP"/>
      <attr-item tags="@APP-ADVL←"/>
      <attr-item tags="@APP-N←"/>
      <attr-item tags="@APP-Num←"/>
      <attr-item tags="@APP-Pron←"/>
      <attr-item tags="@APP→Pron"/>
      <attr-item tags="@→CC"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@COMP-CS←"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@-F←ADVL"/>
      <attr-item tags="@-F←ADVL-ine"/>
      <attr-item tags="@-F←ADVL-ela"/>
      <attr-item tags="@-FADVL"/>
      <attr-item tags="@-FADVL→"/>
      <attr-item tags="@-FADVL-ine→"/>
      <attr-item tags="@-FADVL-ela→"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@+FAUXV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@+FMAINV"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@-FOBJ"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OPRED"/>
      <attr-item tags="@-FOPRED→"/>
      <attr-item tags="@-F←SPRED"/>
      <attr-item tags="@-FSPRED→"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="←hab→"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@N"/>
      <attr-item tags="@N←"/>
      <attr-item tags="@→Num;"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@OBJ→"/>
      <attr-item tags="@OBJ→SPRED"/>
      <attr-item tags="@-OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@OPRED"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@←PPRED"/>
      <attr-item tags="@PPRED"/>
      <attr-item tags="@→Pron"/>
      <attr-item tags="@Pron←"/>
      <attr-item tags="@-SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@SPRED"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@SPRED←OBJ"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SUBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@SUBJ←ADVL"/>
      <attr-item tags="@SUBJ←OBJ"/>
      <attr-item tags="@VOC"/>
      <attr-item tags="@X"/>
    </def-attr>
    <def-attr n="a_sem">
      <attr-item tags="sem_act"/>
      <attr-item tags="sem_act_group"/>
      <attr-item tags="sem_act_plc"/>
      <attr-item tags="sem_act_route"/>
      <attr-item tags="sem_adr"/>
      <attr-item tags="sem_amount"/>
      <attr-item tags="sem_amount_build"/>
      <attr-item tags="sem_amount_semcon"/>
      <attr-item tags="sem_ani"/>
      <attr-item tags="sem_ani_body-abstr_hum"/>
      <attr-item tags="sem_ani_build"/>
      <attr-item tags="sem_ani_build-part"/>
      <attr-item tags="sem_ani_build_hum_txt"/>
      <attr-item tags="sem_ani_group"/>
      <attr-item tags="sem_ani_group_hum"/>
      <attr-item tags="sem_ani_hum"/>
      <attr-item tags="sem_ani_hum_plc"/>
      <attr-item tags="sem_ani_hum_time"/>
      <attr-item tags="sem_ani_plc"/>
      <attr-item tags="sem_ani_plc_txt"/>
      <attr-item tags="sem_ani_time"/>
      <attr-item tags="sem_ani_veh"/>
      <attr-item tags="sem_aniprod"/>
      <attr-item tags="sem_aniprod_hum"/>
      <attr-item tags="sem_aniprod_obj-clo"/>
      <attr-item tags="sem_aniprod_perc-phys"/>
      <attr-item tags="sem_aniprod_plc"/>
      <attr-item tags="sem_body"/>
      <attr-item tags="sem_body-abstr"/>
      <attr-item tags="sem_body-abstr_prod-audio_semcon"/>
      <attr-item tags="sem_body_body-abstr"/>
      <attr-item tags="sem_body_clth"/>
      <attr-item tags="sem_body_food"/>
      <attr-item tags="sem_body_group_hum"/>
      <attr-item tags="sem_body_group_hum_time"/>
      <attr-item tags="sem_body_hum"/>
      <attr-item tags="sem_body_mat"/>
      <attr-item tags="sem_body_measr"/>
      <attr-item tags="sem_body_obj_tool-catch"/>
      <attr-item tags="sem_body_plc"/>
      <attr-item tags="sem_body_time"/>
      <attr-item tags="sem_build"/>
      <attr-item tags="sem_build_event_org"/>
      <attr-item tags="sem_build_obj"/>
      <attr-item tags="sem_build-part"/>
      <attr-item tags="sem_build-part_plc"/>
      <attr-item tags="sem_build_build-part"/>
      <attr-item tags="sem_build_clth-part"/>
      <attr-item tags="sem_build_edu_org"/>
      <attr-item tags="sem_build_event_org"/>
      <attr-item tags="sem_build_org"/>
      <attr-item tags="sem_build_route"/>
      <attr-item tags="sem_cat"/>
      <attr-item tags="sem_clth"/>
      <attr-item tags="sem_clth-jewl"/>
      <attr-item tags="sem_clth-jewl_curr"/>
      <attr-item tags="sem_clth-jewl_money"/>
      <attr-item tags="sem_clth-jewl_org"/>
      <attr-item tags="sem_clth-jewl_plant"/>
      <attr-item tags="sem_clth-part"/>
      <attr-item tags="sem_clth_hum"/>
      <attr-item tags="sem_ctain"/>
      <attr-item tags="sem_ctain-abstr"/>
      <attr-item tags="sem_ctain-abstr_org"/>
      <attr-item tags="sem_ctain-clth"/>
      <attr-item tags="sem_ctain-clth_plant"/>
      <attr-item tags="sem_ctain-clth_veh"/>
      <attr-item tags="sem_ctain_feat-phys"/>
      <attr-item tags="sem_ctain_furn"/>
      <attr-item tags="sem_ctain_tool"/>
      <attr-item tags="sem_ctain_tool-measr"/>
      <attr-item tags="sem_curr"/>
      <attr-item tags="sem_curr_org"/>
      <attr-item tags="sem_dance"/>
      <attr-item tags="sem_dance_org"/>
      <attr-item tags="sem_dance_prod-audio"/>
      <attr-item tags="sem_dir"/>
      <attr-item tags="sem_domain"/>
      <attr-item tags="sem_domain_food-med"/>
      <attr-item tags="sem_domain_prod-audio"/>
      <attr-item tags="sem_drink"/>
      <attr-item tags="sem_dummytag"/>
      <attr-item tags="sem_edu"/>
      <attr-item tags="sem_edu_event"/>
      <attr-item tags="sem_edu_group_hum"/>
      <attr-item tags="sem_edu_mat"/>
      <attr-item tags="sem_edu_org"/>
      <attr-item tags="sem_event"/>
      <attr-item tags="sem_event_food"/>
      <attr-item tags="sem_event_hum"/>
      <attr-item tags="sem_event_plc"/>
      <attr-item tags="sem_event_plc-elevate"/>
      <attr-item tags="sem_event_time"/>
      <attr-item tags="sem_feat"/>
      <attr-item tags="sem_feat-measr"/>
      <attr-item tags="sem_feat-measr_plc"/>
      <attr-item tags="sem_feat-phys"/>
      <attr-item tags="sem_feat-phys_tool-write"/>
      <attr-item tags="sem_feat-phys_veh"/>
      <attr-item tags="sem_feat-phys_wthr"/>
      <attr-item tags="sem_feat-psych"/>
      <attr-item tags="sem_feat-psych_hum"/>
      <attr-item tags="sem_feat_plant"/>
      <attr-item tags="sem_fem"/>
      <attr-item tags="sem_food"/>
      <attr-item tags="sem_food-med"/>
      <attr-item tags="sem_food_perc-phys"/>
      <attr-item tags="sem_food_plant"/>
      <attr-item tags="sem_furn"/>
      <attr-item tags="sem_game"/>
      <attr-item tags="sem_game_obj-play"/>
      <attr-item tags="sem_geom"/>
      <attr-item tags="sem_geom_obj"/>
      <attr-item tags="sem_group"/>
      <attr-item tags="sem_group_hum"/>
      <attr-item tags="sem_group_hum_org"/>
      <attr-item tags="sem_group_hum_plc"/>
      <attr-item tags="sem_group_hum_prod-vis"/>
      <attr-item tags="sem_group_org"/>
      <attr-item tags="sem_group_sign"/>
      <attr-item tags="sem_group_txt"/>
      <attr-item tags="sem_hum"/>
      <attr-item tags="sem_hum-abstr"/>
      <attr-item tags="sem_hum_lang"/>
      <attr-item tags="sem_hum_lang_plc"/>
      <attr-item tags="sem_hum_lang_time"/>
      <attr-item tags="sem_hum_obj"/>
      <attr-item tags="sem_hum_org"/>
      <attr-item tags="sem_hum_plant"/>
      <attr-item tags="sem_hum_plc"/>
      <attr-item tags="sem_hum_tool"/>
      <attr-item tags="sem_hum_veh"/>
      <attr-item tags="sem_hum_wthr"/>
      <attr-item tags="sem_ideol"/>
      <attr-item tags="sem_lang"/>
      <attr-item tags="sem_lang_tool"/>
      <attr-item tags="sem_mal"/>
      <attr-item tags="sem_mat"/>
      <attr-item tags="sem_mat_plant"/>
      <attr-item tags="sem_mat_txt"/>
      <attr-item tags="sem_measr"/>
      <attr-item tags="sem_measr_sign"/>
      <attr-item tags="sem_measr_time"/>
      <attr-item tags="sem_money"/>
      <attr-item tags="sem_money_obj"/>
      <attr-item tags="sem_money_txt"/>
      <attr-item tags="sem_obj"/>
      <attr-item tags="sem_obj-clo"/>
      <attr-item tags="sem_obj-cogn"/>
      <attr-item tags="sem_obj-el"/>
      <attr-item tags="sem_obj-ling"/>
      <attr-item tags="sem_obj-play"/>
      <attr-item tags="sem_obj-play_sport"/>
      <attr-item tags="sem_obj-rope"/>
      <attr-item tags="sem_obj-surfc"/>
      <attr-item tags="sem_obj_semcon"/>
      <attr-item tags="sem_obj_state"/>
      <attr-item tags="sem_org"/>
      <attr-item tags="sem_org_prod-cogn"/>
      <attr-item tags="sem_org_rule"/>
      <attr-item tags="sem_org_txt"/>
      <attr-item tags="sem_org_veh"/>
      <attr-item tags="sem_part"/>
      <attr-item tags="sem_part_prod-cogn"/>
      <attr-item tags="sem_part_substnc"/>
      <attr-item tags="sem_perc-cogn"/>
      <attr-item tags="sem_perc-emo"/>
      <attr-item tags="sem_perc-emo_wthr"/>
      <attr-item tags="sem_perc-phys"/>
      <attr-item tags="sem_perc-psych"/>
      <attr-item tags="sem_phonenr"/>
      <attr-item tags="sem_plant"/>
      <attr-item tags="sem_plant-part"/>
      <attr-item tags="sem_plant_plant-part"/>
      <attr-item tags="sem_plant_tool"/>
      <attr-item tags="sem_plant_tool-measr"/>
      <attr-item tags="sem_plc"/>
      <attr-item tags="sem_plc-abstr"/>
      <attr-item tags="sem_plc-abstr_rel_state"/>
      <attr-item tags="sem_plc-abstr_route"/>
      <attr-item tags="sem_plc-elevate"/>
      <attr-item tags="sem_plc-line"/>
      <attr-item tags="sem_plc-water"/>
      <attr-item tags="sem_plc_pos"/>
      <attr-item tags="sem_plc_route"/>
      <attr-item tags="sem_plc_state"/>
      <attr-item tags="sem_plc_substnc"/>
      <attr-item tags="sem_plc_substnc_wthr"/>
      <attr-item tags="sem_plc_time"/>
      <attr-item tags="sem_plc_tool-catch"/>
      <attr-item tags="sem_plc_wthr"/>
      <attr-item tags="sem_pos"/>
      <attr-item tags="sem_process"/>
      <attr-item tags="sem_prod"/>
      <attr-item tags="sem_prod-audio"/>
      <attr-item tags="sem_prod-audio_txt"/>
      <attr-item tags="sem_prod-cogn"/>
      <attr-item tags="sem_prod-cogn_txt"/>
      <attr-item tags="sem_prod-ling"/>
      <attr-item tags="sem_prod-vis"/>
      <attr-item tags="sem_rel"/>
      <attr-item tags="sem_route"/>
      <attr-item tags="sem_rule"/>
      <attr-item tags="sem_semcon"/>
      <attr-item tags="sem_semcon_txt"/>
      <attr-item tags="sem_sign"/>
      <attr-item tags="sem_sport"/>
      <attr-item tags="sem_state"/>
      <attr-item tags="sem_state-sick"/>
      <attr-item tags="sem_state-sick_substnc"/>
      <attr-item tags="sem_substnc"/>
      <attr-item tags="sem_substnc_wthr"/>
      <attr-item tags="sem_sur"/>
      <attr-item tags="sem_symbol"/>
      <attr-item tags="sem_time"/>
      <attr-item tags="sem_time_wthr"/>
      <attr-item tags="sem_tool"/>
      <attr-item tags="sem_tool-catch"/>
      <attr-item tags="sem_tool-clean"/>
      <attr-item tags="sem_tool-it"/>
      <attr-item tags="sem_tool-measr"/>
      <attr-item tags="sem_tool-music"/>
      <attr-item tags="sem_tool-write"/>
      <attr-item tags="sem_txt"/>
      <attr-item tags="sem_veh"/>
      <attr-item tags="sem_year"/>
      <attr-item tags="sem_wpn"/>
      <attr-item tags="sem_wthr"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="n_lem"          c="noun lemma"/>
    <def-var n="n_nbr"          c="noun number"/>
    <def-var n="adj_gen"        c="adj gender"/>
    <def-var n="prn_gen"        c="pronoun gender"/>
    <def-var n="prn_nbr"        c="pronoun number"/>
    <def-var n="prn_pers"       c="pronoun person (esp. for reflexive)"/>
    <def-var n="pre-nom"        c="lu's before nom-lu in nominal chunk"/>
    <def-var n="post-nom"       c="lu's after nom-lu in nominal chunk (only used in 'den som V cmp')"/>
    <def-var n="pre-verb"       c="lu's before verb-lu in verbal chunk (only compounds for now)"/>
    <def-var n="defnes"         c="definiteness (noun, adj)"/>
    <def-var n="c_name"         c="chunk name"/>
    <def-var n="tmp"            c="temporary variable"/>
    <def-var n="blank"          c="for removing blanks"/>
    <def-var n="c_gen"          c="chunk gender"/>
    <def-var n="c_nbr"          c="chunk number"/>
    <def-var n="c_def_pos"      c="chunk defnes tag position"/>
    <def-var n="c_syn"          c="chunk syn_label"/>
    <def-var n="c_animacy"      c="chunk animacy (pers, impers)"/>
    <def-var n="caseFirstWord"  c="typographic case of first word"/>
    <def-var n="caseprep"       c="nob preposition (whole chunk) based on sme case"/>
    <def-var n="previous-nhead" c="lemh of the previous NP chunk (or special values like NUM)" v=""/>
    <def-var n="main-verb-sl" c="lemh of the previous main verb" />
    <def-var n="aux-verb-tl" c="lemh of the previous aux verb" />
  </section-def-vars>

  <section-def-lists>
    <def-list n="pers_nouns">
      <list-item v="jente"/>
      <list-item v="gutt"/>
      <list-item v="mann"/>
      <list-item v="kvinne"/>
      <list-item v="dame"/>
      <list-item v="leder"/>
      <list-item v="student"/>
      <list-item v="elev"/>
      <list-item v="lærer"/>
    </def-list>
    <def-list n="pers_genders">
      <list-item v="&lt;m&gt;"/>
      <list-item v="&lt;f&gt;"/>
      <list-item v="&lt;mf&gt;"/>
      <list-item v="&lt;GD_pers&gt;"/>
    </def-list>
    <def-list n="adj-genders" c="possible nob adj genders">
      <list-item v="&lt;m&gt;"/>
      <list-item v="&lt;mf&gt;"/>
      <list-item v="&lt;f&gt;"/>
      <list-item v="&lt;nt&gt;"/>
      <list-item v="&lt;un&gt;"/>
    </def-list>
    <def-list n="infinite_temps">
      <list-item v="&lt;inf&gt;"/>
      <list-item v="&lt;prfprc&gt;"/>
      <list-item v="&lt;pp&gt;"/>
    </def-list>

    <def-list n="sem_food">
      <list-item v="&lt;sem_body_food&gt;"/>
      <list-item v="&lt;sem_domain_food-med&gt;"/>
      <list-item v="&lt;sem_event_food&gt;"/>
      <list-item v="&lt;sem_food&gt;"/>
      <list-item v="&lt;sem_food-med&gt;"/>
      <list-item v="&lt;sem_food_perc-phys&gt;"/>
      <list-item v="&lt;sem_food_plant&gt;"/>
    </def-list>

    <def-list n="sem_time">
      <list-item v="&lt;sem_time&gt;"/>
      <list-item v="&lt;sem_time_wthr&gt;"/>
      <list-item v="&lt;sem_measr_time&gt;"/>
      <list-item v="&lt;sem_ani_hum_time&gt;"/>
      <list-item v="&lt;sem_ani_time&gt;"/>
      <list-item v="&lt;sem_body_group_hum_time&gt;"/>
      <list-item v="&lt;sem_body_time&gt;"/>
      <list-item v="&lt;sem_event_time&gt;"/>
      <list-item v="&lt;sem_hum_lang_time&gt;"/>
      <list-item v="&lt;sem_plc_time&gt;"/>
    </def-list>
    <def-list n="sem_prod-ling">
      <list-item v="&lt;sem_prod-ling&gt;"/>
    </def-list>
    <def-list n="sem_lang">
      <list-item v="&lt;sem_lang&gt;"/>
      <list-item v="&lt;sem_hum_lang&gt;"/>
      <list-item v="&lt;sem_hum_lang_plc&gt;"/>
      <list-item v="&lt;sem_hum_lang_time&gt;"/>
      <list-item v="&lt;sem_lang_tool&gt;"/>
    </def-list>


    <def-list n="sem_domain">
      <list-item v="&lt;sem_domain&gt;"/>
      <list-item v="&lt;sem_domain_food-med&gt;"/>
      <list-item v="&lt;sem_domain_prod-audio&gt;"/>
    </def-list>


    <def-list n="sem_txt">
      <list-item v="&lt;sem_ani_build_hum_txt&gt;"/>
      <list-item v="&lt;sem_ani_plc_txt&gt;"/>
      <list-item v="&lt;sem_group_txt&gt;"/>
      <list-item v="&lt;sem_mat_txt&gt;"/>
      <list-item v="&lt;sem_money_txt&gt;"/>
      <list-item v="&lt;sem_org_txt&gt;"/>
      <list-item v="&lt;sem_prod-audio_txt&gt;"/>
      <list-item v="&lt;sem_prod-cogn_txt&gt;"/>
      <list-item v="&lt;sem_semcon_txt&gt;"/>
      <list-item v="&lt;sem_txt&gt;"/>
    </def-list>
    <def-list n="sem_pos">
      <list-item v="&lt;sem_plc_pos&gt;"/>
      <list-item v="&lt;sem_pos&gt;"/>
    </def-list>
    <def-list n="sem_state">
      <list-item v="&lt;sem_obj_state&gt;"/>
      <list-item v="&lt;sem_plc-abstr_rel_state&gt;"/>
      <list-item v="&lt;sem_plc_state&gt;"/>
      <list-item v="&lt;sem_state&gt;"/>
      <list-item v="&lt;sem_state-sick&gt;"/>
      <list-item v="&lt;sem_state-sick_substnc&gt;"/>
    </def-list>
    <def-list n="sem_plc">
      <list-item v="&lt;sem_act_plc&gt;"/>
      <list-item v="&lt;sem_ani_hum_plc&gt;"/>
      <list-item v="&lt;sem_ani_plc&gt;"/>
      <list-item v="&lt;sem_ani_plc_txt&gt;"/>
      <list-item v="&lt;sem_aniprod_plc&gt;"/>
      <list-item v="&lt;sem_body_plc&gt;"/>
      <list-item v="&lt;sem_build-part_plc&gt;"/>
      <list-item v="&lt;sem_event_plc&gt;"/>
      <list-item v="&lt;sem_event_plc-elevate&gt;"/>
      <list-item v="&lt;sem_feat-measr_plc&gt;"/>
      <list-item v="&lt;sem_group_hum_plc&gt;"/>
      <list-item v="&lt;sem_hum_lang_plc&gt;"/>
      <list-item v="&lt;sem_hum_plc&gt;"/>
      <list-item v="&lt;sem_plc&gt;"/>
      <list-item v="&lt;sem_plc-abstr&gt;"/>
      <list-item v="&lt;sem_plc-abstr_rel_state&gt;"/>
      <list-item v="&lt;sem_plc-abstr_route&gt;"/>
      <list-item v="&lt;sem_plc-elevate&gt;"/>
      <list-item v="&lt;sem_plc-line&gt;"/>
      <list-item v="&lt;sem_plc-water&gt;"/>
      <list-item v="&lt;sem_plc_pos&gt;"/>
      <list-item v="&lt;sem_plc_route&gt;"/>
      <list-item v="&lt;sem_plc_state&gt;"/>
      <list-item v="&lt;sem_plc_substnc&gt;"/>
      <list-item v="&lt;sem_plc_substnc_wthr&gt;"/>
      <list-item v="&lt;sem_plc_time&gt;"/>
      <list-item v="&lt;sem_plc_tool-catch&gt;"/>
      <list-item v="&lt;sem_plc_wthr&gt;"/>
    </def-list>
    <def-list n="sem_org">
      <list-item v="&lt;sem_org&gt;"/>
      <list-item v="&lt;sem_org_prod-cogn&gt;"/>
      <list-item v="&lt;sem_org_rule&gt;"/>
      <list-item v="&lt;sem_org_txt&gt;"/>
      <list-item v="&lt;sem_org_veh&gt;"/>
      <list-item v="&lt;sem_build_event_org&gt;"/>
      <list-item v="&lt;sem_build_edu_org&gt;"/>
      <list-item v="&lt;sem_build_event_org&gt;"/>
      <list-item v="&lt;sem_build_org&gt;"/>
      <list-item v="&lt;sem_clth-jewl_org&gt;"/>
      <list-item v="&lt;sem_ctain-abstr_org&gt;"/>
      <list-item v="&lt;sem_curr_org&gt;"/>
      <list-item v="&lt;sem_dance_org&gt;"/>
      <list-item v="&lt;sem_edu_org&gt;"/>
      <list-item v="&lt;sem_group_hum_org&gt;"/>
      <list-item v="&lt;sem_group_org&gt;"/>
      <list-item v="&lt;sem_hum_org&gt;"/>
    </def-list>

    <def-list n="animate_nonagent-verbs" c="Passive versions of these have 'pers' tag on 'bli', else 'impers',
                                            in order to make the inserted subject pronoun animate.">
      <!-- From newspaper corpus, grep 'h[au]n ble'|sort|uniq -c|sort -n, then filter out 'det ble' hits etc.: -->
      <list-item v="pågripe"/>
      <list-item v="arrestere"/>
      <list-item v="drepe"/>
      <list-item v="hente"/>
      <list-item v="spørre"/>
      <list-item v="dømme"/>
      <list-item v="stoppe"/>
      <list-item v="velge"/>
      <list-item v="løslate"/>
      <list-item v="kåre"/>
      <list-item v="frakte"/>
      <list-item v="påføre"/>
      <list-item v="tvinge"/>
      <list-item v="påkjøre"/>
      <list-item v="overraske"/>
      <list-item v="anmelde"/>
      <list-item v="utnevne"/>
      <list-item v="skade"/>
      <list-item v="intervjue"/>
      <list-item v="be"/>
      <list-item v="utvise"/>
      <list-item v="bytte"/>
      <list-item v="anklage"/>
      <list-item v="operere"/>
      <list-item v="fly"/>
      <list-item v="ansette"/>
      <list-item v="styrte"/>
      <list-item v="sparke"/>
      <list-item v="sikte"/>
      <list-item v="nekte"/>
      <list-item v="konfrontere"/>
      <list-item v="såre"/>
      <list-item v="sjokkere"/>
      <list-item v="redde"/>
      <list-item v="presse"/>
      <list-item v="gjenvelge"/>
      <list-item v="frikjenne"/>
      <list-item v="fengsle"/>
      <list-item v="tildele"/>
      <list-item v="forsinke"/>
      <list-item v="utestenge"/>
      <list-item v="overmanne"/>
      <list-item v="oppringe"/>
      <list-item v="ringe"/>
      <list-item v="kontakte"/>
      <list-item v="filme"/>
      <list-item v="fange"/>
      <list-item v="bære"/>
      <list-item v="anrope"/>
      <list-item v="sykemelde"/>
      <list-item v="knivstikke"/>
      <list-item v="henrette"/>
      <list-item v="flytte"/>
      <list-item v="erstatte"/>
      <list-item v="banke"/>
      <list-item v="avhøre"/>
      <list-item v="vekke"/>
      <list-item v="overkjøre"/>
      <list-item v="nominere"/>
      <list-item v="lure"/>
      <list-item v="innkalle"/>
      <list-item v="idømme"/>
      <list-item v="hylle"/>
      <list-item v="frata"/>
      <list-item v="etterforske"/>
      <list-item v="ekskludere"/>
      <list-item v="bøtelegge"/>
      <list-item v="bortføre"/>
      <list-item v="beskyte"/>
      <list-item v="begrave"/>
      <list-item v="baktale"/>
      <list-item v="varetektsfengsle"/>
      <list-item v="utstøte"/>
      <list-item v="utlevere"/>
      <list-item v="utelate"/>
      <list-item v="transportere"/>
      <list-item v="smitte"/>
      <list-item v="skade"/>
      <list-item v="rane"/>
      <list-item v="provosere"/>
      <list-item v="plassere"/>
      <list-item v="overlevere"/>
      <list-item v="overbevise"/>
      <list-item v="omringe"/>
      <list-item v="myrde"/>
      <list-item v="irritere"/>
      <list-item v="involvere"/>
      <list-item v="invitere"/>
      <list-item v="innhente"/>
      <list-item v="imponere"/>
      <list-item v="gjenkjenne"/>
      <list-item v="geleide"/>
      <list-item v="forkjøle"/>
      <list-item v="dytte"/>
      <list-item v="deportere"/>
      <list-item v="binde"/>
      <list-item v="blende"/>
      <list-item v="avsette"/>
      <list-item v="avlytte"/>
      <list-item v="avbryte"/>
      <list-item v="avbilde"/>
      <list-item v="anholde"/>
      <!-- Newspaper-animate_nonagent-verbs are so depressing, here are some happier ones: -->
      <list-item v="forundre"/>
      <list-item v="elske"/>
      <list-item v="pålegge"/>
      <list-item v="fotografere"/>
      <list-item v="inspirere"/>
      <list-item v="klemme"/>
      <list-item v="kysse"/>
      <list-item v="rose"/>
      <list-item v="oppmuntre"/>
      <list-item v="frigjøre"/>
      <list-item v="unnskylde"/>
      <list-item v="forlate"/>
      <list-item v="beklage"/>
      <list-item v="savne"/>
    </def-list>

    <def-list n="ill-NIL-verbs" c="We add the 'ill-NIL' tag to verb chunks with these verbs,
                                   use that tag in t2x to remove the caseprep.PR.ill chunk
                                   TODO: use nob/tl verb instead?">
      <list-item v="oahpahit"/>
      <list-item v="oččodit"/>
      <list-item v="guoskat"/>
      <list-item v="joavdat"/>
      <list-item v="deaivat"/>
      <list-item v="čuohcit"/>
      <list-item v="čuohcat"/>
      <list-item v="riŋget"/>
      <list-item v="čuojahit"/>
      <list-item v="váikkuhit"/>
      <list-item v="liikot"/>
      <list-item v="påvirke"/>
      <list-item v="utvikle"/>
      <list-item v="ovdánahttit"/>
    </def-list>
    <def-list n="ill-med-verbs" c="See 'ill-NIL-verbs' above.">
      <list-item v="duhtat"/>
    </def-list>
    <def-list n="ill-i-verbs" c="See 'ill-NIL-verbs' above.">
      <list-item v="álgit"/>
      <list-item v="ásahit"/>
      <list-item v="hukset"/>
    </def-list>
    <def-list n="ill-på-verbs" c="See 'ill-NIL-verbs' above.
                                  Speech verbs, emotional(?) verbs">
      <list-item v="čállit"/>
      <list-item v="lohkat"/>
      <list-item v="hállat"/>
      <list-item v="suhttat"/>
      <list-item v="luohttit"/>
      <list-item v="dorvvastit"/>
      <list-item v="jáhkkit"/>
      <list-item v="geahččat"/>
      <list-item v="guovlat"/>
      <list-item v="báhcit"/>
      <list-item v="čoalkalit"/>
    </def-list>
    <def-list n="ill-av-verbs" c="See 'ill-NIL-verbs' above.
                                  TODO: Add all lexicalised Der_halla verbs (with illative agents)
                                  (Verbs tagged Der_halla are added in out_verb)">
      <list-item v="fillehallat"/>
      <list-item v="borahallat"/>
      <list-item v="gáskkáhallat"/>
      <list-item v="dorohallat"/>
      <list-item v="bovttáhallat"/>
      <list-item v="bealkkáhallat"/>
      <list-item v="rissehallat"/>
      <list-item v="gávnnahallat"/>
      <list-item v="oainnahallat"/>
      <list-item v="vuojáhallat"/>
    </def-list>
    <def-list n="loc-for-verbs" c="See 'ill-NIL-verbs' above.">
      <list-item v="ballat"/>
      <list-item v="nohkkot"/>
      <list-item v="váruhit"/>
    </def-list>
    <def-list n="loc-om-verbs" c="See 'ill-NIL-verbs' above.">
      <list-item v="beroštit"/>
    </def-list>
    <def-list n="loc-som-verbs" c="See 'ill-NIL-verbs' above.">
      <list-item v="beaggit" c="beaggán Sámi soga lávlaga čállin"/>
    </def-list>
    <def-list n="loc-fra-verbs" c="See 'ill-NIL-verbs' above.">
<!--      <list-item v="gullat" c="Problematic; Leat go gullan sus alddis? vs Go gullen sámegiela dien mátkkis."/>-->
      <list-item v="beassat" c="Mihttomearri lea beassat hálddašanguovllus."/>
      <list-item v="boahtit" c="Mun boađán gávpogis."/>
      <list-item v="gáidat"  c="Son lea gáidan Ipmila sánis."/>
      <list-item v="fárret"  c="… juogo fárret sámi gilážis vai besset eallit homofiilan."/>
      <list-item v="earuhit" c="earuhii nuorra Prinssa skuvlavázzima eará skuvlamánáin"/>
    </def-list>
    <def-list n="loc-om" c="Locative noun phrases default to 'på' unless in this or next list (or are np.top)">
      <list-item v="kveld"/>
      <list-item v="dag"/>
      <list-item v="morgen"/>
      <list-item v="natt"/>
    </def-list>
    <def-list n="loc-for" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
      <list-item v="NOTHING HERE YET"/>
    </def-list>
    <def-list n="loc-av" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
      <list-item v="slekt"/>
    </def-list>
    <def-list n="loc-etter" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
      <list-item v="oppfatning"/>
      <list-item v="mening"/>
    </def-list>
    <def-list n="loc-fra" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
      <list-item v="ønske" c="Lihkkobeaivve sávaldagat Káre Márehis."/>
    </def-list>
    <def-list n="loc-i" c="Locative noun phrases default to 'på' unless in this list (or are np.top)">
      <list-item v="forvaltning"/>
      <list-item v="debatt"/>
      <list-item v="første omgang"/>
      <list-item v="utgangspunkt"/>
      <list-item v="prosjekt"/>
      <list-item v="mørke"/>
      <list-item v="arbeid"/>
      <list-item v="USA"/>
      <list-item v="Guovdageainnu suohkan"/>
      <list-item v="administrasjon"/>
      <list-item v="allmenning"/>
      <list-item v="april"/>
      <list-item v="august"/>
      <list-item v="barnehage"/>
      <list-item v="forord"/>
      <list-item v="begynnelse"/>
      <list-item v="brev"/>
      <list-item v="bruk"/>
      <list-item v="by"/>
      <list-item v="bygd"/>
      <list-item v="desember"/>
      <list-item v="dokument"/>
      <list-item v="dråpe"/>
      <list-item v="februar"/>
      <list-item v="film"/>
      <list-item v="forbindelse"/>
      <list-item v="fylke"/>
      <list-item v="fylkeskommune"/>
      <list-item v="gamme"/>
      <list-item v="hage"/>
      <list-item v="hjerte"/>
      <list-item v="hus"/>
      <list-item v="januar"/>
      <list-item v="juli"/>
      <list-item v="juni"/>
      <list-item v="kirke"/>
      <list-item v="klasse"/>
      <list-item v="kommune"/>
      <list-item v="krukke"/>
      <list-item v="land"/>
      <list-item v="liv"/>
      <list-item v="lov"/>
      <list-item v="mai"/>
      <list-item v="mars"/>
      <list-item v="mellomrom"/>
      <list-item v="mobiltelefon"/>
      <list-item v="navn"/>
      <list-item v="nominasjon"/>
      <list-item v="november"/>
      <list-item v="oktober"/>
      <list-item v="periode"/>
      <list-item v="rom"/>
      <list-item v="sak"/>
      <list-item v="samfunn"/>
      <list-item v="sammenheng"/>
      <list-item v="søknad"/>
      <list-item v="seng"/>
      <list-item v="september"/>
      <list-item v="skap"/>
      <list-item v="skuff"/>
      <list-item v="speil"/>
      <list-item v="spill"/>
      <list-item v="stue"/>
      <list-item v="telefon"/>
      <list-item v="tidsrom"/>
      <list-item v="utland"/>
      <list-item v="vask"/>
      <list-item v="verden"/>
    </def-list>
    <def-list n="loc-på" c="Proper place nouns (np.top) get preposition 'i' unless they're in this list.">
      <list-item v="Andøya"/>
      <list-item v="Bygdøy"/>
      <list-item v="Cuba"/>
      <list-item v="Filippinene"/>
      <list-item v="Gjøvik"/>
      <list-item v="Grønland"/>
      <list-item v="Hamar"/>
      <list-item v="Hidra"/>
      <list-item v="Hispaniola"/>
      <list-item v="Hitra"/>
      <list-item v="Hovedøya"/>
      <list-item v="Island"/>
      <list-item v="Kreta"/>
      <list-item v="Kvaløya"/>
      <list-item v="Lillehammer"/>
      <list-item v="Madagaskar"/>
      <list-item v="Sicilia"/>
      <list-item v="Svalbard"/>
      <list-item v="Vestlandet"/>
      <list-item v="dag"/>
      <list-item v="fredag"/>
      <list-item v="kjøkken"/>
      <list-item v="lørdag"/>
      <list-item v="mandag"/>
      <list-item v="onsdag"/>
      <list-item v="søndag"/>
      <list-item v="tirsdag"/>
      <list-item v="skole"/>
      <list-item v="grunnskole"/>
      <list-item v="Sameskolen"/>
      <list-item v="sameskole"/>
      <list-item v="topp"/>
      <list-item v="torsdag"/>
      <list-item v="Østlandet"/>
      <list-item v="øy"/>
    </def-list>
    <def-list n="loc-NIL" c="Locative noun phrases default to 'i' unless in this list">
      <list-item v="uke"/>
      <list-item v="år"/>
    </def-list>
    <def-list n="loc-om-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="tale"/>
      <list-item v="snakk"/>
    </def-list>
    <def-list n="loc-for-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="frykt"/>
    </def-list>
    <def-list n="loc-av-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="del"/>
      <list-item v="NUMERAL"/>      <!-- special value set by numerals, see NUMERAL rule -->
    </def-list>
    <def-list n="loc-fra-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="ønske"/>
    </def-list>
    <def-list n="loc-etter-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="mening"/>
      <list-item v="oppfatning"/>
    </def-list>
    <def-list n="ess-NIL" c="Essive noun phrases default to 'som' unless in this list">
      <list-item v="del"/>
    </def-list>
    <def-list n="ess-til" c="Essive noun phrases default to 'som' unless in this list">
      <list-item v="grunn"/>
    </def-list>
    <def-list n="ess-til-gen" c="Essive noun phrases default to 'som' unless in this list (note: these are also turned genitive!)">
      <list-item v="lån"/>
    </def-list>
    <def-list n="ess-i" c="Essive noun phrases default to 'som' unless in this list">
      <list-item v="tillegg"/>
    </def-list>
    <def-list n="ill-i" c="Illative noun phrases default to 'til' unless in this list">
      <list-item v="del"/>
      <list-item v="sted"/>
      <list-item v="forord"/>
    </def-list>
    <def-list n="ill-på" c="Illative noun phrases default to 'til' unless in this list">
      <list-item v="ferie"/>
      <list-item v="golv"/>
      <list-item v="samisk"/>
      <list-item v="norsk"/>
      <list-item v="nynorsk"/>
      <list-item v="bokmål"/>
      <list-item v="engelsk"/>
      <list-item v="plass"/>
    </def-list>
    <def-list n="ill-NIL" c="Illative noun phrases default to 'til' unless in this list">
      <list-item v="feil"/>
      <list-item v="nok"/>
    </def-list>
    <def-list n="gen-av-head" c="Genitive @←N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="forfatter"/>
      <list-item v="kopi"/>
      <list-item v="leder"/>
      <list-item v="evaluering"/>
    </def-list>
    <def-list n="gen-om-head" c="Genitive @←N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="sang"/>
    </def-list>
    <def-list n="gen-i-head" c="Genitive @←N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="undervisning"/>
      <list-item v="opplæring"/>
    </def-list>
    <def-list n="gen-for-head" c="Genitive @←N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="sjef"/>
      <list-item v="grunnlag"/>
      <list-item v="fundament"/>
      <list-item v="basis"/>
    </def-list>

    <def-list n="no-gen-after-prop" c="If a noun in this list is preceded by a prop.gen, remove the gen from the prop">
      <list-item v="skole"/>
      <list-item v="ungdomssskole"/>
      <list-item v="by"/>
      <list-item v="kommune"/>
      <list-item v="bru"/>
      <list-item v="bro"/>
    </def-list>
    <def-list n="noun.pseudo-prop"
              c="Nouns that act proper (indefinite in the singular, no determiner)">
      <list-item v="mor"/>
      <list-item v="far"/>
      <list-item v="bestemor"/>
      <list-item v="bestefar"/>
      <list-item v="velkommen"/>
      <list-item v="januar"/>
      <list-item v="februar"/>
      <list-item v="mars"/>
      <list-item v="april"/>
      <list-item v="mai"/>
      <list-item v="juni"/>
      <list-item v="juli"/>
      <list-item v="august"/>
      <list-item v="september"/>
      <list-item v="oktober"/>
      <list-item v="november"/>
      <list-item v="desember"/>
      <list-item v="julaften"/>
      <list-item v="påskeaften"/>
      <list-item v="mandag"/>
      <list-item v="tirsdag"/>
      <list-item v="onsdag"/>
      <list-item v="torsdag"/>
      <list-item v="fredag"/>
      <list-item v="lørdag"/>
      <list-item v="søndag"/>
      <list-item v="takk"/>
      <list-item v="midnatt"/>
    </def-list>

    <def-list n="bigrams-def" c="det/adj+noun lemma co-occurrences that are typically definite">
      <list-item v="hel tid"/>
    </def-list>

    <def-list n="caus-la-verbs" c="Should get 'la' instead of 'få' in causative">
      <list-item v="delegere"/>
    </def-list>
    <def-list n="caus-Ø-verbs" c="For some verbs, there is no need for a causative helper">
      <list-item v="delegere"/>
    </def-list>
    <def-list n="annen" c="Lene added">
      <list-item v="annen"/>
    </def-list>
    <def-list n="guhte" c="hvem av dem/ingen av dem - Lene added">
      <list-item v="guhte"/>
      <list-item v="goabbá"/>
      <list-item v="guhtemuš"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>
    <def-macro n="set_caseFirstWord" npar="1"
               c="Set the typographic case to be carried by the chunk.
                  - if argument is _not_ a proper noun: caseFirstWord is the case of the lemma, and the lemma gets lowercase.
                  - if argument _is_ a proper noun: caseFirstWord is lowercase, and lemma stays unchanged.

                  This means that if the sentence starts with a proper noun, and we insert eg. a preposition before that,
                  the preposition won't get capitalised in t2x. We _could_ circumvent this by having a global variable
                  'FirstWordSeen' that is set to false on periods and true for all other lexical units, but this is low priority.

                  We treat UPPERCASE as proper nouns.">
      <let><var n="caseFirstWord"/><lit v="aa"/></let>
      <choose><when>
        <test><not><or>
          <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
          <equal><clip pos="1" side="tl" part="lettercase"/><lit-tag v="fixedcase"/></equal>
          <equal><get-case-from pos="1"><lit v="aa"/></get-case-from><lit v="AA"/></equal>
        </or></not></test>
        <let><var n="caseFirstWord"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
        <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
      </when></choose>
    </def-macro>

    <def-macro n="switch_cases" npar="2"
               c="Simply switch the typographic cases (upper/lower/capital) of the two arguments.">
      <let><var n="tmp"/><get-case-from pos="1"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
      <let><clip pos="1" side="tl" part="lemh"/><get-case-from pos="2"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
      <modify-case><clip pos="2" side="tl" part="lemh"/><var n="tmp"/></modify-case>
    </def-macro>

    <def-macro n="set_caseprep" npar="1"
               c="arg.1: noun, pronoun
                  -----
                  First attempt (may be changed in later stages).">
      <let>
        <var n="caseprep"/><lit v=""/>
      </let>
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="loc"/></equal></test>
          <let>
            <var n="caseprep"/><lit v="på"/>
          </let>
          <choose c="Exceptions to the locative→på rule:">
            <when>
              <test><or>
                <in><var n="previous-nhead"/><list n="loc-av-head"/></in>
                <in><clip pos="1" side="tl" part="lemh"/><list n="loc-av"/></in>
              </or></test>
              <let>
                <var n="caseprep"/><lit v="av"/>
              </let>
            </when>
            <when>
              <test><or>
                <in><var n="previous-nhead"/><list n="loc-fra-head"/></in>
                <in><clip pos="1" side="tl" part="lemh"/><list n="loc-fra"/></in>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
              </or></test>
              <let>
                <var n="caseprep"/><lit v="fra"/>
              </let>
            </when>
            <when>
              <test><and><or>
                <in><clip pos="1" side="tl" part="lemh"/><list n="loc-i"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_plc"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_txt"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_state"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_prod-ling"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_domain"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_pos"/></in>
                  <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_org"/></in>
                  <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.top"/></equal>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_time"/></in>
                </or>
                  <not><in><clip pos="1" side="tl" part="lemh"/><list n="loc-på"/></in></not>
                </and>
              </test>
              <let>
                <var n="caseprep"/><lit v="i"/>
              </let>
            </when>
            <when>
              <test><or>
                <in><var n="previous-nhead"/><list n="loc-for-head"/></in>
                <in><clip pos="1" side="tl" part="lemh"/><list n="loc-for"/></in>
              </or></test>
              <let>
                <var n="caseprep"/><lit v="for"/>
              </let>
            </when>
            <when>
              <test><or>
                <in><var n="previous-nhead"/><list n="loc-om-head"/></in>
                <in><clip pos="1" side="tl" part="lemh"/><list n="loc-om"/></in>
              </or></test>
              <let>
                <var n="caseprep"/><lit v="om"/>
              </let>
            </when>
            <when>
              <test>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="oppfatning"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v="etter"/>
              </let>
            </when>
            <when>
              <test>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="glad"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v=""/>
              </let>
            </when>
            <when>
              <test>
                <equal><var n="previous-nhead"/><lit v="takk"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v="for"/>
              </let>
            </when>
            <when c="Sometimes, das → av den">
              <test><and>
                <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
                <equal><clip pos="1" side="tl" part="case"/><lit-tag v="loc"/></equal>
                <or>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                </or>
              </and></test>
              <let>
                <var n="caseprep"/><lit v="av"/>
              </let>
            </when>
            <when c="Habitive, or reflexive of habitive">
              <test><or>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="←hab→"/></equal>
                <and>           <!-- «mus lea» now tagged like this: -->
                  <or>
                    <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn"/></equal>
                    <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
                  </or>
                  <equal><clip pos="1" side="tl" part="case"/><lit-tag v="loc"/></equal>
                  <or>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal>
                  </or>
                </and>
                <and>
                  <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn"/></equal>
                  <equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal>
                  <equal><clip pos="1" side="tl" part="lemh"/><lit v="selv"/></equal>
                </and>
              </or></test>
              <let>
                <var n="caseprep"/><lit v=""/>
              </let>
            </when>
          </choose>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="com"/></equal></test>
          <let>
            <var n="caseprep"/><lit v="med"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="ess"/></equal></test>
          <let>
            <var n="caseprep"/><lit v="som"/>
          </let>
          <choose><when>
            <test><in><clip pos="1" side="tl" part="lemh"/><list n="ess-til"/></in></test>
            <let>
              <var n="caseprep"/><lit v="til"/>
            </let>
          </when></choose>
          <choose><when>
            <test><in><clip pos="1" side="tl" part="lemh"/><list n="ess-til-gen"/></in></test>
            <let>
              <var n="caseprep"/><lit v="til"/>
            </let>
            <let><clip pos="1" side="tl" part="case"/><lit-tag v="gen"/></let>
          </when></choose>
          <choose><when>
            <test>
              <in><clip pos="1" side="tl" part="lemh"/><list n="ess-i"/></in>
            </test>
            <let>
              <var n="caseprep"/><lit v="i"/>
            </let>
          </when></choose>
          <choose><when>
            <test><or><in><clip pos="1" side="tl" part="lemh"/><list n="ess-NIL"/></in>
             <equal><var n="main-verb-sl"/><lit v="gohčodit"/></equal></or></test>
           <let>
              <var n="caseprep"/><lit v=""/>
            </let>
          </when></choose>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="ill"/></equal></test>
          <let>
            <var n="caseprep"/><lit v="til"/>
          </let>
          <choose>
            <when>
              <test>
                <or>
                  <in><clip pos="1" side="tl" part="lemh"/><list n="ill-på"/></in>
                  <and>
                    <equal><var n="tmp"/><lit-tag v="num"/></equal>
                    <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_time"/></in>
                  </and>
                  <and>
                    <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_lang"/></in>
                    <not><equal><var n="main-verb-sl"/><lit v="jorgalit"/></equal></not>
                  </and>
                </or>
              </test>
              <let>
                <var n="caseprep"/><lit v="på"/>
              </let>
            </when>
            <when>
              <test><or>
                <in><clip pos="1" side="tl" part="lemh"/><list n="ill-i"/></in>
                <in><var n="main-verb-sl"/><list n="ill-i-verbs"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_prod-ling"/></in>
              </or></test>
              <let>
                <var n="caseprep"/><lit v="i"/>
              </let>
            </when>
          </choose>
          <choose><when>
            <test>
              <or>
                <in><clip pos="1" side="tl" part="lemh"/><list n="ill-NIL"/></in>
                <in><var n="main-verb-sl"/><list n="ill-NIL-verbs"/></in>
              </or>
            </test>
            <let>
              <var n="caseprep"/><lit v=""/>
            </let>
          </when></choose>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal></test>
          <choose>
            <when c="The tag @N← is created by rules like NOM.GEN NOM.GEN NOM">
              <test><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@N←"/></equal></test>
              <choose>
                <when>
                  <test><in><var n="previous-nhead"/><list n="gen-om-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="om"/>
                  </let>
                </when>
                <when>
                  <test><in><var n="previous-nhead"/><list n="gen-av-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="av"/>
                  </let>
                </when>
                <when c="Guovdageainnu suohkana sátnejođiheaddji : ordføreren i Kautokeino kommune">
                  <test><or>
                  <in><var n="previous-nhead"/><list n="gen-i-head"/></in>
                   <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_org"/></in>
                </or></test>
                  <let>
                    <var n="caseprep"/><lit v="i"/>
                  </let>
                </when>
                <when>
                  <test><in><var n="previous-nhead"/><list n="gen-for-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="for"/>
                  </let>
                </when>
                <otherwise>
                  <let><var n="caseprep"/><lit v="til"/></let>
                </otherwise>
              </choose>
            </when>
            <otherwise>
              <choose>
                <when c="For when we output 'sin', when chunking doesn't match up">
                  <test><or>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→N"/></equal>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→A"/></equal>
                    <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SPRED"/></equal>
                  </or></test>
                  <let>
                    <var n="caseprep"/><lit v=""/>
                  </let>
                </when>
                <otherwise c="Not a modifier: neither prep nor genitive case">
                  <let><var n="caseprep"/><lit v=""/></let>
                  <choose><when>
                    <test><and>
                      <equal><clip pos="1" side="tl" part="case"/><lit-tag v="gen"/></equal>
                      <not><equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal></not>
                    </and></test>
                    <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
                  </when></choose>
                </otherwise>
              </choose>
            </otherwise>
        </choose>
        </when>
      </choose>

      <let>
        <var n="previous-nhead"/>
        <clip pos="1" side="tl" part="lemh"/>
      </let>

      <!-- Now create it for outputting: -->

      <choose>
        <when>
          <test><not><equal><var n="caseprep"/><lit v=""/></equal></not></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR"/>
              <clip pos="1" side="tl" part="case"/>
              <lit v="{^"/>
              <var n="caseprep"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="modify_prn_case" npar="1"
               c="arg.1: Pron (which might end up as a nob determiner)
                  -----
                  If pron is the chunk head, make sure to call this after set_caseprep!
                  - Personal pronouns can only be nom or acc (note: ←hab→ / @-FSUBJ→ / @-FOBJ→ to nom),
                  - Demonstrative and indefinites can only be gen in nob,
                  - det.pos (personal genitives) have no case, but this is handled in transfer rules.">
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.ref"/></equal></test>
          <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.pers"/></equal></test>
          <choose>
            <when>
              <test><or>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FSUBJ→"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FOBJ→"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="←hab→"/></equal>
                <and>           <!-- «mus lea» now tagged like this: -->
                  <or>
                    <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn"/></equal>
                    <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
                  </or>
                  <equal><clip pos="1" side="tl" part="case"/><lit-tag v="loc"/></equal>
                  <or>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL→"/></equal>
                     <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal>
                   <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
                   <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                   <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal>
                  </or>
                </and>
              </or></test>
              <let><clip pos="1" side="tl" part="case"/><lit-tag v="nom"/></let>
            </when>
            <when>
              <test><not>
                <or>
                  <equal><clip pos="1" side="sl" part="case"/><lit-tag v="nom"/></equal>
                  <equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal>
                </or>
              </not></test>
              <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>
            </when>
          </choose>
        </when>
        <otherwise>
          <choose><when>
            <test>
              <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal></not>
            </test>
            <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
          </when></choose>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_prn_gen_nbr_art2" npar="2"
               c="arg.1: prn/det, arg.2: noun (or, the lu we want to base prn/det gen/nbr on)
                  -----
                  Note: lone pronouns/determiners just keep GD/ND, this might change
                  in interchunk (postchunk cleans it up if not).">
      <choose c="NUMBER">
        <when c="itg never has number">
          <test><equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.itg"/></equal></test>
          <let><var n="prn_nbr"/><lit v=""/></let>
        </when>
        <when c="ref p3 has sp">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.ref"/></equal>
            <equal><clip pos="1" side="tl" part="pers"/><lit-tag v="p3"/></equal>
          </and></test>
          <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
        </when>
        <when c="sg/pl">
          <test><or>
            <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
            <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
          </or></test>
          <let><var n="prn_nbr"/><clip pos="2" side="tl" part="nbr"/></let>
        </when>
        <when c="Assume we can generate all sme dualis forms">
          <test><equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="du"/></equal></test>
          <let><var n="prn_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when>
        <otherwise>
          <let><var n="prn_nbr"/><lit-tag v="sg"/></let>
        </otherwise>
      </choose>

      <choose c="GENDER">
        <when c="itg never has gender">
          <test><equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.itg"/></equal></test>
          <let><var n="prn_gen"/><lit v=""/></let>
        </when>
        <when c="ref p3 has un">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.ref"/></equal>
            <equal><clip pos="1" side="tl" part="pers"/><lit-tag v="p3"/></equal>
          </and></test>
          <let><var n="prn_nbr"/><lit-tag v="un"/></let>
        </when>
        <when c="pl are always un">
          <test><equal><var n="prn_nbr"/><lit-tag v="pl"/></equal></test>
          <let><var n="prn_gen"/><lit-tag v="un"/></let>
        </when>
        <when c="du are always mf">
          <test><equal><var n="prn_nbr"/><lit-tag v="du"/></equal></test>
          <let><var n="prn_gen"/><lit-tag v="mf"/></let>
        </when>
        <otherwise c="sg">
          <let><var n="prn_gen"/><clip pos="2" side="tl" part="gen"/></let>
          <choose><when>
            <test><or>
              <equal><var n="prn_gen"/><lit v=""/></equal>
              <equal><var n="prn_gen"/><lit-tag v="un"/></equal>
            </or></test>
            <let><var n="prn_gen"/><lit-tag v="m"/></let>
          </when></choose>
          <!-- TODO: Whole lot of lexical exceptions here -->
        </otherwise>
      </choose>

      <choose c="DEFNES">
        <when>
          <test><equal><clip pos="2" side="tl" part="art"/><lit v="DD"/></equal></test>
          <let><clip pos="2" side="tl" part="art"/><lit-tag v="3"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="guess_animacy" npar="1"
               c="arg.1: Chunk 'head'.">
      <choose c="Put a pers tag on it if it's a gendered proper noun
                 TODO: list of animate common nouns?">
        <when>
          <test><or>
            <and>
              <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
              <in><clip pos="1" side="tl" part="gen"/><list n="pers_genders"/></in>
            </and>
            <and>
              <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n"/></begins-with>
              <in><clip pos="1" side="tl" part="lemh"/><list n="pers_nouns"/></in>
            </and>
          </or></test>
          <let><var n="c_animacy"/><lit-tag v="pers"/></let>
        </when>
        <otherwise>
          <let><var n="c_animacy"/><lit-tag v="impers"/></let>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_c_gen_nbr" npar="1"
               c="arg.1: Chunk 'head'.
                  Make sure we have GD or ND if no gen or num given.">
      <let><var n="c_gen"/><clip pos="1" side="tl" part="gen"/></let>
      <let><var n="c_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
      <choose c="If chunk head is adj, we probably want nt, but do GD in case t2x wants to change it.
                 (Could do non-sint→GD in bidix, but we don't prepend more/most until t4x, meaning the
                 adj has to have a comp/sup tagset until t4x.)">
        <when>
          <test>
            <or>
              <equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal> <!-- non-sint is turned pos -->
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="pst"/></equal>
            </or>
          </test>
          <let><var n="c_gen"/><lit-tag v="GD"/></let>
        </when>
      </choose>
      <choose>
        <when>
          <test><equal><var n="c_gen"/><lit v=""/></equal></test>
          <choose>
            <when>
              <test><equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.top"/></equal></test>
              <let><var n="c_gen"/><lit-tag v="nt"/></let>
            </when>
            <otherwise>
              <let><var n="c_gen"/><lit-tag v="GD"/></let>
            </otherwise>
          </choose>
        </when>
      </choose>
      <choose><when>
        <test><equal><var n="c_nbr"/><lit v=""/></equal></test>
        <let><var n="c_nbr"/><lit-tag v="ND"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="copy_syn_label" npar="2"
               c="arg.1: might want a syn_label, arg.2: might have syn_label
                  -----
                  Used in compounds, where typically the left part gets the syn_label while
                  the right one needs it.">
      <choose><when>
        <test><equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal></test>
        <let>
          <clip pos="1" side="sl" part="tags"/>
          <concat>
            <clip pos="1" side="sl" part="tags"/>
            <clip pos="2" side="sl" part="syn_label"/>
          </concat>
        </let>
      </when></choose>
    </def-macro>

    <def-macro n="clean_cmp" npar="1"
               c="arg.1: non-final noun in a compound
                  -----
                  The sp ones in nob.dix never have defnes tags.
                  Regular nouns are always sg.ind when non-final in compounds.
                  Bidix often does not supply defnes/number, making clip fail; in that case, append to tags">
      <choose c="Only run on compound parts!">
        <when>
          <test><not><equal><clip pos="1" side="sl" part="a_cmp"/><lit v=""/></equal></not></test>
          <choose c="cmp tags">
            <when c="Remove dash from spelled out numbers preceding non-numbers (tiåret, not ti-året)">
              <test><and>
                <equal><clip pos="1" side="sl" part="a_num"/><lit-tag v="num"/></equal>
                <equal><clip pos="1" side="sl" part="a_cmp"/><lit-tag v="cmp_splitr"/></equal>
              </and></test>
              <let><clip pos="1" side="tl" part="a_cmp"/><lit v=""/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="cmp.guio"/></equal></test>
              <let><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="guio"/></let>
            </when>
          </choose>
          <choose c="nbr/art tags">
            <when c="noun sp's have no defnes">
              <test><and>
                <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n"/></begins-with>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sp"/></equal>
              </and></test>
              <let><clip pos="1" side="tl" part="art"/><lit v=""/></let>
            </when>
            <when c="other noun/adj's as compound parts fallback to sg.ind">
              <test><or>
                <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n"/></begins-with>
                <begins-with><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></begins-with>
              </or></test>
              <choose><when>
                <test><equal><clip pos="1" side="tl" part="nbr"/><lit v=""/></equal></test>
                <let><clip pos="1" side="tl" part="tags"/><concat><clip pos="1" side="tl" part="tags"/><lit-tag v="sg"/></concat></let>
              </when></choose>
              <choose><when>
                <test><equal><clip pos="1" side="tl" part="art"/><lit v=""/></equal></test>
                <let><clip pos="1" side="tl" part="tags"/><concat><clip pos="1" side="tl" part="tags"/><lit-tag v="ind"/></concat></let>
              </when></choose>
            </when>
          </choose>
          <let><var n="defnes"/><clip pos="1" side="tl" part="art"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_defnes" npar="1"
               c="arg.1: noun/adj, with syn_label
                  -----
                  Default to indefinite, guess definite for certain GF's, genitives, ...
                  Locatives only indefinite in first position with leat
                  Adjectives given to this macro will be (predicative and) indefinite
                   (or do we ever get 'det er den røde.Def' here?)">
      <let><var n="defnes"/><lit-tag v="ind"/></let>
      <choose><when c="definite if this all matches:">
        <test>
          <and>
            <not><equal><clip pos="1" side="sl" part="a_acr"/><lit-tag v="acr"/></equal></not>
            <not><equal><clip pos="1" side="tl" part="a_count"/><lit-tag v="unc"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="ext"/><lit-tag v="←ext→"/></equal></not> <!-- Lene added -->
            <not><and>
              <equal><clip pos="1" side="sl" part="lemh"/><lit v="ságat"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="ill"/></equal>
            </and></not>
            <not><and>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="noun.pseudo-prop"/></in>
            </and></not>
            <equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal>
            <or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@OBJ→"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="←hab→"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@SUBJ→"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SUBJ"/></equal> <!--TODO not if "mus leat" construction -->
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="loc"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="ill"/></equal>
              <and>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←PPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←OPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ine"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal></not>
                <!-- syn_label!=@←ADVL conflicts with 'Son ii dáidde
                     jienastit Bargiidbellodaga(def)' but is necessary
                     for 'Doppe son orui vahku(ind)' -->
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@HNOUN"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@X"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="ess"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal></not>
              </and>
            </or>
          </and>
        </test>
        <let><var n="defnes"/><lit-tag v="def"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_defnes2" npar="2"
               c="arg.1: noun, arg.2: determiner (or adj, but only if no det).
                  With 'det (adj) nom' the noun is:
                  * indefinite if the determiner is a possessive
                  * definite if it is a demonstrative
                  With superlatives, it's always definite.
                  Otherwise, keep old defnes.
                  Assumes that clean_a_det has been called.">
      <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
      <choose>
        <when c="Common co-occurrences first">
          <test><in>
            <concat><clip pos="2" side="tl" part="lemh"/><lit v=" "/><clip pos="1" side="tl" part="lemh"/></concat>
            <list n="bigrams-def"/>
          </in></test>
          <let><var n="defnes"/><lit-tag v="def"/></let>
        </when>
        <when>
          <test><and>
            <or>
              <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="ord.pst"/></equal>
              <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="sup"/></equal>
              <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
            </or>
            <not><equal><clip pos="2" side="tl" part="lemh"/><lit v="slik"/></equal></not>
            <not><ends-with><clip pos="2" side="tl" part="lemh"/><lit v="og en halv"/></ends-with></not>
          </and></test>
          <let><var n="defnes"/><lit-tag v="def"/></let>
        </when>
        <when>  <!-- Lene changed the order of these two whens, and tried to avoid overlap. -->
          <test><or>
            <ends-with><clip pos="2" side="tl" part="lemh"/><lit v="og en halv"/></ends-with>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.qnt"/></equal>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.itg"/></equal>
            <equal><clip pos="2" side="tl" part="lemh"/><lit v="slik"/></equal>
            <equal><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj"/></equal>
            <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="comp"/></equal>
            <and> <!-- Lene added -->
              <equal><clip pos="2" side="tl" part="prop_type"/><lit-tag v="top"/></equal>
              <in><clip pos="1" side="tl" part="lemh"/><list n="no-gen-after-prop"/></in>
            </and>
            <and> <!-- Lene added -->
              <equal><clip pos="2" side="tl" part="prop_type"/><lit-tag v="top"/></equal>
              <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_org"/></in>
            </and>
            <and>
              <equal><clip pos="2" side="tl" part="case"/><lit-tag v="gen"/></equal>
              <not><equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal></not>
            </and>
            <equal><clip pos="2" side="tl" part="lemh"/><lit v="mye"/></equal>
            <equal><clip pos="2" side="tl" part="lemh"/><lit v="mange"/></equal>
          </or></test>
          <let><var n="defnes"/><lit-tag v="ind"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="clean_a_det" npar="1"
               c="arg.1: determiner. Change prn.gen into det.pos">
      <choose>
        <when>
          <test><and>
            <begins-with><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn"/></begins-with>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_prn"/><lit-tag v="det.pos"/></let>
        </when>
     </choose>
    </def-macro>

    <def-macro n="maybe_det_nbr_to_adj" npar="2"
               c="arg.1: det, arg.1: adjective
                  -----
                  Can be useful even if there's a noun, since noun may be sp.
                  ">
      <choose c="For positives, if use any number on ND">
        <when>
          <test><and>
            <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="ND"/></equal>
            <or>
              <equal><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></equal>
              <ends-with><clip pos="2" side="tl" part="grau"/><lit-tag v="pst"/></ends-with>
            </or>
            <or>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
            </or>
          </and></test>
          <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="modify_adj_gen_nbr" npar="2"
               c="arg.1: noun, arg.1: adjective
                  -----
                  ">
      <choose><when c="(for compound adj's, just keep bidix-specified tags)">
        <test><equal><clip pos="2" side="sl" part="a_cmp"/><lit v=""/></equal></test>
        <choose c="For positives, copy noun number over (if sg/pl).">
          <when>
            <test><and>
              <or>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
              </or>
              <or>
                <equal><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></equal>
                <ends-with><clip pos="2" side="tl" part="grau"/><lit-tag v="pst"/></ends-with>
              </or>
            </and></test>
            <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
          </when>
        </choose>
        <choose c="When GD, nob adj's are either nt or mf">
          <when>
            <test><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal></test>
            <choose c="Try to copy from noun">
              <when><test><in><clip pos="1" side="tl" part="gen"/><list n="adj-genders"/></in></test>
              <let><clip pos="2" side="tl" part="gen"/><clip pos="1" side="tl" part="gen"/></let>
              </when>
            </choose>
            <choose c="Default to mf if still unset">
              <when>
                <test>
                  <not><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="nt"/></equal></not>
                </test>
                <let><clip pos="2" side="tl" part="gen"/><lit-tag v="mf"/></let>
              </when>
            </choose>
          </when>
        </choose>
      </when></choose>
    </def-macro>

    <def-macro n="set_c_syn" npar="1"
               c="We always have '3' as the defnes position in chunks, following chunk tag and syn_label,
                  this macro just ensures that there _is_ a syn_label.">
      <!-- TODO: remove this and assume functions.cg3 always does what it should? -->
      <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
      <choose>
        <when>
          <test><equal><var n="c_syn"/><lit v=""/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@X"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_verb-lemma" npar="1">
      <choose>
        <when c="M[V] set main-verb-sl">
          <test>
            <and><or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FMAINV"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SUBJ"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@A←"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@N←"/></equal></or>
              <equal><clip pos="1" side="sl" part="a_verb"/><lit-tag v="vblex"/></equal>
              <not><equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_nomact"/></equal></not>
            </and>
          </test>
          <let><var n="main-verb-sl"/><clip pos="1" side="sl" part="lemh"/></let>
        </when>
        <when c="M[V] set aux-verb-lemma">
          <test>
            <and><or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FAUXV"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FAUXV"/></equal>
              </or>
              <equal><clip pos="1" side="sl" part="a_verb"/><lit-tag v="vblex"/></equal>
            </and>
          </test>
          <let><var n="aux-verb-tl"/><clip pos="1" side="tl" part="lemh"/></let>
        </when>
      </choose>
    </def-macro>


    <def-macro n="append_pre-nom" npar="2"
               c="arg.1: nom head, arg.2: pre-nom (e.g. genitive-noun, adj)
                  -----
                  Appends arg2 to the pre-nom variable.
                  Assumes defnes has been set!
                  Assumes clean_cmp has been run if it's a compound!
                  Assumes the space is appended inside the rule!
                  -----
                  TODO: The other possible tl PoS'es">
      <choose>
        <when c="Adjective, e.g. sápmi.n.sg.gen → samisk.adj">
          <test><not><equal><clip pos="2" side="tl" part="a_adj"/><lit v=""/></equal></not></test>
          <call-macro n="modify_adj_gen_nbr"><with-param pos="1"/><with-param pos="2"/></call-macro>
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
          <choose>
            <when>
              <test><ends-with><clip pos="2" side="tl" part="a_cmp"/><lit-tag v="guio"/></ends-with></test>
              <append n="pre-nom"><lit v="-"/></append>
            </when>
          </choose>
        </when>
        <otherwise c="Noun">
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
        </otherwise>
      </choose>
    </def-macro>


    <!-- Output macros: -->

    <def-macro n="out_nom" npar="1"
               c="arg.1: noun
                  -----
                  ASSUMES THAT pre-nom, c_name, defnes AND caseFirstWord HAVE BEEN SET!
                  This macro is used to output nominal heads, possibly prepended by determiners
                  or adjectives (stored in pre-nom). It uses the case of the argument to find the
                  caseprep, outputting this before any det/adj's. The resulting chunk has the
                  syn_label of the nominal.
                  Removes number from proper noun.">
      <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
      <out><var n="caseprep"/></out>

      <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
      <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
      <choose>
        <when c="add sg to essive">
          <test><equal><clip pos="1" side="tl" part="case"/><lit-tag v="ess"/></equal></test>
          <let>
            <clip pos="1" side="tl" part="tags"/>
            <concat>
              <clip pos="1" side="tl" part="a_nom_all"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg"/>
            </concat>
          </let>
        </when>
      </choose>

      <append n="c_name"><lit v="nom"/></append>

      <choose>
        <when c="tl PoS is deverbal noun">
          <test><not><equal><clip pos="1" side="sl" part="a_der_v2n"/><lit v=""/></equal></not></test>

          <choose>
            <when>
              <test><equal><clip pos="1" side="sl" part="a_der_v2n"/><lit-tag v="der_nomag"/></equal></test>
              <let><var n="n_lem"/><lit v="er"/></let>
            </when>
            <otherwise>
              <let><var n="n_lem"/><lit v="ing"/></let>
            </otherwise>
          </choose>

          <let><var n="n_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
          <choose><when>
            <test><equal><clip pos="1" side="tl" part="nbr"/><lit v=""/></equal></test>
            <let><var n="n_nbr"/><lit-tag v="sg"/></let>
          </when></choose>

          <let><var n="c_def_pos"/><lit-tag v="3"/></let>
          <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="a_count"/></tag>
                <tag><var n="c_animacy"/></tag>
              </tags>
              <var n="pre-nom"/>
              <mlu>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <clip pos="1" side="tl" part="a_pstv"/>
                  <clip pos="1" side="tl" part="temps"/>
                  <clip pos="1" side="tl" part="voice"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
                <lu>
                  <var n="n_lem"/>
                  <clip pos="1" side="tl" part="a_nom"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <var n="n_nbr"/>
                  <var n="c_def_pos"/>
                  <clip pos="1" side="tl" part="gen-case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </mlu>
            </chunk>
          </out>
        </when>

        <when c="tl PoS is verb">
          <test><equal><clip pos="1" side="tl" part="a_verb"/><lit-tag v="vblex"/></equal></test>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord"
                   c="The tag order corresponds with nouns, to make c_def_pos (e.g. on pre-nominals) work.">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_verb"/>
                <clip pos="1" side="tl" part="a_pstv"/>
                <clip pos="1" side="tl" part="temps"/>
                <clip pos="1" side="tl" part="voice"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>

        <when c="tl PoS is an adv (ie. V.Der2.Actor.N, but bidix changed lemma PoS to an adv)">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal>
            <not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not>
          </and></test>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord"
                   c="The tag order corresponds with nouns, to make c_def_pos (e.g. on pre-nominals) work.">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adv"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <when c="tl PoS is an adj.sg/pl (ie. V.Der2.Actor.N, but bidix changed lemma PoS to an adj)
                 Just output pst ind; TODO: different bidix verb pardef for these PoS changes.">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal>
            <or>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
            </or>
            <not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not>
          </and></test>
          <choose>
            <when>
              <test><equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal></test>
              <let><var n="adj_gen"/><lit-tag v="mf"/></let>
            </when>
            <otherwise><let><var n="adj_gen"/><lit-tag v="un"/></let></otherwise>
          </choose>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord"
                   c="The tag order corresponds with nouns, to make c_def_pos (e.g. on pre-nominals) work.">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adj-pure"/>
                <lit-tag v="pst"/>
                <var n="adj_gen"/>
                <clip pos="1" side="tl" part="nbr"/>
                <lit-tag v="ind"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>

        <when c="cmp_splitr → sg.ind.guio (split compounds)
                 eanan-(cmp_splitr) ja luonddudoahpagiid → jord-(sg.ind) og naturfagord">
          <test><equal><clip pos="1" side="sl" part="a_cmp"/><lit-tag v="cmp_splitr"/></equal></test>
          <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><lit-tag v="ind"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><lit-tag v="sg"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="a_count"/></tag>
                <tag><var n="c_animacy"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_nom"/>
                <clip pos="1" side="tl" part="gen"/>
                <lit-tag v="sg.ind.guio"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>

        <otherwise c="Regular Noun to Noun">
          <let><var n="n_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
          <let><var n="c_def_pos"/><lit-tag v="3"/></let>
          <choose c="Tag cleanup first">
            <when c="np's and acr's have no number nor defnes:">
              <test><or>
                <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
                <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n.acr"/></equal>
              </or></test>
              <let><var n="n_nbr"/><lit v=""/></let>
              <let><var n="c_def_pos"/><lit v=""/></let>
            </when>
            <when c="collective mf's always have pl as number:">
              <test><and>
                <equal><clip pos="1" side="tl" part="a_count"/><lit-tag v="coll"/></equal>
                <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="mf"/></equal>
              </and></test>
              <let><var n="n_nbr"/><lit-tag v="pl"/></let>
            </when>
            <when c="other mf's always have sp as number:">
              <test><equal><clip pos="1" side="tl" part="gen"/><lit-tag v="mf"/></equal></test>
              <let><var n="n_nbr"/><lit-tag v="sp"/></let>
            </when>
            <when c="Other genders default to sg if unspecified:">
              <test><equal><clip pos="1" side="tl" part="nbr"/><lit v=""/></equal></test>
              <let><var n="n_nbr"/><lit-tag v="sg"/></let>
            </when>
          </choose>
          <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="a_count"/></tag>
                <tag><var n="c_animacy"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_nom"/>
                <clip pos="1" side="tl" part="gen"/>
                <var n="n_nbr"/>
                <var n="c_def_pos"/>
                <clip pos="1" side="tl" part="gen-case"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </otherwise>
      </choose>
      <let><var n="pre-nom"/><lit v=""/></let>
    </def-macro>


    <def-macro n="out_verb" npar="1"
               c="arg.1: verb
                  -----
                  ASSUMES THAT pre-verb, c_name AND caseFirstWord HAVE BEEN SET!
                  This macro is used to output verbal heads, possibly prepended by compound parts
                  (stored in pre-verb).
                  This macro does the following, in this order:
                  - insert progressive aux if this is a progressive
                  - insert causative aux if we have a 'caus' tag
                  - insert passive aux if we see a 'pass' tag
                  - insert main predicate (tl PoS may be verb, adj, adv or n;
                              temps may have changed by the above operations)
                  - insert reflexive if we have a 'ref' tag
TODO: caseSecondWord ?">

      <choose c="Certain verbs interact with case prepositions, tag that here;
                 if so change preposition in t2x.
This tag is added to both main predicate chunks (except noun, TODO)
and to Conditional, Causative and and Passive chunks, just to make sure...">
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-NIL-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="ill-NIL"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-på-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="ill-på"/></let>
        </when>
        <!-- Why commented out? –KBU -->
<!--        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-i-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="ill-i"/></let>
        </when> -->
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-med-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="ill-med"/></let>
        </when>
        <when>
          <test><or>
            <in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-av-verbs"/></in>
            <ends-with><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_halla"/></ends-with>
          </or></test>
          <let><var n="caseprep"/><lit-tag v="ill-av"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-for-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="loc-for"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-om-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="loc-om"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-fra-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="loc-fra"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-som-verbs"/></in></test>
          <let><var n="caseprep"/><lit-tag v="loc-som"/></let>
        </when>
        <otherwise c="No Change">
          <let><var n="caseprep"/><lit-tag v="NC"/></let>
        </otherwise>
      </choose>

      <choose c="Prepend 'ikke' if VAbess (should it be 'uten'?) TODO"><when>
        <test><equal><clip pos="1" side="sl" part="a_abess"/><lit-tag v="vabess"/></equal></test>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@ADVL"/></tag>
            </tags>
            <lu>
              <lit v="ikke"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
          <b/>
        </out>
      </when></choose>

      <choose c="Prepend cnjsub if present progressive:
TODO: better translation possible? ('drev og'? 'holdt på å'?), but when 'orrut' to the left, it should be inf."><when>
        <test><and>
          <equal><clip pos="1" side="sl" part="case"/><lit-tag v="ess"/></equal>
          <equal><clip pos="1" side="sl" part="actio"/><lit-tag v="actio"/></equal>
          <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
          <not><equal><var n="aux-verb-tl"/><lit v="synes"/></equal></not>
        </and>
        </test>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@CVP.cnjsub"/></tag>
            </tags>
            <lu>
              <lit v="i ferd med å"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
      </when></choose>

      <choose c="Prepend 'kunne/skulle/skal' if conditional:"><when>
        <test><or>
          <equal><clip pos="1" side="sl" part="modality"/><lit-tag v="cond"/></equal>
          <equal><clip pos="1" side="sl" part="modality"/><lit-tag v="cond2"/></equal>
          <equal><clip pos="1" side="sl" part="modality"/><lit-tag v="cond3"/></equal>
        </or></test>
        <let><var n="tmp"/><lit v="kunne"/></let>
        <choose><when>
          <test><equal><clip pos="1" side="sl" part="modality"/><lit-tag v="cond2"/></equal></test>
          <let><var n="tmp"/><lit v="skulle"/></let>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        </when></choose>
        <choose><when>
          <test><equal><clip pos="1" side="sl" part="modality"/><lit-tag v="cond3"/></equal></test>
          <let><var n="tmp"/><lit v="skulle"/></let>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pres"/></let>
        </when></choose>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="sl" part="modality"/></tag>
              <tag><clip pos="1" side="tl" part="temps"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="animacy"/></tag>
              <tag><var n="caseprep"/></tag>
            </tags>
            <lu>
              <var n="tmp"/>
              <lit-tag v="vblex"/>
              <clip pos="1" side="tl" part="temps"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
      </when></choose>

      <choose c="Prepend 'begynne' if inchoative:"><when>
        <test><equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_inchl"/></equal></test>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="sl" part="modality"/></tag>
              <tag><clip pos="1" side="tl" part="temps"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="animacy"/></tag>
              <tag><var n="caseprep"/></tag>
            </tags>
            <lu>
              <lit v="begynne"/>
              <lit-tag v="vblex"/>
              <clip pos="1" side="tl" part="temps"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="part">
            <tags>
              <tag><lit-tag v="part"/></tag>
            </tags>
            <lu>
              <lit v="å"/><lit-tag v="part"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
      </when></choose>

      <choose c="Prepend 'la' if causative:
                 TODO: 'få OBJ til å' vs 'la', correct syn_label, interaction with others types..."><when>
        <test><and>
          <equal><clip pos="1" side="tl" part="a_caus"/><lit-tag v="caus"/></equal>
          <not><in><clip pos="1" side="tl" part="lemh"/><list n="caus-Ø-verbs"/></in></not>
        </and></test>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="sl" part="modality"/></tag>
              <tag><clip pos="1" side="tl" part="temps"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="animacy"/></tag>
              <tag><var n="caseprep"/></tag>
            </tags>
            <lu>
              <lit v="la"/>
              <lit-tag v="vblex"/>
              <clip pos="1" side="tl" part="temps"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
      </when></choose>

      <choose c="If pstv and not pret/pres/pp/inf, turn into inf
                 (these have very limited paradigms, and adding an aux just doesn't sound good...)">
        <when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="a_pstv"/><lit v=""/></equal></not>
            <not><or>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pres"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></equal>
            </or></not>
          </and></test>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        </when>
      </choose>

      <choose c="Prepend 'bli' aux (moving over temps) if
                 passive and pret/pp/pstv/imp/adj (and not a nominal derivation)

                 TODO: OK to just discard syn_label from pret.passives?">
        <when>
          <test><and>
            <equal><clip pos="1" side="tl" part="voice"/><lit-tag v="pasv"/></equal>
            <equal><clip pos="1" side="sl" part="a_nom_all"/><lit v=""/></equal>
            <or>
              <not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="a_nom_all"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="a_pstv"/><lit v=""/></equal></not>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="imp"/></equal>
            </or>
          </and></test>
          <let><var n="c_syn"/><lit-tag v="@+FAUXV"/></let>
          <choose><when>
            <test><in><clip pos="1" side="tl" part="temps"/><list n="infinite_temps"/></in></test>
            <let><var n="c_syn"/><lit-tag v="@-FAUXV"/></let>
          </when></choose>
          <let><var n="c_animacy"/><lit-tag v="impers"/></let>
          <choose><when>
            <test><in><clip pos="1" side="tl" part="lem"/><list n="animate_nonagent-verbs"/></in></test>
            <let><var n="c_animacy"/><lit-tag v="pers"/></let>
          </when></choose>
          <out>
            <chunk name="verb" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><var n="c_animacy"/></tag>
                <tag><var n="caseprep"/></tag>
              </tags>
              <lu>
                <lit v="bli"/>
                <lit-tag v="vblex"/>
                <clip pos="1" side="tl" part="temps"/>
              </lu>
            </chunk>
            <b/>
          </out>
          <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></let>
          <let><clip pos="1" side="tl" part="voice"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="voice"/><lit v=""/></let> <!-- yes twice, bidix can add two tags :/ -->

        </when>
      </choose>

      <choose c="Output the main predicate, verb/adj/adv/etc.">
        <when c="tl PoS is adv (eg. negative)">
          <test><not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
          <append n="c_name"><lit v="adv"/></append>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="neg"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
                <tag><var n="caseprep"/></tag>
              </tags>
              <var n="pre-verb"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adv"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <when c="tl PoS is adj">
          <test><not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not></test>
          <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
          <append n="c_name"><lit v="adj"/></append>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SA"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
                <tag><var n="caseprep"/></tag>
              </tags>
              <var n="pre-verb"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adj"/>
                <clip pos="1" side="tl" part="grau"/>
                <lit-tag v="GD.ND.ind"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <otherwise c="tl PoS is assumed to be verb">
          <choose>
            <when>
              <test><equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="være"/></equal></test>
              <append n="c_name"><lit v="vcop"/></append>
            </when>
            <otherwise>
              <append n="c_name"><lit v="verb"/></append>
            </otherwise>
          </choose>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
                <tag><var n="caseprep"/></tag>
              </tags>
              <var n="pre-verb"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_verb"/>
                <clip pos="1" side="tl" part="a_pstv"/>
                <clip pos="1" side="tl" part="temps"/>
                <clip pos="1" side="tl" part="voice"/>
                <!-- lemq is given its own chunk below -->
              </lu>
            </chunk>
          </out>
        </otherwise>
      </choose>

      <choose><when c="Append 'seg' if reflexive:">
        <test><equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal></test>
        <let><var n="prn_pers"/><clip pos="1" side="tl" part="pers"/></let>
        <let><var n="prn_gen"/><lit-tag v="mf"/></let>
        <let><var n="prn_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        <choose><when>
          <test><equal><var n="prn_nbr"/><lit v=""/></equal></test>
          <let><var n="prn_nbr"/><lit-tag v="sg"/></let>
        </when></choose>
        <choose><when c="pl always un">
          <test><equal><var n="prn_nbr"/><lit-tag v="pl"/></equal></test>
          <let><var n="prn_gen"/><lit-tag v="un"/></let>
        </when></choose>
        <choose><when c="form 'seg' has analysis p3.un.sp">
          <test><or>
            <equal><var n="prn_pers"/><lit v=""/></equal>
            <equal><var n="prn_pers"/><lit-tag v="p3"/></equal>
          </or></test>
          <let><var n="prn_pers"/><lit-tag v="p3"/></let>
          <let><var n="prn_gen"/><lit-tag v="un"/></let>
          <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
        </when></choose>
        <out>
          <b/>
          <chunk name="prn">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><lit-tag v="@←OBJ"/></tag>
              <tag><var n="prn_pers"/></tag>
              <tag><var n="prn_nbr"/></tag>
              <tag><lit-tag v="acc"/></tag>
            </tags>
            <lu>
              <lit v="seg"/>
              <lit-tag v="prn.ref"/>
              <var n="prn_pers"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <lit-tag v="acc"/>
            </lu>
          </chunk>
        </out>
      </when></choose>

      <choose><when c="the lemq was not output in the above 'otherwise'; output as a chunk here">
        <test><and>
          <equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal>
          <equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal>
          <not><equal><clip pos="1" side="tl" part="lemq"/><lit v=""/></equal></not>
        </and></test>
        <out>
          <chunk name="lemq">
            <tags>
              <tag><lit-tag v="lemq"/></tag>
              <tag><clip pos="1" side="tl" part="a_lemq"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="lemq"/></lu>
          </chunk>
        </out>
      </when></choose>
      <let><var n="caseprep"/><lit v=""/></let>
    </def-macro>
  </section-def-macros>

  <section-rules>
    <!-- <rules: TODO MWE's or pos-changes that really should be lexicalised

         Main pos should preferably never change in bidix, leads to
         too many cases in transfer, better to keep exceptions here,
         where we can avoid introducing complexity in the _regular_
         transfer rules.
    -->
    <rule comment="C[L] lex-buresboahtin → velkommen" c="No ij reading in sme analyser, so needs special rule.">
      <pattern>
        <pattern-item n="lex-buresboahtin"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ij" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="velkommen"/>
              <lit-tag v="ij"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-dan lex-sadjai" c="dan sadjái → i stedet">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-sadjai"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="i stedet"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[TW] hum_gen lex-guovttos" c="artistta guovttos → de to artistene">
      <pattern>
        <pattern-item n="hum_gen"/>
        <pattern-item n="lex-guovttos"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="de"/>
              <lit-tag v="prn.pers.p3.un.pl.nom"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="to"/>
              <lit-tag v="det.qnt.un.pl"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="pl.def"/>
              <clip pos="1" side="tl" part="lemq"/>
             </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[AT] lex-minuhtta lex-minuhtta" c="minuvttas minuktii → minutt for minutt">
      <pattern>
        <pattern-item n="lex-minuhtta-loc"/>
        <pattern-item n="lex-minuhtta-ill"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="minutt"/>
              <lit-tag v="n.nt.sg.ind"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="for"/>
              <lit-tag v="pr"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="minutt"/>
              <lit-tag v="n.nt.sg.ind"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[AL] lex-dan lex-sadjai lex-go" c="dan sadjái go → i stedet for å">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-sadjai"/>
        <pattern-item n="lex-go"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="cnjsub"/></tag>
            </tags>
            <lu>
              <lit v="i stedet for å"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[DLT] prn.pers.acc lex-arvvus lex-adnojuvvon" c="min árvvus adnojuvvon → vårt ærede">
      <pattern>
        <pattern-item n="prn.pers.acc"/>
        <pattern-item n="lex-arvvus"/>
        <pattern-item n="lex-adnojuvvon"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="gen"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="det.pos"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="adj_verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><lit-tag v="sg"/></tag>
            </tags>
            <lu>
              <lit v="ære"/>
              <lit-tag v="adj.pp.sg.def"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><not><equal><b pos="2"/><lit v=" "/></equal></not></test>
            <out><b pos="2"/></out>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="C[DL] lex-arvvus lex-adnojuvvon" c="árvvus adnojuvvon → ærede">
      <pattern>
        <pattern-item n="lex-arvvus"/>
        <pattern-item n="lex-adnojuvvon"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adj_verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><lit-tag v="sg"/></tag>
            </tags>
            <lu>
              <lit v="ære"/>
              <lit-tag v="adj.pp.sg.def"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
            <out><b pos="1"/></out>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="C[DL] lex-dan lex-sivas lex-go" c="dan sivas go → fordi">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-sivas"/>
        <pattern-item n="lex-go"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="fordi"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[L] lex-vel lex-lassin" c="vel lassin → i tillegg">
      <pattern>
        <pattern-item n="lex-vel"/>
        <pattern-item n="lex-lassin"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="i tillegg"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[L] lex-máŋga lex-dáfus" c="máŋgga dáfus → på mange måter">
      <pattern>
        <pattern-item n="lex-máŋga"/>
        <pattern-item n="lex-dáfus"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="på mange måter"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[DL] lex-dan lex-ektui lex-go" c="dan ektui go → mens / mot">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-ektui"/>
        <pattern-item n="lex-go"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="mens"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-das-her " c="das → her">
      <pattern>
        <pattern-item n="lex-das-her"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="her"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[DL] lex-dan lex-botta" c="dan botta → mens">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-botta"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="mens"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-botta" c="botta → mens">
      <pattern>
        <pattern-item n="lex-botta"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="mens"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[LT] lex-mannan n.sem_time" c="Mannan vahku → Sist uke (could mannan get an adj reading?)">
      <pattern>
        <pattern-item n="lex-mannan"/>
        <pattern-item n="n.sem_time"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
                <lit v="sist"/>
                <lit-tag v="adj.sint.sup.un.sp.ind"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>


    <rule comment="C[LT] lex-mannan n.sem_time lex-siden" c="Njealje jagi áigi → For fire år siden">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="n.sem_time"/>
        <pattern-item n="lex-siden"/>
      </pattern>
      <action>
        <out>
          <chunk name="adpos">
            <tags>
              <tag><lit-tag v="PR"/></tag>
            </tags>
            <lu>
              <lit v="for"/>
              <lit-tag v="pr"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="adv">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="2"/>
          <chunk name="adv">
            <tags>
              <tag><lit-tag v="ADV.@ADVL←"/></tag>
            </tags>
            <lu>
              <lit v="siden"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: MWE interjections (which can't be in analyser as multiwords) -->
    <rule comment="C[T] ij-adj ij-nom" c="buorre eahket">
      <pattern>
        <pattern-item n="ij-adj"/>
        <pattern-item n="ij-nom"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="2"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <out>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[T] ij-adj ij-adj2 ij-nom">
      <pattern>
        <pattern-item n="ij-adj"/>
        <pattern-item n="ij-adj2"/>
        <pattern-item n="ij-nom"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="3"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <out>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Dates (need to be before num_nom rules) -->
    <rule comment="C[DT] month ord lex-beaivi" c="guovvamánu 17. beaivvi → 17. februar
                   TODO: should we also chunk MONTH NUM DOT BEAIVI YEAR ?
                   TODO: should we always delete the genitive here?
                   TODO: do we ever want definite? ('den 17.februar')?">
      <pattern>
        <pattern-item n="month"/>
        <pattern-item n="ord"/>
        <pattern-item n="lex-beaivi"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="2"/><b/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
      </action>
    </rule>
    <rule comment="C[T] lex-diibmu num" c="diibmu 11.00 → klokken 11.00">
      <pattern>
        <pattern-item n="lex-diibmu"/>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal></test>
          <let><clip pos="2" side="tl" part="gen"/><lit-tag v="nt"/></let>
          <let><clip pos="2" side="tl" part="lemh"/><lit v="én"/></let> <!-- ett -->
        </when></choose>
        <out>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[T] num-year season" c="1990 giđa → våren 1990
                   Always definite (should not add a determiner in t4x)
                   Removes genitive from season (selected by numeral)

                   No need for exceptions for num's like 'okta' since '1990'
                   should be tagged sem_year">
      <pattern>
        <pattern-item n="num-year"/>
        <pattern-item n="season"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>

        <choose>
          <when c="adv">
            <test><not><equal><clip pos="2" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv_det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="tl" part="gen"/></tag>
                  <tag><clip pos="2" side="tl" part="nbr"/></tag>
                  <tag><lit-tag v="def"/></tag>
                  <tag><clip pos="2" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_adv"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_num"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise c="noun">
            <out>
              <chunk name="pre_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="tl" part="gen"/></tag>
                  <tag><clip pos="2" side="tl" part="nbr"/></tag>
                  <tag><lit-tag v="def"/></tag>
                  <tag><clip pos="2" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_nom"/>
                  <clip pos="2" side="tl" part="gen"/>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="def"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_num"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>
    <rule comment="C[T] num.cmp nom_head" c="1990-logu → 1990-tallet
                   Always definite (should not add a determiner in t4x)
                   if a_cmp is 'guio', nob.dix adds a dash">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>

        <choose><when>
          <test><equal><clip pos="2" side="tl" part="lemh"/><lit v="lohku"/></equal></test>
          <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        </when></choose>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><var n="defnes"/><lit-tag v="def"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <choose>
          <when><test>
          <and>
            <equal><clip pos="2" side="sl" part="lemh"/><lit v="jahki"/></equal>
            <not><equal><clip pos="2" side="sl" part="a_der"/><lit-tag v="der_sasj"/></equal></not>
          </and></test>
            <out>
              <var n="caseprep"/>
              <chunk name="pre_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><lit-tag v="ind"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="sl" part="nbr"/></tag>
                  <tag><clip pos="2" side="sl" part="case"/></tag>
                </tags>
                <var n="pre-nom"/>
                <lu>
                  <lit v="årig"/>
                  <lit-tag v="adj.pst.nt.sg.ind"/>
                </lu>
              </chunk>
            </out>
            <choose>
              <when>
                <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
                <out><b pos="1"/></out>
              </when>
            </choose>
          </when>
          <when><test>
          <and>
            <equal><clip pos="2" side="sl" part="lemh"/><lit v="jahki"/></equal>
            <equal><clip pos="2" side="sl" part="a_der"/><lit-tag v="der_sasj"/></equal>
          </and></test>
            <out>
              <var n="caseprep"/>
              <chunk name="pre_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><lit-tag v="ind"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="sl" part="nbr"/></tag>
                  <tag><clip pos="2" side="sl" part="case"/></tag>
                </tags>
                <var n="pre-nom"/>
                <lu>
                  <lit v="åring"/>
                  <lit-tag v="n.m"/>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="ind"/>
                </lu>
              </chunk>
            </out>
            <choose>
              <when>
                <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
                <out><b pos="1"/></out>
              </when>
            </choose>
              </when>

          <otherwise>
            <call-macro n="out_nom"><with-param pos="2"/></call-macro>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="C[] num.cmp adj_attr nom_head" c="
                   22-jahkásaš nieida">
      <!--
          Intended matches:
	^6<num><cmp><guio>/6<det><qnt><un><pl><guio>$ ^jahki<n><der_sasj><adj><attr><@→N>/-åring<n><m><attr><@→N>$
	^nieida<n><sem_hum><sg><nom><←ext→><@←SUBJ>/jente<n><f><sem_hum><sg><nom><←ext→><@←SUBJ>      -->
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <!-- not set_defnes2 here, seems to work better just looking at head syntax tag: -->
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>

            <let><var n="tmp"/><lit-tag v="3"/></let>
        <choose>
          <when>
            <test><begins-with><clip pos="2" side="tl" part="lemh"/><lit v="-"/></begins-with></test>
            <let><var n="blank"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><var n="blank"/><b pos="1"/></let>
          </otherwise>
        </choose>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <var n="blank"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="tmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="3" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>



    <rule comment="C[S] num.cmp num" c="golbma-njealje → tre-fire">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <!-- In this case we don't want to remove the dash: -->
        <!-- <call-macro n="clean_cmp"><with-param pos="1"/></call-macro> -->
        <choose>
          <when>
            <test><or>
              <equal><clip pos="1" side="sl" part="a_cmp"/><lit-tag v="cmp_splitr"/></equal>
              <not><equal><b pos="1"/><lit v=" "/></equal></not>
            </or></test>
            <let><var n="blank"/><b pos="1"/></let>
          </when>
          <otherwise>
            <let><var n="blank"/><lit v=""/></let>
          </otherwise>
        </choose>
        <out>
          <chunk name="det_det" case="caseFirstWord"> <!-- no t4x rule yet, but no cleanup should be needed -->
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="tl" part="gen"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <var n="blank"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="previous-nhead"/><lit v="NUMERAL"/></let>
      </action>
    </rule>

    <rule comment="C[ST] num.cmp nom.cmp nom_head" c="1900-áibmomediagáffe → 1990-kringkastingskaffen
                   Always definite (should not add a determiner in t4x)
                   if a_cmp is 'guio', nob.dix adds a dash">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>

        <choose><when>
          <test><equal><clip pos="3" side="tl" part="lemh"/><lit v="lohku"/></equal></test>
          <let><clip pos="3" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        </when></choose>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><var n="defnes"/><lit-tag v="def"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <!-- <rules: Proper nouns -->
    <rule comment="C[T] nom.prop
                   Needs to be before the NOM rule.">
      <pattern>
        <pattern-item n="nom.prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
              <tag><var n="c_animacy"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="c_animacy"/><lit v=""/></let>
      </action>
    </rule>
    <rule comment="C[T] nom.prop_mod nom.prop
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom.prop_mod"/>
        <pattern-item n="nom.prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
              <tag><var n="c_animacy"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="c_animacy"/><lit v=""/></let>
      </action>
    </rule>


    <rule comment="C[T] nom.prop_mod nom.prop_mod nom.prop
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom.prop_mod"/>
        <pattern-item n="nom.prop_mod"/>
        <pattern-item n="nom.prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="3"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
              <tag><var n="c_animacy"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[T] nom.prop_attr nom.prop.antcog" c="(šattai) Prinsa Harald (Ruvdnaprinsan) → (ble) Prins Harald (kronprins) Uses NOM.PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><not><equal><clip pos="2" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="2" side="tl" part="gen"/></let>
        </when></choose>

        <choose>
          <when>
            <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
            <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="art"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><clip pos="1" side="tl" part="whole"/><concat><clip pos="1" side="tl" part="whole"/><lit-tag v="ind"/></concat></let>
          </otherwise>
        </choose>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
              <tag><lit-tag v="pers"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[TV] nom.prop_attr nom.prop.antcog_mod nom.prop.antcog" c=", muitala rektor Liisa Holmberg.
                   Uses middle NOM.PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog_mod"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <choose><when c="C[V] c_gen">
          <test><not><equal><clip pos="2" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="2" side="tl" part="gen"/></let>
        </when></choose>

        <choose>
          <when c="remove tags if propernoun">
            <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
            <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="art"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><clip pos="1" side="tl" part="whole"/><concat><clip pos="1" side="tl" part="whole"/><lit-tag v="ind"/></concat></let>
          </otherwise>
        </choose>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
              <tag><lit-tag v="pers"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[TV] nom.prop_attr nom.prop.antcog_mod nom.prop.antcog nom.prop.antcog" c=", sámediggepresideantta Tiina Sanila-Aikio.
                   Uses nom.prop.antcog_mod gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog_mod"/>
        <pattern-item n="nom.prop.antcog"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <choose><when c="C[V] c_gen">
          <test><not><equal><clip pos="2" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="2" side="tl" part="gen"/></let>
        </when></choose>

        <choose>
          <when c="remove tags if propernoun">
            <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
            <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="art"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><clip pos="1" side="tl" part="whole"/><concat><clip pos="1" side="tl" part="whole"/><lit-tag v="ind"/></concat></let>
          </otherwise>
        </choose>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="4" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="4" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="4" side="tl" part="case"/></tag>
              <tag><lit-tag v="pers"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_nom"/>
              <clip pos="4" side="tl" part="gen"/>
              <clip pos="4" side="tl" part="gen-case"/>
              <clip pos="4" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[TV] nom.cmp nom.prop_attr nom.prop.antcog" c="Ruvdnaprinsa Harald → Kronprins Harald
                   Uses NOM.PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><not><equal><clip pos="3" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="3" side="tl" part="gen"/></let>
        </when></choose>

        <choose>
          <when>
            <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
            <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
            <let><clip pos="2" side="tl" part="art"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><clip pos="2" side="tl" part="whole"/><concat><clip pos="2" side="tl" part="whole"/><lit-tag v="ind"/></concat></let>
          </otherwise>
        </choose>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
              <tag><lit-tag v="pers"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Noun, numeral+noun and compounds -->

    <rule comment="C[_] nom_all (tl: NOM, VERB)
                   This is a catch-all rule; it's OK that some paths are blocked by previous rules.">
      <pattern>
        <pattern-item n="nom_all"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>
     </action>
    </rule>

    <rule comment="C[_] num-year year">
      <pattern>
        <pattern-item n="lex-jahki"/>
        <pattern-item n="num-year"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_nom">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
              <tag><clip pos="1" side="tl" part="a_count"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[TV] num nom.gen_NUMl" c="
                   Here the head (caseprep, syn_label) is the numeral!
                   Numerals take genitive case, chunk case is numeral case,
                   so we don't use out_nom
                   TODO: enforce double defnes? (de tre bilene)">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="nom.gen_NUMl"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <let><var n="tmp"/><b pos="1"/></let>
        <choose>
          <when>
            <test><or>
              <begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
              <equal><clip pos="2" side="tl" part="a_nom"/><lit-tag v="n.acr"/></equal>
            </or></test>
            <let><var n="n_nbr"/><lit v=""/></let>
            <let><var n="c_def_pos"/><lit v=""/></let>
          </when>
          <when c="logi-jagáš → tiåret">
            <test><and>
              <equal><clip pos="2" side="tl" part="lemh"/><lit v="år"/></equal>
              <equal><b pos="1"/><lit v="-"/></equal>
              <not><equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_year"/></equal></not>
            </and>
            </test>
            <let><var n="n_nbr"/><lit-tag v="sg"/></let>
            <let><var n="c_def_pos"/><lit-tag v="def"/></let>
            <let><var n="tmp"/><lit v=""/></let>
          </when>
          <when c="2015 golggotmánu">
            <test>
              <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_year"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></let>
            <let><var n="n_nbr"/><lit-tag v="sg"/></let>
            <let><var n="c_def_pos"/><lit-tag v="ind"/></let>
          </when>
          <otherwise>
            <let><var n="n_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
            <let><var n="c_def_pos"/><lit-tag v="3"/></let>
          </otherwise>
        </choose>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
              <tag><clip pos="1" side="tl" part="a_count"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <var n="tmp"/>      <!-- b pos=1 by default -->
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <var n="n_nbr"/>
              <var n="c_def_pos"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[V] num_mod nom_head" c="
                   Oblique use of num nom, here the nominal is the head (caseprep, syn_label)
                   so we use out_nom
                   (but we copy genitive-case and number from the numeral onto the nom).
                   TODO: should we really copy genitive-case over? ('lea vuosttaš prinsa 567 jahkái')">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><var n="tmp"/><clip pos="1" side="sl" part="a_num"/></let> <!-- illative på -->


        <let><var n="c_name"/><lit v="pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <let><clip pos="2" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="2" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>

        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="C[V] num_mod nom.cmp nom_head" c="
                   See NUM_MOD NOM">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><clip pos="3" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="3" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="3" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] num_mod adj_attr nom_head" c="
                   22 jahkásaš Tine
                   See num_mod nom_head">
      <!--
          Intended matches:
          ^9<num><sg><nom><@HNOUN>$ ^jahkásaš<a><attr><@→N>$ ^álbmotskuvla<n><sg><nom><@HNOUN>$
          okta<num><sg><nom><@→N>/en<det><qnt><GD><sg><nom><@→N> gassat<a><attr><@→N>/tykk<adj><sint><pst><GD><ND><@→N> nisu<n><sg><nom><@SUBJ→>/kvinne<n><f><sg><nom><@SUBJ→>
          guokte dehálaš čilgehusa – her skal nbr over på adj/subst

          More suspicious matches:
          1922:s parlamentáralaš skuvlakommišuvnna
          C<num><nom><@→N>/C<det><qnt><pl><nom><fixedcase><@→N> Liekkas<a><sup><attr><@→N>/Varm<adj><sint><sup><attr><@→N> mánotbadji<n><sg><nom><@SUBJ→>/måned<n><m><sg><nom><@SUBJ→>
          1976<num><sg><acc><@→N>/1976<det><qnt><pl><acc><@→N> dálá<a><attr><@→N>/nåtidig<adj><sint><pst><GD><ND><@→N> lullisámegiella<n><sg><gen><@Num←>/sørsamisk<n><m><sg><gen><@Num←>
      -->
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <!-- not set_defnes2 here, seems to work better just looking at head syntax tag: -->
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>

        <choose>
          <when>
            <!-- TODO: list of 'adj-noun' type adj's? (always def after num)-->
            <!-- TODO: other relevant rules? -->
            <test><equal><clip pos="2" side="tl" part="lemh"/><lit v="år gammel"/></equal></test>
            <let><var n="tmp"/><lit-tag v="def"/></let>
          </when>
          <!-- We set use chunk defnes here for both adj and nom,
               so that if defnes changes in t2x/t3x, both adj and nom
               get the change in t4x -->
          <otherwise>
            <let><var n="tmp"/><lit-tag v="3"/></let>
          </otherwise>
        </choose>
        <choose>
          <when>
            <test><begins-with><clip pos="2" side="tl" part="lemh"/><lit v="-"/></begins-with></test>
            <let><var n="blank"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><var n="blank"/><b pos="1"/></let>
          </otherwise>
        </choose>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <var n="blank"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="tmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="3" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="3" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="3" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>
    <rule comment="C[] NUM_MOD DET_MOD ADJ_ATTR NOM
                   -----
                   máŋggain eará smávit fatnasiiguin → med de mange andre mindre båtene">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="2"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="2"/><with-param pos="4"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="3"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>
        <let><clip pos="4" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="4" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="4" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="4" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] num_mod det_mod nom_head
                   -----
                   čieža eará boazoeaiggádat ">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="2"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="2" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="3" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="3" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] det_mod det_mod nom_head
                   -----
                   dat eará boazoeaiggádat ">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="clean_a_det"><with-param pos="2"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="2" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="3" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="3" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NUM_MOD NOM.GEN NOM
                   -----
                   Oblique use of num nom, here the final nominal is the head
                   See NUM_MOD NOM rule.">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <append n="pre-nom">
          <concat>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] ADJ.CMP NOM
                   -----
                   allaskuvla → høyskole
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.CMP NOM
                   -----
                   politiijastašuvnna → politistasjon(s)
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.CMP NOM.CMP NOM
                   -----
                   Ruvdnaprinsabáras → Kronprinsparet
                   Moves syn_label from first CMP to NOM">
      <pattern>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <append n="pre-nom"><b pos="1"/></append>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] CMP NOM
                   -----
                   vuođđofága → grunnfag
                   mielbargin → som medarbeider
                   Words which only appear as compound parts should be fully specified in bidix.
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>
        <let><clip pos="1" side="tl" part="a_cmp"/><lit v=""/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="whole"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.CMP ADJ
                   -----
                   sámegiel → samespråklig
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Lone determiners, pronouns, adverbs -->

    <rule comment="C[] PRN-NONREFERENTIAL ii goabbáge → ingen av dem
                   Like DET rule, but force nt sg">
      <pattern>
        <pattern-item n="neg-verb"/>
        <pattern-item n="prn-nonreferential"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <choose>
          <when>
            <test><equal><clip pos="2" side="sl" part="lemh"/><lit v="mihkke"/></equal></test>
            <let><clip pos="2" side="tl" part="lemh"/><lit v="ingenting"/></let>
            <let><clip pos="2" side="tl" part="tags"/><lit-tag v="prn.ind.un.sg.acc"/></let>
          </when>
          <otherwise>
            <let><clip pos="2" side="tl" part="lemh"/><lit v="ingen"/></let>
            <let><clip pos="2" side="tl" part="tags"/><lit-tag v="det.qnt.m.sg"/></let>
          </otherwise>
        </choose>

        <choose>
          <when>
            <test><in caseless="yes"><clip pos="2" side="sl" part="lemh"/><list n="guhte"/></in></test>
            <out>
              <var n="caseprep"/>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
              </chunk>
              <b pos="1"/>
              <chunk name="adpos">
                <tags>
                  <tag><lit-tag v="PR"/></tag>
                </tags>
                <lu>
                  <lit v="av"/>
                  <lit-tag v="pr"/>
                </lu>
              </chunk>
              <b/>
              <chunk name="prn">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                </tags>
                <lu>
                  <lit v="de"/>
                  <lit-tag v="prn.pers.p3.un.pl.acc"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <var n="caseprep"/>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>


    <rule comment="C[] PRN-NONREFERENTIAL maidege → noe
                   Like DET rule, but force nt sg">
      <pattern>
        <pattern-item n="prn-nonreferential"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>

        <out>
          <var n="caseprep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] PRN.RES">
      <pattern>
        <pattern-item n="prn.res"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[] DET dán → dette
                              munno [geažil] → [på grunn av] oss to">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <choose><when c="dát alone is nearly always 'dette'">
          <test><equal><clip pos="1" side="sl" part="lemh"/><lit v="dát"/></equal></test>
          <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>
        </when></choose>

        <out>
          <var n="caseprep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] RELATIVE_PRONOUN gii → som
                   Just removes everything.
                   (Should we call the chunk something else maybe?)">
      <pattern>
        <pattern-item n="prn.rel"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] REFLEXIVE_PRONOUN ieš → seg / h*n
                   Just removes everything from normal reflexives,
                   changes @-FOBJ→ reflexives into personal pronouns with GD + nom
                   Does not match genitive reflexives (treated as det.pos)
                   TODO: Son osku iežas(@-FSUBJ→) bestojuvvon(@X)">
      <pattern>
        <pattern-item n="prn.ref"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>

        <choose>
          <when>
            <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="prpers"/></equal></test>
            <out>
              <var n="caseprep"/>
              <chunk name="prn" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><lit-tag v="GD"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><lit-tag v="nom"/></tag>
                </tags>
                <lu>
                  <lit v="prpers"/>
                  <lit-tag v="prn.pers"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <lit-tag v="GD"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="nom"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="Adverb (eg. 'på egen hånd'): no caseprep">
            <test><not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="@ADVL"/></tag>
                  <tag><clip pos="1" side="tl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="selv.det.emph">
            <test><and>
              <not><equal><clip pos="1" side="tl" part="a_det"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@Pron←"/></equal></not>
            </and></test>
            <out>
              <var n="caseprep"/>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="selv.det.emph.@Pron← Lene added. Mis leat alddámet ain šibihat.">
            <test><and>
              <not><equal><clip pos="1" side="tl" part="a_det"/><lit v=""/></equal></not>
            <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@Pron←"/></equal></and></test>
            <out>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <lit-tag v="un.sp"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="prn.ref">
            <test><equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.ref"/></equal></test>
            <out>
              <var n="caseprep"/>
              <chunk name="prn" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_prn"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <lit-tag v="mf"/>
                  <lit-tag v="ND"/>
                  <clip pos="1" side="tl" part="case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <var n="caseprep"/>
              <chunk name="prn" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_prn"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="C[] PERSONAL_PRONOUN REFLEXIVE_PRONOUN
                   (Jus in livčče) mun ieš → (Hvis jeg ikke kan være) meg.acc selv
                   Changes prpers case to accusative.
                   TODO: Does it put acc on too much? E.g.
                   moai ieža vel válljejetne → vi_to.nom selv (vi_to velger)">
      <pattern>
        <pattern-item n="prn.pers"/>
        <pattern-item n="prn.ref_PRONl"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>

        <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>

        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="det">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="gen"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <clip pos="2" side="tl" part="a_prn"/>
              <clip pos="2" side="tl" part="pers"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="C[] INTERROGATIVE_PRONOUN mii → hva">
      <pattern>
        <pattern-item n="prnitg"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] PERSONAL_PRONOUN
                   This will catch genitive pronouns too (we're outputting both a_prn and a_det).
                   Not all genitive pronouns turn into determiners.">
      <pattern>
        <pattern-item n="prn.pers"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: DET* ADJ* NOM* -->

    <rule comment="C[] ADJ
                   -----
                   dehálaš → viktig, deháleamos → viktigst
                   bassivuođa → det hellige">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <choose>
          <when c="Lene added this: guovdageaidnulaš → kautokeinoværing">
            <test><equal><clip pos="1" side="tl" part="a_nom_all"/><lit-tag v="n"/></equal></test>
            <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>
          </when>
          <when>
            <test><not><equal><clip pos="1" side="sl" part="a_nom_all"/><lit v=""/></equal></not></test> <!-- how this ? -->
            <let><var n="defnes"/><lit-tag v="def"/></let>
            <out>
              <chunk name="pre_adj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SA"/></tag>
                  <tag><var n="c_syn"/></tag>
                  <tag><var n="defnes"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><lit-tag v="nt"/></tag>
                  <tag><lit-tag v="sg"/></tag>
                </tags>
                <lu>
                  <lit v="den"/><lit-tag v="det.dem.nt.sg"/>
                </lu>
                <b/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adj"/>
                  <clip pos="1" side="tl" part="grau"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="3"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk name="adj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SA"/></tag>
                  <tag><var n="c_syn"/></tag>
                  <tag><var n="defnes"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><var n="c_gen"/></tag>
                  <tag><var n="c_nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adj"/>
                  <clip pos="1" side="tl" part="grau"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="3"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR NOM
                   -----
                   almmolaš bálvalusaide → til offentlige tjenester
                   almmolaš bálvalus → (den) offentlige tjenesten">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR ADJ_ATTR NOM
                   -----
                   ođđa almmolaš bálvalusaide → til nye offentlige tjenester
                   ođđa almmolaš bálvalus → (den) nye offentlige tjenesten">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR ADJ_ATTR NOM.CMP NOM
                   -----
                   ođđa digitála heahtefierpmádat → det nye digitale nødnettverket
                   TODO: epenthesis!
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="art"/>
              <clip pos="3" side="tl" part="a_cmp"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] ADJ_ATTR NOM.CMP NOM
                   -----
                   duiska okkupašuvdnafápmu → tysk okkupasjonsmakt
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR NOM.CMP NOM.CMP NOM
                   -----
                   Dalá Ruvdnaprinsabáras → Daværende Kronprinsparet
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="art"/>
              <clip pos="3" side="tl" part="a_cmp"/>
              <clip pos="3" side="tl" part="lemq"/>
              <lit v="$"/>
          </concat>
        </let>
        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] PRON-NONREFERENTIAL NOM.@→P
                   (Ii daddjo)  mihkkege almenneha  (birra) → noe om allmenningen
                   Don't chunk in this case.">
      <pattern>
        <pattern-item n="prn-nonreferential"/>
        <pattern-item n="nom_rP"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>
        <out>
          <var n="caseprep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
        </out>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="C[] DET NOM
                   du bávččas → din smerte
                   eará sámi → annen same">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- TODO earáin ruovttusiidduide → av_andre til_hjemmesidene: -->
        <!-- <exception><test><not><equal><clip pos="1" side="sl" part="case"/><clip pos="2" side="sl" part="case"/></equal></not></test></exception> -->
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <choose c="Lene added this : ieš - selv">
          <when>
            <test>
              <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.emph"/></equal>
            </test>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
            <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
          </when>
        </choose>
        <choose c="Lene added this: eará - annen">
          <when>
            <test><and>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="annen"/></in> <!-- perhaps we don't need this list -->
              <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="pl"/></equal></and>
            </test>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
          </when>
        </choose>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_det"/>
            <var n="prn_gen"/>
            <var n="prn_nbr"/>
            <clip pos="1" side="tl" part="art"/>
            <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] DET NOM.CMP NOM
                   eará skuvlamánáin → andre skolebarnene">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] DET NOM.CMP NOM.CMP NOM
                   du idjabeavdeskuffas → i din nattbordskuff">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="4"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="art"/>
              <clip pos="3" side="tl" part="a_cmp"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] DET ADJ.CMP NOM
                   min nuoramus bártni → til vår yngste gutt
                   min nuoramus olbmot → våre yngste mennesker
                   du deháleamos doaibma → din viktigste oppgave
                   mu stuora givssi → til min store plage
                   juohke lágán geđggiiguin → med alle slags steiner
                   TODO: demonstrative 'denne viktige oppgaven' (def!)">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
<!--              <clip pos="2" side="tl" part="nbr"/>-->
              <lit-tag v="sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <!--<b pos="2"/>-->
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>



    <rule comment="C[] DET ADJ_ATTR NOM
                   min nuoramus bártni → til vår yngste gutt
                   min nuoramus olbmot → våre yngste mennesker
                   du deháleamos doaibma → din viktigste oppgave
                   mu stuora givssi → til min store plage
                   juohke lágán geđggiiguin → med alle slags steiner
                   TODO: demonstrative 'denne viktige oppgaven' (def!)">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.GEN DET ADJ_ATTR NOM
                   -----
                   riikka nubbi davvisámegiel namma → landets andre nordsamiske navn
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.
                   Ensure det is definite (using clip, only sets if it has a defnes tag).">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="2"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="2"/><with-param pos="4"/></call-macro>
        <let><clip pos="2" side="tl" part="art"/><lit-tag v="def"/></let>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="2"/><with-param pos="3"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR NOM.GEN NOM
                   -----
                   aktonas mánáid gatnjaliiguin → ensomme barns tårer
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <!-- for ADJ_ATTR -->
        <let><var n="defnes"/><lit-tag v="def"/></let>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>
    <rule comment="C[] NOM.GEN ADJ_ATTR NOM
                   -----
                   gieldda stuorimus mánáidgárdi → kommunens største barnehage
                   Sámi pedagogalaš bargi bargá doppe → En samisk pedagogisk ansatt arbeider der borte
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.
                   ">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for ADJ_ATTR -->
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR NOM.GEN ADJ_ATTR NOM
                   -----
                   Son lea nuorra Ristena boares biilla siste. → Han/Hun er i unge Ristens gamle bil.
                   nuorra sámi boares biilla → en ung samisk gammel bil
                   nuorra Ristena boares biilla → den unge Ristens gamle bil
                   Čeahpes sámi pedagogalaš bargi bargá mánáidgárddis. → Den flinke samiske pedagogiske ansatte arbeider i barnehagen. (defnes TODO)
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <!-- for first ADJ_ATTR -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for second ADJ_ATTR -->
        <choose>
          <when c="Previous word was a real NOM.GEN">
            <test><equal><clip pos="2" side="tl" part="a_adj"/><lit v=""/></equal></test>
            <let><var n="defnes"/><lit-tag v="def"/></let>
          </when>
          <!-- <otherwise c="Use defnes of previous word"> -->
          <!-- </otherwise> -->
        </choose>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] DET ADJ
                   -----
                   Always definite in nob if det is a possessive,
                   TODO: defnes for other determiners, perhaps need c_def_pos
                   TODO: is this a common pattern?">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <let><var n="defnes"/><lit-tag v="def"/></let>

        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>

              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] NOM.PROP_GEN NOM
                   -----
                   Defnes of possessed NOM is ind (NOM.PROP has no defnes).
                   Needs to be before NOM.GEN NOM">
      <pattern>
        <pattern-item n="nom.prop.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <choose><when c="Avoid «Tromsøs kommune»">
          <test><or>
            <in><clip pos="2" side="tl" part="lemh"/><list n="no-gen-after-prop"/></in>
            <in><clip pos="2" side="sl" part="a_sem"/><list n="sem_org"/></in>
          </or></test>
          <let><clip pos="1" side="tl" part="gen-case"/><lit v=""/></let>
        </when></choose>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.UNPROP.GEN NOM
                   -----
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="nom.unprop.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <choose><when>
          <test><equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="velkommen"/></equal></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
		<choose><when>
          <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>

        <choose><when><test> <!-- Lene: for sápmi.n.sg.gen samisk.adj -->
        <equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal></test>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        </when>
		<otherwise>
        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>

        <!-- for possessed NOM -->
		</otherwise>
		</choose>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.PROP_GEN NOM.CMP NOM
                   -----
                   Defnes of possessed NOM is ind (NOM.PROP has no defnes).
                   Needs to be before NOM.GEN NOM">
      <pattern>
        <pattern-item n="nom.prop.gen"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.UNPROP.GEN NOM.CMP NOM
                   -----
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="nom.unprop.gen"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <!-- for NOM.GEN -->
        <choose><when>
          <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <choose><when><test> <!-- Lene: for sápmi.n.sg.gen samisk.adj -->
        <equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal></test>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        </when>
        <otherwise>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        </otherwise>
        </choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] DET NOM.GEN NOM
                   -----
                   dán jagi válggas → dette år(et)s valg
                   Sets defnes of possessor NOM.GEN based on DET, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
         <choose>
          <when c="Lene: for sápmi.n.sg.gen samisk.adj">
            <!-- TODO: def-macro set_pre-nom -->
            <test>
            <equal><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj"/></equal></test>
            <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
            <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>
            <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_adj"/>
                  <clip pos="2" side="tl" part="grau"/>
                  <clip pos="2" side="tl" part="gen"/>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="def"/>
                  <clip pos="2" side="tl" part="lemq"/>
                <lit v="$"/>
                <b pos="2"/>
              </concat>
            </let>
          </when>
        <otherwise>
       <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        </otherwise>
        </choose>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>



    <rule comment="C[] REL ADJ
                   -----
                   man mávssolaččat → hvor viktig
                   (comp→pst in this construction)">
      <pattern>
        <pattern-item n="prn.rel"/>
        <pattern-item n="adj-nonord"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="2"/></call-macro>

        <out>
          <b pos="1"/>
          <chunk name="adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <lit-tag v="pst.mf.sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] NUMERAL">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="previous-nhead"/><lit v="NUMERAL"/></let>
      </action>
    </rule>


    <!-- <rules ADJ* GEN GEN+ NOM -->
    <!-- These rules output several chunks, since we put the head noun
         before the string of genitives. -->

    <rule comment="C[] NOM.GEN NOM.GEN NOM
                   -----
                   dáčča skuvlla kopija → kopi av den norske skolen
                   Outputs _two chunks_, head noun first.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- for possessed NOM -->
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <out><b pos="1"/></out>

        <!-- for NOM.GEN NOM.GEN -->
        <!-- TODO: np.top.gen n.gen → n i.pr np.top.gen -->
        <choose><when c="Avoid «Indre Tromsøs kommune»">
          <test><or>
            <in><clip pos="2" side="tl" part="lemh"/><list n="no-gen-after-prop"/></in>
            <in><clip pos="2" side="sl" part="a_sem"/><list n="sem_org"/></in>
            <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></equal> <!-- example? -->
          </or></test>
          <let><clip pos="1" side="tl" part="gen-case"/><lit v=""/></let>
        </when></choose>
        <!-- @N← is used by set_caseprep, and yes it should set it to side="sl", the warning is wrong! -->
        <let><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@N←"/></let>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <choose><when>
          <test>
          <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
          </test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <choose><when>
          <test>
          <equal><clip pos="1" side="sl" part="a_nom"/><lit-tag v="n.acr"/></equal>
          </test>
          <let><var n="defnes"/><lit-tag v="ind"/></let>
        </when></choose>
        <choose>
          <when c="Lene: for sápmi.n.sg.gen samisk.adj">
            <test><equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal></test>
            <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
            <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>
            <let>
              <var n="pre-nom"/>
              <concat>
                <lit v="^"/>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adj"/>
                <clip pos="1" side="tl" part="grau"/>
                <clip pos="1" side="tl" part="gen"/>
                <clip pos="1" side="tl" part="nbr"/>
                <lit-tag v="3"/>
                <clip pos="1" side="tl" part="lemq"/>
                <lit v="$"/>
                <b pos="2"/>
              </concat>
            </let>
          </when>
        <otherwise>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        </otherwise></choose>
        <let><clip pos="2" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.GEN NOM.GEN NOM.GEN NOM
                   -----
                   Sámi soga lávlaga čállin → forfatteren av sangen om Samelands slekt (TODO: Samelands slekt → Samefolket)
                   sámi árvvuid oahpaheami vuođđu → et grunnlag for opplæringen i samens verdier
                   Oarje-Finnmárkku oahpaheddjiid searvvi jahkečoahkkin → som årsmøte til foreningen til Vest-Finnmarks lærere (TODO better)
                   Outputs _two chunks_, head noun first.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- for possessed NOM -->
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="4"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>

        <out><b pos="1"/></out>

        <!-- for third NOM.GEN -->
        <let><clip pos="3" side="tl" part="syn_label"/><lit-tag v="@N←"/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <let><clip pos="3" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <out><b pos="2"/></out>

        <!-- for first and second NOM.GEN -->
        <!-- TODO: np.top.gen n.gen → n i.pr np.top.gen -->
        <let><clip pos="2" side="tl" part="syn_label"/><lit-tag v="@N←"/></let>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>
        <let><clip pos="2" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR NOM.GEN NOM.GEN NOM
                   -----
                   dábálaš dáčča skuvlla kopija → kopi av den vanlige norske skolen
                   Outputs _two chunks_, head noun first.">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- for possessed NOM -->
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="4"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>

        <out><b pos="1"/></out>

        <!-- for ADJ NOM.GEN NOM.GEN -->
        <!-- TODO: np.top.gen n.gen → n i.pr np.top.gen -->
        <let><clip pos="3" side="tl" part="syn_label"/><lit-tag v="@N←"/></let>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>
        <let><clip pos="3" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <!-- <rules VERBS ETC. -->

    <rule comment="C[T]-V lex-orrut-indic vblex.actio.ess" c="lea maid mielde váikkuheamen : er også med å påvirke">
      <pattern>
        <pattern-item n="lex-mielde"/>
        <pattern-item n="vblex.actio.ess"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV.@ADVL"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
			  <lit-tag v="adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            </chunk>
          <b pos="1"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@←ADVL"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="temps"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T]-V lex-orrut-indic vblex.actio.ess cc vblex.actio.ess" c="lea maid mielde váikkuheamen : er også med å påvirke">
      <pattern>
        <pattern-item n="lex-mielde"/>
        <pattern-item n="vblex.actio.ess"/>
        <pattern-item n="cc"/>
        <pattern-item n="vblex.actio.ess"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV.@ADVL"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
			  <lit-tag v="adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            </chunk>
          <b pos="1"/>
          <chunk name="verb" >
            <tags>
              <tag><lit-tag v="SV.@←ADVL"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="temps"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="2"/>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_conj"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="3"/>
          <chunk name="verb">
            <tags>
              <tag><lit-tag v="SV.@ADVL"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_verb"/>
              <clip pos="4" side="tl" part="temps"/>
              <clip pos="4" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[] VERB (tl: VERB, ADV, ADJ, NOUN)
                   See out_verb macro.
                   -----
                   oažžun → fående (adj.pprs, using fallback rule)
                   ii → adv.p3.sg{ikke}
                   Itgo → adv.p2.sg.qst{ikke}">
      <pattern>
        <pattern-item n="vblex"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <call-macro n="out_verb"><with-param pos="1"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] nom.cmp vblex" c="skuvlavázzima → skolegående
                   (should be 'skolegang', but if it's not in bidix, adj.pprs is the best we can do)">
      <pattern>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="vblex"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <let>
          <var n="pre-verb"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_verb"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <!-- <rules: NOM/PRN V.ACTIO NOM -->
    <rule comment="C[] prn.pers.gen vblex.actio nom_head" c="du čállin reivve → brevet som du hadde skrevet
                   The Agent Construction.
TODO! We make several chunks, should be possible to handle in interchunk like
   other relative clauses; perhaps we could make t2x relative chunking rules.
TODO sin geargan áššiin
TODO: should we restrict to V.Actio.Nom/Gen ?">
      <pattern>
        <pattern-item n="prn.pers.gen"/>
        <pattern-item n="vblex.actio"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <out>
          <b pos="1"/>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@OBJ→"/></tag>
              <tag><lit-tag v="acc"/></tag>
            </tags>
            <lu><lit v="som"/><lit-tag v="cnjsub"/></lu>
          </chunk>
          <b/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.@SUBJ→"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="nom"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>

        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <out>
          <b pos="2"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@+FAUXV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pres"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <lit v="ha"/><lit-tag v="vblex.pres"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <let><var n="c_name"/><lit v=""/></let>
        <let><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></let>
        <call-macro n="out_verb"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="C[AT] nom.gen vblex.actio nom_head" c="irggi čállin reivve → brevet som kjæresten hadde skrevet
                   The Agent Construction. See above rule.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="vblex.actio"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <out>
          <b pos="1"/>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@OBJ→"/></tag>
              <tag><lit-tag v="acc"/></tag>
            </tags>
            <lu><lit v="som"/><lit-tag v="cnjsub"/></lu>
          </chunk>
          <b/>
        </out>

        <let><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@SUBJ→"/></let>
        <let><clip pos="1" side="tl" part="case"/><lit-tag v="nom"/></let>
        <let><clip pos="1" side="tl" part="case"/><lit v="nom"/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <out>
          <b pos="2"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@+FAUXV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pres"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <lit v="ha"/><lit-tag v="vblex.pres"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@-FMAINV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pp"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="a_pstv"/>
              <lit-tag v="pp"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <!-- SINGLE CLOSED CLASS WORDS: -->

    <rule comment="C[] conj">
      <pattern>
        <pattern-item n="conj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_part"/><lit-tag v="part"/></equal></test>
            <let><var n="c_name"/><lit v="part"/></let>
          </when>
          <otherwise>
            <let><var n="c_name"/><lit v="conj"/></let>
          </otherwise>
        </choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="a_part"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] adpos">
      <pattern>
        <pattern-item n="adpos"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adpos" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PR"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prep"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] adverb">
      <pattern>
        <pattern-item n="adverb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
          <when c="mo is used as a conj here, not sure why it just gets adv in lexc">
            <test><and>
              <or>
                <equal><clip pos="1" side="sl" part="lemh"/><lit v="mo"/></equal>
                <equal><clip pos="1" side="sl" part="lemh"/><lit v="mot"/></equal>
                <equal><clip pos="1" side="sl" part="lemh"/><lit v="movt"/></equal>
              </or>
              <or>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal>
              </or>
              <equal><clip pos="1" side="tl" part="a_adv"/><lit-tag v="adv"/></equal>
            </and></test>
            <out>
              <chunk name="conj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="@CVP"/></tag>
                  <tag><lit-tag v="cnjsub"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="Since we match on chunk lemma 'adv' in t3x, we have a two-lu chunks
                   here with the single name 'adv' (no postchunking rules for adverbs, so that's OK).">
            <test><equal><clip pos="1" side="sl" part="mode"/><lit-tag v="qst"/></equal></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
                <b/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="Lene: gitta adv - stenge vblex stengt">
            <test><equal><clip pos="1" side="tl" part="a_verb"/><lit-tag v="vblex"/></equal></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <clip pos="1" side="tl" part="temps"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="Lene: adv til cnjsub: movt  som">
            <test><equal><clip pos="1" side="tl" part="a_conj"/><lit-tag v="cnjsub"/></equal></test>
            <out>
              <chunk name="cnjsub" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_conj"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><clip pos="1" side="sl" part="a_sem"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>
    <rule comment="C[] adverb PcleQst" c="guhká go → hvor lenge
                                          Since we match on chunk lemma 'adv' in t3x, even two-lu chunks
                                          here are named 'adv' (no postchunking rules, so that's OK).

TODO: this should be an mwe in the analyser.">
      <pattern>
        <pattern-item n="adverb"/>
        <pattern-item n="PcleQst"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
            <b/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] Pcle" c="ba → engang">
      <pattern>
        <pattern-item n="Pcle"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
        <choose><when>
          <test><equal><var n="c_syn"/><lit v=""/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@PCLE"/></let>
        </when></choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[] ij">
      <pattern>
        <pattern-item n="ij"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
        <out>
          <chunk name="ij" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_ij"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[S] cmp">
      <pattern>
        <pattern-item n="cmp"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_]-T sent">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
      <let>
        <var n="prn_gen"/><lit v="mf"/>
      </let>
        <out>
          <chunk name="sent">
            <tags>
              <tag><lit-tag v="SENT"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

  </section-rules>
</transfer>
