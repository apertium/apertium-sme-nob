<?xml version="1.0" encoding="utf-8"?>

<!--
This is the first pass. Responsibilities of this file include:
* Chunking (all rules)
* Handling part-of-speech changes introduced by bidix.
  * Rules match on source tags, so a sme verb which is specified
    as a nob noun has to be handled by the verb rule
    (this leads to some redundancy, hopefully we'll get a bidix module soon)
* (De-)compounding
  * See rule: NOM.CMP NOM
* inchl-derivation
  * See rule: VERB Der/inchl
* Simple noun phrases
  * Heads and their simple modifiers/specifiers: adj nom, adj adj nom, det adj adj nom, num adj nom
  * See rule: det_mod adj_vblex_attr nom_head
  * See macro: out_nom
* Insert prepositions based on nominal case
  * These get their own chunk; t2x might have to remove them in co-ordination or post-position rules
    or might change them if the verb requires something else
  * See macro: set_caseprep
* Verb auxiliaries
  * Tags from sme verbs are used to output finite verb auxiliaries before the main verb.
    All verbs get their own chunks, as do lemq's (since they can move around noun phrases in t3x)
  * See macro: out_verb



DEF-CAT NAMING SCHEME:
                       lemma-pos.tag.tag_SYNTAG

where the SYNTAG part may have an l or r before or after to signify the arrow
(where l corresponds to ← and r to →);
alternatively the SYNTAG part is something like "mod", "attr" or "head".
And then there are some categories like "month", with all the months.

-->

<transfer default="chunk">
  <section-def-cats>
   <def-cat n="comma">
      <cat-item tags="cm"/>
    </def-cat>
   <def-cat n="sent">
      <cat-item tags="sent.*"/>
      <cat-item tags="sent"/>
    </def-cat>
    <def-cat n="adpos">
      <cat-item tags="adp.*"/>
      <cat-item tags="pr.*"/>
      <cat-item tags="post.*"/>
    </def-cat>
    <def-cat n="postpos">
      <cat-item tags="adp.*"/>
      <cat-item tags="post.*"/>
    </def-cat>
    <def-cat n="rel-adverb">
<cat-item lemma="man" tags="adv.@ADVL→"/>
<cat-item lemma="man" tags="adv.@ADVL-ela→"/>
<cat-item lemma="man" tags="adv.@ADVL-ine→"/>
<cat-item lemma="man" tags="adv.*.@ADVL→"/>
<cat-item lemma="man" tags="adv.*.@ADVL-ela→"/>
<cat-item lemma="man" tags="adv.*.@ADVL-ine→"/>
<cat-item lemma="guđe ládje" tags="adv.*.@ADVL-ine→"/>
    </def-cat>
    <def-cat n="adverb">
      <cat-item tags="adv"/>
      <cat-item tags="adv.*"/>
    </def-cat>
    <def-cat n="Pcle">
      <cat-item tags="pcle.qst.*"/>
      <cat-item tags="pcle.qst"/>
      <cat-item tags="pcle.*"/>
      <cat-item tags="pcle"/>
    </def-cat>
    <def-cat n="ij">
      <cat-item tags="ij.*"/>
      <cat-item tags="ij"/>
    </def-cat>
    <def-cat n="PcleQst">
      <cat-item tags="pcle.qst"/>
      <cat-item tags="pcle.qst.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="adj.*"/>
    </def-cat>
    <def-cat n="adj-sup">
      <cat-item tags="adj.*.sup.*"/>
      <cat-item tags="adj.sup.*"/>
    </def-cat>
    <def-cat n="adj_vblex_attr">
      <cat-item tags="*.adj.*.@→N"/>
      <cat-item tags="adj.*.@→N"/>
      <cat-item tags="adj.*.@→A"/>
      <cat-item tags="adv.@→A"/>
      <cat-item tags="adv.*.@→A"/>
      <cat-item lemma="veaháš" tags="adv.@→N"/>
      <!-- This one will give «til helt lørdag» where we want «helt til lørdag»: -->
      <!-- <cat-item tags="adv.@→N"/> -->
      <!-- <cat-item tags="adv.*.@→N"/> -->
      <cat-item lemma="buorre" tags="adj.*"/>
      <!-- TODO: pstv verbs don't have adj forms, should have transfer
           <exception> if tl pstv -->
      <cat-item tags="vblex.*.prfprc.@→N"/>
      <cat-item tags="vblex.*.prsprc.@→N"/>
      <cat-item tags="vblex.iv.adj.attr.*"/>
      <cat-item tags="vblex.tv.adj.attr.*"/>
    </def-cat>
    <def-cat n="n.sem_time">
      <cat-item tags="n.sem_time.*"/>
      <cat-item tags="n.sem_time_wthr.*"/>
      <cat-item tags="n.sem_measr_time.*"/>
      <cat-item tags="n.sem_ani_hum_time.*"/>
      <cat-item tags="n.sem_ani_time.*"/>
      <cat-item tags="n.sem_measr_obj_time.*"/>
      <cat-item tags="n.sem_body_group_hum_time.*"/>
      <cat-item tags="n.sem_body_time.*"/>
      <cat-item tags="n.sem_event_time.*"/>
      <cat-item tags="n.sem_hum_lang_time.*"/>
      <cat-item tags="n.sem_plc_time.*"/>
    </def-cat>
    <def-cat n="n.sg.loc">
      <cat-item tags="n.*.sg.loc.*"/>
    </def-cat>
    <def-cat n="n.sg.ill">
      <cat-item tags="n.*.sg.ill.*"/>
    </def-cat>
    <def-cat n="num_mod">
<!--      <cat-item tags="num.*.@HNOUN"/>  this one is often sem_year -->
      <cat-item tags="num.*.@→N"/>
      <cat-item tags="num.*.@→A"/>
      <cat-item tags="num.*.@←SUBJ"/>
      <cat-item tags="num.*.@←SUBJext"/>
      <cat-item tags="num.*.@SUBJ→"/>
      <cat-item tags="num.*.@←OBJ"/>
      <cat-item tags="num.*.@OBJ→"/>
      <cat-item tags="num.*.@HNOUN"/> <!-- headliners -->
    </def-cat>
    <def-cat n="num">
      <cat-item tags="num.*"/>
    </def-cat>
    <def-cat n="lquot">
      <cat-item lemma="«" tags="lquot"/>
    </def-cat>
    <def-cat n="rquot">
      <cat-item  lemma="»" tags="rquot"/>
    </def-cat>
    <def-cat n="lpar">
      <cat-item lemma="(" tags="lquot"/>
    </def-cat>
    <def-cat n="rpar">
      <cat-item  lemma=")" tags="rquot"/>
    </def-cat>
    <def-cat n="num-year">
      <cat-item tags="num.sem_year.*"/>
    </def-cat>
    <def-cat n="prn">
      <cat-item tags="prn.*"/>
    </def-cat>
    <def-cat n="prn.rel">
      <cat-item tags="prn.rel.*"/>
    </def-cat>
    <def-cat n="prn.res">
      <cat-item tags="prn.res.*"/>
    </def-cat>
    <def-cat n="prn.ref">
      <cat-item tags="prn.ref.*"/>
    </def-cat>
    <def-cat n="prn.ref_PRONl">
      <cat-item tags="prn.ref.*.@Pron←"/>
    </def-cat>
    <def-cat n="prn.gen.P">
      <cat-item tags="prn.*.gen.*.@P←"/>
      <cat-item tags="prn.*.gen.*.@→P"/>
      <cat-item tags="prn.*.gen.@P←"/>
      <cat-item tags="prn.*.gen.@→P"/>
    </def-cat>
    <def-cat n="prnitg">
      <cat-item tags="prn.itg.*"/>
    </def-cat>
    <def-cat n="prn.pers">
      <cat-item tags="prn.pers.*"/>
    </def-cat>
    <def-cat n="prn.pers.gen">
      <cat-item tags="prn.pers.*.gen.*"/>
    </def-cat>
    <def-cat n="prn.pers.acc">
      <cat-item tags="prn.pers.*.acc.*"/>
    </def-cat>
    <def-cat n="det" c="Pronouns that end up as determiners">
      <cat-item tags="prn.pers.*.gen.*"/>
      <cat-item tags="prn.ref.gen.*"/>
      <cat-item tags="prn.dem.*"/>
      <cat-item tags="prn.ind.*"/>
      <cat-item tags="prn.dem"/>
      <cat-item tags="prn.ind"/>
      <cat-item tags="prn.res"/>
      <cat-item lemma="makkár" tags="prn.itg.*"/>
      <cat-item lemma="vaikko guhte" tags="prn.itg.*"/>
      <cat-item lemma="vaikko goabbá" tags="prn.itg.*"/>
    </def-cat>
    <def-cat n="det_mod_num">
      <cat-item tags="prn.dem.*.@→Num"/>
    </def-cat>
    <def-cat n="det_mod" c="Pronouns that end up as determiners, modifying an adj/noun">
      <cat-item tags="prn.pers.*.gen.@→N"/>
      <cat-item tags="prn.pers.*.gen.@→A"/>
      <cat-item tags="prn.pers.*.gen.*.@→N"/>
      <cat-item tags="prn.pers.*.gen.*.@→A"/>
      <cat-item tags="prn.ref.gen.*.@→N"/>
      <cat-item tags="prn.ref.gen.*.@→A"/>
      <cat-item tags="prn.ref.gen.@→N"/>
      <cat-item tags="prn.ref.gen.@→A"/>
      <cat-item tags="prn.dem.*.@→N"/>
      <cat-item tags="prn.dem.*.@→A"/>
      <cat-item tags="prn.ind.*.@→N"/>
      <cat-item tags="prn.ind.*.@→A"/>
      <cat-item tags="prn.itg.*.@→N"/>
      <cat-item tags="prn.itg.*.@→A"/>
      <cat-item tags="prn.ind.@→N"/>
      <cat-item tags="prn.ind.@→A"/>
      <cat-item lemma="makkár" tags="prn.itg.*.@→N"/>
      <cat-item lemma="makkár" tags="prn.itg.*.@→A"/>
      <cat-item lemma="ieš" tags="prn.ref.*.nom.*.@→N"/>
    </def-cat>
    <def-cat n="cmp" c="Words only seen as compund parts">
      <cat-item tags="cmp.*"/>
      <cat-item tags="cmp_sh.*"/>
      <cat-item tags="cmp"/>
      <cat-item tags="cmp_sh"/>
    </def-cat>
    <def-cat n="adj.cmp">
      <cat-item tags="adj.*.cmp"/>
      <cat-item tags="adj.*.cmp.*"/>
    </def-cat>
    <def-cat n="nom.cmp">
      <cat-item tags="n.cmp"/>
      <cat-item tags="n.cmp.*"/>
      <cat-item tags="n.*.cmp"/>
      <cat-item tags="n.*.cmp.*"/>
      <cat-item tags="np.*.cmp"/>
      <cat-item tags="np.*.cmp.*"/>
      <cat-item tags="np.cmp.*"/>
    </def-cat>
    <def-cat n="nom-adj.cmp">
      <cat-item tags="adj.*.cmp"/>
      <cat-item tags="adj.*.cmp.*"/>
      <cat-item tags="n.cmp"/>
      <cat-item tags="n.cmp.*"/>
      <cat-item tags="n.*.cmp"/>
      <cat-item tags="n.*.cmp.*"/>
      <cat-item tags="np.*.cmp"/>
      <cat-item tags="np.*.cmp.*"/>
      <cat-item tags="np.cmp.*"/>
    </def-cat>
    <def-cat n="nom_head" c="Head nom's are sent to out_nom, thus we can have Verb derivatives here.">
      <cat-item tags="vblex.*.n.*"/>
      <!-- <cat-item tags="n.*"/> We don't want to catch cmp's with this! -->
      <cat-item tags="n.cmp_splitr.*"/>
      <cat-item tags="n.*.cmp_splitr.*"/>
      <cat-item tags="n.*.cmp_splitr"/>
      <cat-item tags="n.pl"/>
      <cat-item tags="n.pl.*"/>
      <cat-item tags="n.sg"/>
      <cat-item tags="n.sg.*"/>
      <cat-item tags="n.ess.*"/>
      <cat-item tags="n.*.pl"/>
      <cat-item tags="n.*.pl.*"/>
      <cat-item tags="n.*.sg"/>
      <cat-item tags="n.*.sg.*"/>
      <cat-item tags="n.*.ess.*"/>
      <cat-item tags="n.*.ess"/>
      <cat-item tags="n.abbr"/>
      <cat-item tags="n.*.abbr"/>
      <cat-item tags="n.*.abbr.*"/>
      <cat-item tags="n.abbr.*"/>
      <cat-item tags="np"/>
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nom_all" c="In case nom_head doesn't catch all non-compounds, use this for the single-word rule.">
      <cat-item tags="vblex.*.*.n.*"/>
      <cat-item tags="vblex.*.*.n"/>
      <cat-item tags="n.*"/>
      <cat-item tags="n"/>
      <cat-item tags="np.*"/>
      <cat-item tags="np"/>
      <cat-item tags="abbr.*"/>
      <cat-item tags="abbr"/>
    </def-cat>
    <def-cat n="nom_rP" c="Head nom before a postposition, sent to out_nom">
      <cat-item tags="vblex.*.*.n.*.@→P"/>
      <cat-item tags="n.*.@→P"/>
      <cat-item tags="np.*.@→P"/>
      <cat-item tags="abbr.*.@→P"/>
    </def-cat>
    <def-cat n="nom.gen">
      <cat-item tags="n.*.gen.@→Num"/>
      <cat-item tags="n.*.gen.@→N"/>
      <cat-item tags="n.*.gen.@-FSUBJ→"/>
      <cat-item tags="np.*.gen.@→N"/>
      <cat-item tags="np.*.gen.@-FSUBJ→"/>
      <cat-item tags="n.*.gen.*.@→N"/>
      <cat-item tags="n.*.gen.*.@-FSUBJ→"/>
      <cat-item tags="np.*.@→A"/>
      <cat-item tags="np.*.gen.*.@-FSUBJ→"/>
    </def-cat>
    <def-cat n="nom.unprop.gen">
      <cat-item tags="n.*.gen.*"/>
    </def-cat>
    <def-cat n="nom.gen_NUMl">
      <cat-item tags="n.*.gen.@Num←"/>
      <cat-item tags="n.*.gen.*.@Num←"/>
      <cat-item tags="np.*.gen.@Num←"/>
      <cat-item tags="num.*.gen.@Num←"/>
    </def-cat>
    <def-cat n="nom.prop.antcog_mod">
      <cat-item tags="np.ant.f.*.@→N"/>
      <cat-item tags="np.ant.m.*.@→N"/>
      <cat-item tags="np.cog.attr.@→N"/>
      <cat-item tags="n.abbr.*.@→N"/>
    </def-cat>
    <def-cat n="nom.prop.antcog">
      <cat-item tags="np.ant.f.*"/>
      <cat-item tags="np.ant.m.*"/>
      <cat-item tags="np.cog.*"/>
    </def-cat>
    <def-cat n="nom.prop">
      <cat-item tags="np.*"/>
    </def-cat>
    <def-cat n="nom.prop_mod">
      <cat-item tags="np.*.attr.*"/>
      <cat-item tags="np.*.@→N"/>
    </def-cat>
    <def-cat n="nom.prop.gen">
      <cat-item tags="np.*.gen"/>
      <cat-item tags="np.*.gen.*"/>
    </def-cat>
    <def-cat n="nom.prop_attr-gen">
      <cat-item tags="np.*.attr.*"/>
      <cat-item tags="n.*.@→N"/>
      <cat-item tags="np.*.@→N"/>
      <cat-item lemma="gonagas" tags="n.*"/>
      <cat-item lemma="dronnet" tags="n.*"/>
      <cat-item lemma="prinsa" tags="n.*"/>
      <cat-item lemma="ruvdnaprinsa" tags="n.*"/>
      <cat-item lemma="prinseassa" tags="n.*"/>
      <cat-item lemma="ruvdnaprinseassa" tags="n.*"/>
      <cat-item tags="np.*.gen.*"/>
    </def-cat>
    <def-cat n="nom.prop_attr">
      <cat-item tags="np.*.attr.*"/>
      <cat-item tags="n.*.@→N"/>
      <cat-item tags="np.*.@→N"/>
      <cat-item lemma="gonagas" tags="n.*"/>
      <cat-item lemma="dronnet" tags="n.*"/>
      <cat-item lemma="prinsa" tags="n.*"/>
      <cat-item lemma="ruvdnaprinsa" tags="n.*"/>
      <cat-item lemma="prinseassa" tags="n.*"/>
      <cat-item lemma="ruvdnaprinseassa" tags="n.*"/>
    </def-cat>
    <def-cat n="vblex">
      <cat-item tags="vblex.*"/>
    </def-cat>
    <def-cat n="vblex_abess">
      <cat-item tags="vblex.*.vabess.*"/>
    </def-cat>
    <def-cat n="vblex_ger">
      <cat-item tags="vblex.*.ger.*"/>
    </def-cat>
    <def-cat n="vblex.IFAUXV">
      <cat-item tags="vblex.*.@-FAUXV"/>
    </def-cat>
    <def-cat n="vblex.actio">
      <cat-item tags="vblex.*.actio.*"/>
    </def-cat>
    <def-cat n="vblex.actio.ess">
      <cat-item tags="vblex.*.actio.ess.*"/>
    </def-cat>
    <def-cat n="lex-state.actio.ess">
      <cat-item lemma="vuordit" tags="vblex.*.actio.ess.*"/>
      <cat-item lemma="oađđit" tags="vblex.*.actio.ess.*"/>
      <cat-item lemma="boahtit" tags="vblex.*.actio.ess.*"/>
      <cat-item lemma="hálddašit" tags="vblex.*.actio.ess.*"/>
      <cat-item lemma="govddodit" tags="vblex.*.actio.ess.*"/>
      <cat-item lemma="fuotnut" tags="vblex.*.actio.ess.*"/>
    </def-cat>
    <def-cat n="cc">
      <cat-item tags="cnjcoo.*"/>
    </def-cat>
    <def-cat n="conj">
      <cat-item tags="cnjcoo"/>
      <cat-item tags="cnjsub"/>
      <cat-item tags="cnjcoo.*"/>
      <cat-item tags="cnjsub.*"/>
    </def-cat>
    <def-cat n="time-noun">
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagimánnu" tags="n.*"/>
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="njukčamánnu" tags="n.*"/>
      <cat-item lemma="cuoŋománnu" tags="n.*"/>
      <cat-item lemma="miessemánnu" tags="n.*"/>
      <cat-item lemma="geassemánnu" tags="n.*"/>
      <cat-item lemma="suoidnemánnu" tags="n.*"/>
      <cat-item lemma="borgemánnu" tags="n.*"/>
      <cat-item lemma="čakčamánnu" tags="n.*"/>
      <cat-item lemma="golggotmánnu" tags="n.*"/>
      <cat-item lemma="skábmamánnu" tags="n.*"/>
      <cat-item lemma="juovlamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagemánnu" tags="n.*"/>

      <cat-item lemma="giđđa" tags="n.*"/>
      <cat-item lemma="geassi" tags="n.*"/>
      <cat-item lemma="dálvi" tags="n.*"/>
      <cat-item lemma="čakča" tags="n.*"/>
      <cat-item lemma="jahki" tags="n.*"/>
      <cat-item lemma="vahkku" tags="n.*"/>
      <cat-item lemma="vahkuloahppa" tags="n.*"/>
      <cat-item lemma="vahkkoloahppa" tags="n.*"/>
      <cat-item lemma="beaivi" tags="n.*"/>
      <cat-item lemma="diibmu" tags="n.*"/>
      <cat-item lemma="tiibmu" tags="n.*"/>
      <cat-item lemma="tiibma" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-álgu-loahppa">
      <cat-item lemma="álgu" tags="n.*"/>
      <cat-item lemma="loahppa" tags="n.*"/>
      <cat-item lemma="beallemuddu" tags="n.*"/>
    </def-cat>
    <def-cat n="abbr">
      <cat-item tags="n.abbr.*"/>
    </def-cat>
    <def-cat n="lex-gaskasaš">
      <cat-item lemma="gaskasaš" tags="adj.*"/>
    </def-cat>
    <def-cat n="lex-sápmelaš">
      <cat-item lemma="sápmelaš" tags="n.*"/>
      <cat-item lemma="sápmi" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-gáidat">
      <cat-item lemma="gáidat" tags="vblex.iv.prfprc.*"/>
      <cat-item lemma="gáidat" tags="vblex.iv.actio.*"/>
      <cat-item lemma="gáidat" tags="vblex.iv.der_nomact.*"/>
    </def-cat>
    <def-cat n="lex-mannu">
      <cat-item lemma="mánnu" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-galle">
      <cat-item lemma="galle" tags="prn.*"/>
    </def-cat>
    <def-cat n="month">
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagimánnu" tags="n.*"/>
      <cat-item lemma="guovvamánnu" tags="n.*"/>
      <cat-item lemma="njukčamánnu" tags="n.*"/>
      <cat-item lemma="cuoŋománnu" tags="n.*"/>
      <cat-item lemma="miessemánnu" tags="n.*"/>
      <cat-item lemma="geassemánnu" tags="n.*"/>
      <cat-item lemma="suoidnemánnu" tags="n.*"/>
      <cat-item lemma="borgemánnu" tags="n.*"/>
      <cat-item lemma="čakčamánnu" tags="n.*"/>
      <cat-item lemma="golggotmánnu" tags="n.*"/>
      <cat-item lemma="skábmamánnu" tags="n.*"/>
      <cat-item lemma="juovlamánnu" tags="n.*"/>
      <cat-item lemma="ođđajagemánnu" tags="n.*"/>
    </def-cat>
    <def-cat n="season">
      <cat-item lemma="giđđa" tags="n.*"/>
      <cat-item lemma="geassi" tags="n.*"/>
      <cat-item lemma="dálvi" tags="n.*"/>
      <cat-item lemma="čakča" tags="n.*"/>
      <cat-item lemma="čakčat" tags="adv.*"/>
      <cat-item lemma="giđđat" tags="adv.*"/>
      <cat-item lemma="geassit" tags="adv.*"/>
      <cat-item lemma="geasset" tags="adv.*"/>
      <cat-item lemma="dálvit" tags="adv.*"/>
      <cat-item lemma="dálvet" tags="adv.*"/>
    </def-cat>
    <def-cat n="num.cmp">
      <cat-item tags="num.cmp"/>
      <cat-item tags="num.cmp.*"/>
      <cat-item tags="num.*.cmp"/>
      <cat-item tags="num.*.cmp.*"/>
      <cat-item tags="num.cmp_splitr"/>
      <cat-item tags="num.cmp_splitr.*"/>
      <cat-item tags="num.*.cmp_splitr"/>
      <cat-item tags="num.*.cmp_splitr.*"/>
    </def-cat>
    <def-cat n="lex-beali">
      <cat-item lemma="beali" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-dievva">
      <cat-item lemma="dievva" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-unnit">
      <cat-item lemma="unnit" tags="adv.*"/>
      <cat-item lemma="unni" tags="adj.*"/>
    </def-cat>
    <def-cat n="lex-eanet">
      <cat-item lemma="eanet" tags="adv.*"/>
      <cat-item lemma="eanet" tags="adj.*"/>
    </def-cat>
    <def-cat n="lex-guovttos">
      <cat-item lemma="guovttos" tags="n.*.coll.*"/>
      <cat-item lemma="guovttos" tags="n.coll.*"/>
      <cat-item lemma="guovttis" tags="n.*.coll.*"/>
      <cat-item lemma="guovttis" tags="n.coll.*"/>
    </def-cat>
    <def-cat n="lex-guovttos-gen">
      <cat-item lemma="guovttos" tags="n.*.coll.*.gen.*"/>
      <cat-item lemma="guovttos" tags="n.coll.*.gen.*"/>
      <cat-item lemma="guovttis" tags="n.*.coll.*.gen.*"/>
      <cat-item lemma="guovttis" tags="n.coll.*.gen.*"/>
    </def-cat>
    <def-cat n="lex-heahti-loc">
      <cat-item lemma="heahti" tags="n.*.sg.loc.*"/>
    </def-cat>
    <def-cat n="lex-diibmá">
      <cat-item lemma="diibmá" tags="adv.*"/>
      <cat-item lemma="diimmá" tags="adj.*"/>
    </def-cat>
    <def-cat n="lex-diibmá-compl">
      <cat-item tags="post.*"/>
      <cat-item lemma="rájes" tags="adv.*"/>
      <cat-item lemma="rádjai" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-muitu-ess">
      <cat-item lemma="muitu" tags="n.*.ess.*"/>
    </def-cat>
    <def-cat n="lex-birra">
      <cat-item lemma="birra" tags="post.*"/>
    </def-cat>
    <def-cat n="bealde-modyfier">
      <cat-item  tags="*.@→P"/>
    </def-cat>
    <def-cat n="lex-bealde">
      <cat-item lemma="bealde" tags="adv.*"/>
      <cat-item lemma="bealde" tags="post.*"/>
      <cat-item lemma="bealde" tags="pr.*"/>
      <cat-item lemma="bealli" tags="n.*"/>
      <cat-item lemma="beallai" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-láhkai">
      <cat-item lemma="láhkai" tags="post.*"/>
      <cat-item lemma="láhkai" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-hum">
      <cat-item tags="n.sem_hum.*"/>
      <cat-item tags="n.*.sem_hum.*"/>
    </def-cat>
    <def-cat n="hum_gen">
      <cat-item tags="n.sem_hum.cmp_sggen.*"/>
      <cat-item tags="n.*.sem_hum.sg.gen.*"/>
      <cat-item tags="n.sem_hum.sg.gen.*"/>
      <cat-item tags="n.*.sem_hum-prof.sg.gen.*"/>
      <cat-item tags="n.sem_hum-prof.sg.gen.*"/>
    </def-cat>
    <def-cat n="lex-gealdagas_loc">
      <cat-item lemma="gealdagas" tags="n.*.sg.loc.*"/>
    </def-cat>
    <def-cat n="lex-Finnmarksløpet"> <!-- to be extended -->
      <cat-item lemma="finnmarksløpet" tags="np.*"/>
      <cat-item lemma="Finnmarksløpet" tags="np.*"/>
      <cat-item lemma="riddu" tags="np.*"/>
    </def-cat>
    <def-cat n="nom-nom">
      <cat-item tags="np.*.nom.*"/>
      <cat-item tags="n.*.nom.*"/>
    </def-cat>
    <def-cat n="clean_noun">
      <cat-item tags="n.*.sg.loc.*"/>
      <cat-item tags="n.*.sg.ill.*"/>
      <cat-item tags="n.*.sg.acc.*"/>
      <cat-item tags="n.*.sg.com.*"/>
    </def-cat>
    <def-cat n="np-nom">
      <cat-item tags="np.*.nom.*"/>
    </def-cat>
    <def-cat n="lex-latnja">
      <cat-item lemma="latnja" tags="n.*"/>
      <cat-item lemma="čoahkkinlatnja" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-gilvu">
      <cat-item lemma="gilvu" tags="n.*"/>
      <cat-item lemma="beanagilvu" tags="n.*"/>
      <cat-item tags="n.*"/>
    </def-cat>
    <def-cat n="lex-sadjai">
      <cat-item lemma="sadji" tags="n.*.sg.ill.*"/>
      <cat-item lemma="sadji" tags="n.sg.ill.*"/>
    </def-cat>
    <def-cat n="lex-siden">
      <cat-item lemma="áigi" tags="n.*"/>
      <cat-item lemma="dassái" tags="adv.*"/>
      <cat-item lemma="ovdal" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-rájes">
      <cat-item lemma="rájes" tags="adv.*"/>
      <cat-item lemma="rájes" tags="po.*"/>
    </def-cat>
    <def-cat n="lex-lohkka">
      <cat-item lemma="lohkka" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-uksa">
      <cat-item lemma="uksa" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-duohken">
      <cat-item lemma="duohken" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-jahki_mod">
      <cat-item lemma="dát" tags="prn.dem.*"/>
      <cat-item lemma="mannat" tags="vblex.iv.prfprc.@→N"/>
    </def-cat>
    <def-cat n="lex-dat-sgloc">
      <cat-item lemma="dát" tags="prn.dem.sg.loc.*"/>
      <cat-item lemma="dat" tags="prn.dem.sg.loc.*"/>
    </def-cat>
    <def-cat n="lex-vaikko">
      <cat-item lemma="vaikko" tags="adv.*"/>
      <cat-item lemma="vaikke" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-vaikko-pluss">
      <cat-item lemma="mii" tags="prn.ind.*"/>
      <cat-item lemma="gii" tags="prn.ind.*"/>
      <cat-item lemma="gos" tags="adv.*"/>
      <cat-item lemma="gosa" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-das-adv">
      <cat-item lemma="dás" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-jahki">
      <cat-item lemma="jahki" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-leat">
      <cat-item lemma="leat" tags="vblex.*"/>
    </def-cat>
    <def-cat n="lex-leat.cond">
      <cat-item lemma="leat" tags="vblex.*.cond.*"/>
      <cat-item lemma="leat" tags="vblex.*.cond-ville.*"/>
      <cat-item lemma="leat" tags="vblex.*.cond-skulle.*"/>
      <cat-item lemma="leat" tags="vblex.*.cond-kunne.*"/>
    </def-cat>

    <def-cat n="lex-minuhtta-loc">
      <cat-item lemma="minuhtta" tags="n.*.loc.*"/>
      <cat-item lemma="diibmu" tags="n.*.loc.*"/>
      <cat-item lemma="beaivi" tags="n.*.loc.*"/>
      <cat-item lemma="jahki" tags="n.*.loc.*"/>
      <cat-item lemma="áigi" tags="n.*.loc.*"/>
    </def-cat>
    <def-cat n="lex-minuhtta-ill">
      <cat-item lemma="minuhtta" tags="n.*.ill.*"/>
      <cat-item lemma="diibmu" tags="n.*.ill.*"/>
      <cat-item lemma="beaivi" tags="n.*.ill.*"/>
      <cat-item lemma="jahki" tags="n.*.ill.*"/>
      <cat-item lemma="áigi" tags="n.*.ill.*"/>
    </def-cat>

    <def-cat n="lex-nubbin">
      <cat-item lemma="nubbi" tags="adj.ord.ess.@←SPRED"/>
      <cat-item lemma="nubbi" tags="adj.ord.ess.@SPRED→"/>
    </def-cat>
    <def-cat n="lex-nubbi">
      <cat-item lemma="nubbi" tags="adj.ord.*.@→N"/>
    </def-cat>
    <def-cat n="lex-jođiheaddji">
      <cat-item lemma="jođiheaddji" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-vel">
      <cat-item lemma="vel" tags="adv.*"/>
      <cat-item lemma="vel" tags="adv"/>
    </def-cat>
    <def-cat n="lex-guhku">
      <cat-item lemma="guhku" tags="post.*"/>
      <cat-item lemma="alu" tags="post.*"/>
      <cat-item lemma="govddu" tags="post.*"/>
      <cat-item lemma="losu" tags="post.*"/>
      <cat-item lemma="čieŋu" tags="post.*"/>
      <cat-item lemma="asu" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-lassin">
      <cat-item lemma="lassin" tags="n.*"/>
      <cat-item lemma="*lássin" tags=""/> <!-- common typo -->
    </def-cat>
    <def-cat n="lex-arvvus">
      <cat-item lemma="árvu" tags="n.sg.loc"/>
      <cat-item lemma="árvu" tags="n.sg.loc.*"/>
      <cat-item lemma="árvu" tags="n.*.sg.loc"/>
      <cat-item lemma="árvu" tags="n.*.sg.loc.*"/>
    </def-cat>
    <def-cat n="lex-orrut-indic">
      <cat-item lemma="orrut" tags="vblex.*.indic.*"/>
      <cat-item lemma="orrot" tags="vblex.*.indic.*"/>
    </def-cat>
    <def-cat n="lex-lohki">
      <cat-item lemma="lohki" tags="n.*"/>
    </def-cat>
    <def-cat n="lex-bures">
      <cat-item lemma="bures" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-boahtit">
      <cat-item lemma="boahtit" tags="vblex.iv.der_nomact.*"/>
      <cat-item lemma="boahtit" tags="vblex.iv.prfprc.*"/>
    </def-cat>
    <def-cat n="lex-adnojuvvon">
      <cat-item lemma="atnit" tags="vblex.tv.der_passl.vblex.iv.prfprc"/>
      <cat-item lemma="atnit" tags="vblex.tv.der_passl.vblex.iv.prfprc.*"/>
    </def-cat>
    <def-cat n="lex-buresboahtin">
      <cat-item lemma="buresboahtin" tags="n.*"/>
      <cat-item lemma="Buresboahtin" tags="n.*"/> <!-- big init letter so it'll match first word of sentence too -->
    </def-cat>
    <def-cat n="lex-diibmu">
      <cat-item lemma="diibmu" tags="n.*"/>
      <cat-item lemma="dii" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-das-her">
      <cat-item lemma="dát" tags="prn.dem.sg.loc.@ADVL→"/> <!-- dát -->
      <cat-item lemma="dát" tags="prn.dem.sg.loc.@ADVL-ela→"/> <!-- dát -->
      <cat-item lemma="dát" tags="prn.dem.sg.loc.@ADVL-ine→"/> <!-- dát -->
      <cat-item lemma="dat" tags="prn.dem.sg.loc.@ADVL→"/> <!-- dát -->
      <cat-item lemma="dat" tags="prn.dem.sg.loc.@ADVL-ela→"/> <!-- dát -->
      <cat-item lemma="dat" tags="prn.dem.sg.loc.@ADVL-ine→"/> <!-- dát -->
    </def-cat>
    <def-cat n="lex-mannan">
      <cat-item lemma="mannat" tags="vblex.iv.prfprc.@→N"/>
    </def-cat>
    <def-cat n="lex-dan">
      <cat-item lemma="dat" tags="prn.dem.sg.*"/>
      <cat-item lemma="Dat" tags="prn.dem.sg.*"/>
    </def-cat>
    <def-cat n="lex-sivas">
      <cat-item lemma="sivva" tags="n.*.sg.loc.*"/>
      <cat-item lemma="sivva" tags="n.sg.loc.*"/>
    </def-cat>
    <def-cat n="lex-ektui">
      <cat-item lemma="ektui" tags="post"/>
      <cat-item lemma="ektui" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-riekti">
      <cat-item lemma="riekti" tags="n.*.@→P"/>
    </def-cat>
    <def-cat n="lex-mielde-post">
      <cat-item lemma="mielde" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-mielde">
      <cat-item lemma="mielde" tags="adv"/>
      <cat-item lemma="mielde" tags="adv.*"/>
    </def-cat>
    <def-cat n="lex-dáfus">
      <cat-item lemma="dáfus" tags="post"/>
      <cat-item lemma="dáfus" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-máŋga">
      <cat-item lemma="máŋga" tags="num"/>
      <cat-item lemma="máŋga" tags="num.*"/>
    </def-cat>
    <def-cat n="lex-go">
      <cat-item lemma="go" tags="cnjsub.*"/>
      <cat-item lemma="go" tags="cnjsub"/>
    </def-cat>
    <def-cat n="lex-botta">
      <cat-item lemma="bodda" tags="n.*.sg.gen.*"/>
      <cat-item lemma="bodda" tags="n.*.sg.acc.*"/>
      <cat-item lemma="bodda" tags="n.sg.gen.*"/>
      <cat-item lemma="bodda" tags="n.*.sg.gen.*"/>
      <cat-item lemma="bodda" tags="n.sg.acc.*"/>
      <cat-item lemma="bodda" tags="n.*.sg.acc.*"/>
    </def-cat>
    <def-cat n="lex-guvlui">
      <cat-item lemma="guvlui" tags="post.*"/>
    </def-cat>
    <def-cat n="lex-guhte">
      <cat-item lemma="guhte" tags="prn.*"/>
    </def-cat>
    <def-cat n="lex-bivdit">
      <cat-item lemma="bivdit" tags="vblex.*"/>
    </def-cat>
    <def-cat n="lex-veahkki">
      <cat-item lemma="veahkki" tags="n.*"/>
    </def-cat>
    <def-cat n="ord_num"> <!-- robust solution for dates -->
      <cat-item tags="num.arab.*"/>
      <cat-item tags="adj.ord.*"/>
      <cat-item tags="adj.ord"/>
    </def-cat>
    <def-cat n="ord">
      <cat-item tags="adj.ord.*"/>
      <cat-item tags="adj.ord"/>
    </def-cat>
    <def-cat n="adj-nonord">
      <cat-item tags="adj.sg.*"/>
      <cat-item tags="adj.pl.*"/>
      <cat-item tags="adj.*.sg.*"/>
      <cat-item tags="adj.*.pl.*"/>
    </def-cat>
    <def-cat n="lex-beaivi">
      <cat-item lemma="beaivi" tags="n.*"/>
      <cat-item lemma="b" tags="abbr.*"/>
      <cat-item lemma="b" tags="n.abbr.*"/>
      <cat-item lemma="b" tags="n.*.abbr.*"/>
      <cat-item lemma="b" tags="adv.abbr.*"/>
    </def-cat>
    <def-cat n="lex-times_adv">
      <cat-item lemma="oktii" tags="adv.*"/>
      <cat-item lemma="guktii" tags="adv.*"/>
      <cat-item lemma="golbmii" tags="adv.*"/>
      <cat-item lemma="njelljii" tags="adv.*"/>
      <cat-item lemma="vihttii" tags="adv.*"/>
      <cat-item lemma="guhttii" tags="adv.*"/>
      <cat-item lemma="čihččii" tags="adv.*"/>
    </def-cat>
    <def-cat n="measr">
      <cat-item tags="n.sem_measr.*"/>
      <cat-item tags="n.sem_measr_obj_time.*"/>
      <cat-item tags="n.sem_measr_sign.*"/>
      <cat-item tags="n.sem_measr_time.*"/>
    </def-cat>
    <def-cat n="ij-adj">
      <cat-item lemma="buorre" tags="adj.sg.*"/>
      <cat-item lemma="buorre" tags="adj.pl.*"/>
      <cat-item lemma="ilolaš" tags="adj.sg.*"/>
      <cat-item lemma="ilolaš" tags="adj.attr.*"/>
      <cat-item lemma="buorre" tags="adj.*.sg.*"/>
      <cat-item lemma="buorre" tags="adj.*.pl.*"/>
      <cat-item lemma="buorre" tags="adj.*.attr.*"/>
      <cat-item lemma="buorre" tags="adj.attr.*"/>
      <cat-item lemma="ilolaš" tags="adj.*.sg.*"/>
      <cat-item lemma="ilolaš" tags="adj.*.attr.*"/>
    </def-cat>
    <def-cat n="ij-adj2">
      <cat-item lemma="ođas" tags="adj.attr.*"/>
      <cat-item lemma="ođas" tags="adj.*.attr.*"/>
    </def-cat>
    <def-cat n="ij-nom">
      <cat-item lemma="beaivi" tags="n.sg.*"/>
      <cat-item lemma="beaivi" tags="n.*.sg.*"/>
      <cat-item lemma="eahket" tags="n.sg.*"/>
      <cat-item lemma="eahket" tags="n.*.sg.*"/>
      <cat-item lemma="idja" tags="n.sg.*"/>
      <cat-item lemma="idja" tags="n.*.sg.*"/>
      <cat-item lemma="iđit" tags="n.sg.*"/>
      <cat-item lemma="iđit" tags="n.*.sg.*"/>
      <cat-item lemma="vahkkoloahppa" tags="n.*.sg.*"/>
      <cat-item lemma="vahkuloahppa" tags="n.*.sg.*"/>
      <cat-item lemma="juovllat" tags="n.pl.*"/>
      <cat-item lemma="juovllat" tags="n.*.pl.*"/>
      <cat-item lemma="jahki" tags="n.sg.*"/>
      <cat-item lemma="jahki" tags="n.*.sg.*"/>
    </def-cat>
    <def-cat n="prn-nonreferential">
      <!-- Turns to nt.sg in Norwegian if used as lone pron, although it may be pl in sme. -->
      <!-- See Nickel p.128–129, http://giellatekno.uit.no/oahpa/pronomen.nno.html#Ubestemte+pronomen -->
      <cat-item lemma="mihkke" tags="prn.*"/>
      <cat-item lemma="giige" tags="prn.*"/>
      <cat-item lemma="guhtege" tags="prn.*"/>
      <cat-item lemma="goabbáge" tags="prn.*"/>
      <cat-item lemma="guhtemušge" tags="prn.*"/>
      <cat-item lemma="makkárge" tags="prn.*"/>
      <cat-item lemma="oktage" tags="prn.*"/>
      <cat-item lemma="okta" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="mihkke" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="gii" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="guhte" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="guhte" tags="prn.ind.attr.foc_neg-ge.*"/>
      <cat-item lemma="goabbá" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="goabbá" tags="prn.ind.attr.foc_neg-ge.*"/>
      <cat-item lemma="guhtemuš" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="makkár" tags="prn.ind.sg.*.foc_neg-ge.*"/>
      <cat-item lemma="makkár" tags="prn.ind.attr.foc_neg-ge.*"/>
    </def-cat>

     <def-cat n="neg-verb">
      <cat-item tags="vblex.iv.neg.*"/>
    </def-cat>


  </section-def-cats>
  <section-def-attrs>
    <def-attr n="a_der">
      <attr-item tags="der_halla"/>
      <attr-item tags="der_inchl"/>
      <attr-item tags="der_dimin"/>
      <attr-item tags="der_nomact"/>
      <attr-item tags="der_nomag"/>
      <attr-item tags="der_muš"/>
      <attr-item tags="der_sasj"/>
      <attr-item tags="der_caus"/>
      <attr-item tags="der_h"/>
      <attr-item tags="der_d"/>
      <attr-item tags="der_st"/>
      <attr-item tags="der_l"/>
      <attr-item tags="der_vuota"/>
    </def-attr>
    <def-attr n="a_der_v2n">
      <attr-item tags="der_nomact"/>
      <attr-item tags="der_nomag"/>
      <attr-item tags="der_muš"/>
    </def-attr>
    <def-attr n="a_sintagma">
      <attr-item tags="SN"/>
      <attr-item tags="SV"/>
      <attr-item tags="SA"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="v"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="a_ger">
      <attr-item tags="ger"/>
    </def-attr>
    <def-attr n="a_pstv">
      <attr-item tags="pstv"/>
    </def-attr>
    <def-attr n="a_lemq">
      <attr-item tags="lemq-obj"/>
    </def-attr>
    <def-attr n="a_attr">
      <attr-item tags="attr"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
      <attr-item tags="adj.sint"/>
      <attr-item tags="adj.sint.pp"/>
      <attr-item tags="adj.sint.pprs"/>
    </def-attr>
    <def-attr n="a_adj-pure">
      <attr-item tags="adj"/>
      <attr-item tags="adj.sint"/>
    </def-attr>
    <def-attr n="a_adv">
      <attr-item tags="adv"/>
      <attr-item tags="cnjcoo"/>
    </def-attr>
    <def-attr n="a_adv_pr_cnjcoo_cnjsub">
      <attr-item tags="adv"/>
      <attr-item tags="cnjcoo"/>
      <attr-item tags="cnjsub"/>
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="a_adv_pr_cnjcoo">
      <attr-item tags="adv"/>
      <attr-item tags="cnjcoo"/>
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="a_ij">
      <attr-item tags="ij"/>
      <attr-item tags="ij"/>
    </def-attr>
    <def-attr n="a_prep">
      <attr-item tags="post"/>
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="prop_type">
      <attr-item tags="top"/>
      <attr-item tags="cog"/>
      <attr-item tags="ant"/>
      <attr-item tags="org"/>
    </def-attr>
    <def-attr n="a_num">
      <attr-item tags="num"/>
      <attr-item tags="det.qnt"/>
    </def-attr>
    <def-attr n="a_cmp">
      <attr-item tags="cmp"/>
      <attr-item tags="guio"/>
      <attr-item tags="cmp.guio"/>
      <attr-item tags="cmp_hyph.cmp"/>
      <attr-item tags="cmp_splitr"/>
    </def-attr>
    <def-attr n="a_cmp_nbrcas">
      <attr-item tags="cmp_plgen"/>
      <attr-item tags="cmp_plnom"/>
      <attr-item tags="cmp_sggen"/>
      <attr-item tags="cmp_sgnom"/>
    </def-attr>
    <def-attr n="a_prn">
      <attr-item tags="prn"/>
      <attr-item tags="prn.rel"/>
      <attr-item tags="prn.res"/>
      <attr-item tags="prn.ind"/>
      <attr-item tags="prn.dem"/>
      <attr-item tags="prn.pers"/>
      <attr-item tags="prn"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.ref"/>
    </def-attr>
    <def-attr n="a_det">
      <attr-item tags="det"/>
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="lettercase">
      <attr-item tags="fixedcase"/>
    </def-attr>
    <def-attr n="a_conj">
      <attr-item tags="cnjcoo"/>
      <attr-item tags="cnjcoo.clb"/>
      <attr-item tags="cnjsub"/>
    </def-attr>
    <def-attr n="a_count">
      <attr-item tags="coll"/>
      <attr-item tags="unc"/>
    </def-attr>
    <def-attr n="a_nom_all">
      <attr-item tags="abbr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.sem_org"/>
      <attr-item tags="np.ant.m"/>
      <attr-item tags="np.ant.f"/>
      <attr-item tags="np.sem_ani"/>
      <attr-item tags="np.attr"/>
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="n"/>
      <attr-item tags="n.acr"/>
      <attr-item tags="np"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.attr"/>
      <attr-item tags="np.cog"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np.org"/>
      <attr-item tags="np.ant"/>
    </def-attr>
    <def-attr n="a_rel">
      <attr-item tags="rel"/>
      <attr-item tags="ref"/>
      <attr-item tags="res" c="Reciprocal"/>
    </def-attr>
    <def-attr n="a_abess">
      <attr-item tags="vabess"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pasv"/>
    </def-attr>
    <def-attr n="animacy">
      <attr-item tags="agreem-pro"/>
      <attr-item tags="pers-pro"/>
      <attr-item tags="pers"/>
      <attr-item tags="incongr-pro"/>
    </def-attr>
    <def-attr n="trans">
      <attr-item tags="tv"/>
      <attr-item tags="iv"/>
    </def-attr>
    <def-attr n="a_actio">                                       <!--TODO: what's the category name?-->
      <attr-item tags="actio.ess"/>
      <attr-item tags="actio.loc"/>
      <attr-item tags="actio.nom"/>
      <attr-item tags="actio.ess.not"/>
    </def-attr>
    <def-attr n="a_caus">                                      <!--TODO: what's the category name?-->
      <attr-item tags="caus"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="gen-case">
      <attr-item tags="gen"/>
    </def-attr>
    <def-attr n="pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="ord.pst"/>
      <attr-item tags="ord.comp"/>
      <attr-item tags="ord.sup"/>
      <attr-item tags="comp"/>
      <attr-item tags="pst"/>
      <attr-item tags="sup"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="un"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
      <attr-item tags="GD_pers"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="sp"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
      <attr-item tags="DD"/>
    </def-attr>
    <def-attr n="fintemps">
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="imp"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="inf"/>
      <attr-item tags="imp"/>
      <attr-item tags="prfprc"/>
      <attr-item tags="pp"/>
      <attr-item tags="TD"/>
    </def-attr>
    <def-attr n="neg">
      <attr-item tags="conneg"/>
      <attr-item tags="neg"/>
    </def-attr>
    <def-attr n="mode">
      <attr-item tags="qst"/>
    </def-attr>
    <def-attr n="a_acr">
      <attr-item tags="acr"/>
    </def-attr>
    <def-attr n="ext">
      <attr-item tags="←ext→"/>
    </def-attr>
    <def-attr n="a_part">
      <attr-item tags="part"/>
    </def-attr>
    <def-attr n="modality">
      <attr-item tags="indic"/>
      <attr-item tags="cond"/>
      <attr-item tags="cond-ville"/>
      <attr-item tags="cond-skulle"/>
      <attr-item tags="cond-kunne"/>
      <attr-item tags="pot"/>
    </def-attr>
    <def-attr n="a_foc">
      <attr-item tags="foc_pos-ge"/>
      <attr-item tags="foc_neg-ge"/>
      <attr-item tags="foc_naj"/>
    </def-attr>
    <def-attr n="hab">
      <attr-item tags="←hab→"/>
    </def-attr>
    <def-attr n="syn_label">
      <attr-item tags="@→A"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@←ADVL-ela"/>
      <attr-item tags="@←ADVL-ine"/>
      <attr-item tags="@→ADVL"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@ADVL←"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@ADVL-ela→"/>
      <attr-item tags="@ADVL-ine→"/>
      <attr-item tags="@ADVLcs-ela→"/>
      <attr-item tags="@ADVLcs-ine→"/>
      <attr-item tags="@ADVLqst-ela→"/>
      <attr-item tags="@ADVLqst-ine→"/>
      <attr-item tags="@ADVLhab→"/>
      <attr-item tags="@←ADVLhab"/>
      <attr-item tags="@←SUBJext"/>
      <attr-item tags="@ADVL→CS"/>
      <attr-item tags="@ADVL←OBJ"/>
      <attr-item tags="@ADVL→SUBJ"/>
      <attr-item tags="@APP"/>
      <attr-item tags="@APP-ADVL←"/>
      <attr-item tags="@APP-N←"/>
      <attr-item tags="@APP-Num←"/>
      <attr-item tags="@APP-Pron←"/>
      <attr-item tags="@APP→Pron"/>
      <attr-item tags="@→CC"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@COMP-CS←"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@-F←ADVL"/>
      <attr-item tags="@-F←ADVL-ine"/>
      <attr-item tags="@-F←ADVL-ela"/>
      <attr-item tags="@-FADVL"/>
      <attr-item tags="@-FADVL→"/>
      <attr-item tags="@-FADVL-ine→"/>
      <attr-item tags="@-FADVL-ela→"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@+FAUXV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@+FMAINV"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@-FOBJ"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OPRED"/>
      <attr-item tags="@-FOPRED→"/>
      <attr-item tags="@-F←SPRED"/>
      <attr-item tags="@-FSPRED→"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@N"/>
      <attr-item tags="@N←"/>
      <attr-item tags="@→Num;"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@OBJ→"/>
      <attr-item tags="@OBJ→SPRED"/>
      <attr-item tags="@-OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@OPRED"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@←PPRED"/>
      <attr-item tags="@PPRED"/>
      <attr-item tags="@→Pron"/>
      <attr-item tags="@Pron←"/>
      <attr-item tags="@-SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@SPRED"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@SPRED←OBJ"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SUBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@SUBJ←ADVL"/>
      <attr-item tags="@SUBJ←OBJ"/>
      <attr-item tags="@VOC"/>
      <attr-item tags="@X"/>
    </def-attr>
    <def-attr n="a_sem">
      <attr-item tags="sem_act_fruit"/>
      <attr-item tags="sem_ani_group_prod-vis"/>
      <attr-item tags="sem_body-abstr_feat-cogn"/>
      <attr-item tags="sem_body_plc-elevate"/>
      <attr-item tags="sem_build-part_cat"/>
      <attr-item tags="sem_build-part_cat_ctain"/>
      <attr-item tags="sem_build-part_cat_ctain_mat"/>
      <attr-item tags="sem_build-part_ctain"/>
      <attr-item tags="sem_build-part_ctain_mat"/>
      <attr-item tags="sem_build-part_ctain_obj"/>
      <attr-item tags="sem_clth-jewl_curr_obj"/>
      <attr-item tags="sem_clth-jewl_curr_obj_org"/>
      <attr-item tags="sem_clth-jewl_fruit"/>
      <attr-item tags="sem_clth_obj-clo"/>
      <attr-item tags="sem_edu_geom"/>
      <attr-item tags="sem_feat-phys_plc"/>
      <attr-item tags="sem_group_prod-vis"/>
      <attr-item tags="sem_hum-prof"/>
      <attr-item tags="sem_hum_mat_tool"/>
      <attr-item tags="sem_hum_tool-it"/>
      <attr-item tags="sem_obj_symbol"/>
      <attr-item tags="sem_act"/>
      <attr-item tags="sem_act_group"/>
      <attr-item tags="sem_act_plc"/>
      <attr-item tags="sem_act_route"/>
      <attr-item tags="sem_act_tool-it"/>
      <attr-item tags="sem_adr"/>
      <attr-item tags="sem_amount"/>
      <attr-item tags="sem_amount_build"/>
      <attr-item tags="sem_amount_semcon"/>
      <attr-item tags="sem_ani"/>
      <attr-item tags="sem_ani-fish"/>
      <attr-item tags="sem_ani_body-abstr_hum"/>
      <attr-item tags="sem_ani_build"/>
      <attr-item tags="sem_ani_build-part"/>
      <attr-item tags="sem_ani_build_hum_txt"/>
      <attr-item tags="sem_ani_group"/>
      <attr-item tags="sem_ani_group_hum"/>
      <attr-item tags="sem_ani_hum"/>
      <attr-item tags="sem_ani_hum_plc"/>
      <attr-item tags="sem_ani_hum_time"/>
      <attr-item tags="sem_ani_plc"/>
      <attr-item tags="sem_ani_plc_txt"/>
      <attr-item tags="sem_ani_time"/>
      <attr-item tags="sem_ani_veh"/>
      <attr-item tags="sem_aniprod"/>
      <attr-item tags="sem_aniprod_hum"/>
      <attr-item tags="sem_aniprod_obj-clo"/>
      <attr-item tags="sem_aniprod_perc-phys"/>
      <attr-item tags="sem_aniprod_plc"/>
      <attr-item tags="sem_aniprod_plc_route"/>
      <attr-item tags="sem_body"/>
      <attr-item tags="sem_body-abstr"/>
      <attr-item tags="sem_body-abstr_prod-audio_semcon"/>
      <attr-item tags="sem_body_body-abstr"/>
      <attr-item tags="sem_body_clth"/>
      <attr-item tags="sem_body_food"/>
      <attr-item tags="sem_body_group_hum"/>
      <attr-item tags="sem_body_group_hum_time"/>
      <attr-item tags="sem_body_hum"/>
      <attr-item tags="sem_body_mat"/>
      <attr-item tags="sem_body_measr"/>
      <attr-item tags="sem_body_obj_tool-catch"/>
      <attr-item tags="sem_body_plc"/>
      <attr-item tags="sem_body_time"/>
      <attr-item tags="sem_build"/>
      <attr-item tags="sem_build-part"/>
      <attr-item tags="sem_build-part_plc"/>
      <attr-item tags="sem_build_build-part"/>
      <attr-item tags="sem_build_clth-part"/>
      <attr-item tags="sem_build_edu_org"/>
      <attr-item tags="sem_build_event_org"/>
      <attr-item tags="sem_build_obj"/>
      <attr-item tags="sem_build_org"/>
      <attr-item tags="sem_build_route"/>
      <attr-item tags="sem_cat"/>
      <attr-item tags="sem_cat_group_hum"/>
      <attr-item tags="sem_cat_group_hum_plc"/>
      <attr-item tags="sem_clth"/>
      <attr-item tags="sem_clth-jewl"/>
      <attr-item tags="sem_clth-jewl_curr"/>
      <attr-item tags="sem_clth-jewl_money"/>
      <attr-item tags="sem_clth-jewl_org"/>
      <attr-item tags="sem_clth-jewl_plant"/>
      <attr-item tags="sem_clth-part"/>
      <attr-item tags="sem_clth_hum"/>
      <attr-item tags="sem_ctain"/>
      <attr-item tags="sem_ctain-abstr"/>
      <attr-item tags="sem_ctain-abstr_org"/>
      <attr-item tags="sem_ctain-clth"/>
      <attr-item tags="sem_ctain-clth_plant"/>
      <attr-item tags="sem_ctain-clth_veh"/>
      <attr-item tags="sem_ctain_feat-phys"/>
      <attr-item tags="sem_ctain_furn"/>
      <attr-item tags="sem_ctain_plc"/>
      <attr-item tags="sem_ctain_tool"/>
      <attr-item tags="sem_ctain_tool-measr"/>
      <attr-item tags="sem_curr"/>
      <attr-item tags="sem_curr_org"/>
      <attr-item tags="sem_dance"/>
      <attr-item tags="sem_dance_org"/>
      <attr-item tags="sem_dance_prod-audio"/>
      <attr-item tags="sem_date"/>
      <attr-item tags="sem_dir"/>
      <attr-item tags="sem_domain"/>
      <attr-item tags="sem_domain_food-med"/>
      <attr-item tags="sem_domain_hum"/>
      <attr-item tags="sem_domain_prod-audio"/>
      <attr-item tags="sem_drink"/>
      <attr-item tags="sem_drink_plant"/>
      <attr-item tags="sem_dummytag"/>
      <attr-item tags="sem_edu"/>
      <attr-item tags="sem_edu_event"/>
      <attr-item tags="sem_edu_group_hum"/>
      <attr-item tags="sem_edu_hum"/>
      <attr-item tags="sem_edu_mat"/>
      <attr-item tags="sem_edu_org"/>
      <attr-item tags="sem_event"/>
      <attr-item tags="sem_event_food"/>
      <attr-item tags="sem_event_hum"/>
      <attr-item tags="sem_event_plc"/>
      <attr-item tags="sem_event_plc-elevate"/>
      <attr-item tags="sem_event_time"/>
      <attr-item tags="sem_feat"/>
      <attr-item tags="sem_feat-measr"/>
      <attr-item tags="sem_feat-measr_plc"/>
      <attr-item tags="sem_feat-phys"/>
      <attr-item tags="sem_feat-phys_tool-write"/>
      <attr-item tags="sem_feat-phys_veh"/>
      <attr-item tags="sem_feat-phys_wthr"/>
      <attr-item tags="sem_feat-psych"/>
      <attr-item tags="sem_feat-psych_hum"/>
      <attr-item tags="sem_feat_plant"/>
      <attr-item tags="sem_fem"/>
      <attr-item tags="sem_food"/>
      <attr-item tags="sem_food-med"/>
      <attr-item tags="sem_food_perc-phys"/>
      <attr-item tags="sem_food_plant"/>
      <attr-item tags="sem_fruit"/>
      <attr-item tags="sem_fruit_hum"/>
      <attr-item tags="sem_furn"/>
      <attr-item tags="sem_game"/>
      <attr-item tags="sem_game_obj-play"/>
      <attr-item tags="sem_geom"/>
      <attr-item tags="sem_geom_hum_plc"/>
      <attr-item tags="sem_geom_obj"/>
      <attr-item tags="sem_group"/>
      <attr-item tags="sem_group_hum"/>
      <attr-item tags="sem_group_hum_org"/>
      <attr-item tags="sem_group_hum_plc"/>
      <attr-item tags="sem_group_hum_prod-vis"/>
      <attr-item tags="sem_group_org"/>
      <attr-item tags="sem_group_sign"/>
      <attr-item tags="sem_group_txt"/>
      <attr-item tags="sem_hum"/>
      <attr-item tags="sem_hum-prof"/>
      <attr-item tags="sem_hum-abstr"/>
      <attr-item tags="sem_hum_lang"/>
      <attr-item tags="sem_hum_lang_plc"/>
      <attr-item tags="sem_hum_lang_time"/>
      <attr-item tags="sem_hum_obj"/>
      <attr-item tags="sem_hum_org"/>
      <attr-item tags="sem_hum_plant"/>
      <attr-item tags="sem_hum_plc"/>
      <attr-item tags="sem_hum_sign"/>
      <attr-item tags="sem_hum_tool"/>
      <attr-item tags="sem_hum_veh"/>
      <attr-item tags="sem_hum_wthr"/>
      <attr-item tags="sem_ideol"/>
      <attr-item tags="sem_lang"/>
      <attr-item tags="sem_lang_tool"/>
      <attr-item tags="sem_mal"/>
      <attr-item tags="sem_mat"/>
      <attr-item tags="sem_mat_plant"/>
      <attr-item tags="sem_mat_txt"/>
      <attr-item tags="sem_measr"/>
      <attr-item tags="sem_measr_obj_time"/>
      <attr-item tags="sem_measr_sign"/>
      <attr-item tags="sem_measr_time"/>
      <attr-item tags="sem_money"/>
      <attr-item tags="sem_money_obj"/>
      <attr-item tags="sem_money_org"/>
      <attr-item tags="sem_money_part"/>
      <attr-item tags="sem_money_txt"/>
      <attr-item tags="sem_obj"/>
      <attr-item tags="sem_obj-clo"/>
      <attr-item tags="sem_obj-cogn"/>
      <attr-item tags="sem_obj-el"/>
      <attr-item tags="sem_obj-ling"/>
      <attr-item tags="sem_obj-play"/>
      <attr-item tags="sem_obj-play_sport"/>
      <attr-item tags="sem_obj-rope"/>
      <attr-item tags="sem_obj-surfc"/>
      <attr-item tags="sem_obj_semcon"/>
      <attr-item tags="sem_obj_sign"/>
      <attr-item tags="sem_obj_state"/>
      <attr-item tags="sem_obj_veh"/>
      <attr-item tags="sem_org"/>
      <attr-item tags="sem_org_prod-cogn"/>
      <attr-item tags="sem_org_rule"/>
      <attr-item tags="sem_org_txt"/>
      <attr-item tags="sem_org_veh"/>
      <attr-item tags="sem_part"/>
      <attr-item tags="sem_part_prod-cogn"/>
      <attr-item tags="sem_part_substnc"/>
      <attr-item tags="sem_perc-cogn"/>
      <attr-item tags="sem_perc-emo"/>
      <attr-item tags="sem_perc-emo_wthr"/>
      <attr-item tags="sem_perc-phys"/>
      <attr-item tags="sem_perc-psych"/>
      <attr-item tags="sem_phonenr"/>
      <attr-item tags="sem_plant"/>
      <attr-item tags="sem_plant-part"/>
      <attr-item tags="sem_plant_plant-part"/>
      <attr-item tags="sem_plant_tool"/>
      <attr-item tags="sem_plant_tool-measr"/>
      <attr-item tags="sem_plc"/>
      <attr-item tags="sem_plc-abstr"/>
      <attr-item tags="sem_plc-abstr_rel_state"/>
      <attr-item tags="sem_plc-abstr_route"/>
      <attr-item tags="sem_plc-elevate"/>
      <attr-item tags="sem_plc-line"/>
      <attr-item tags="sem_plc-water"/>
      <attr-item tags="sem_plc_pos"/>
      <attr-item tags="sem_plc_route"/>
      <attr-item tags="sem_plc_semcon"/>
      <attr-item tags="sem_plc_state"/>
      <attr-item tags="sem_plc_substnc"/>
      <attr-item tags="sem_plc_substnc_wthr"/>
      <attr-item tags="sem_plc_time"/>
      <attr-item tags="sem_plc_time_wthr"/>
      <attr-item tags="sem_plc_tool-catch"/>
      <attr-item tags="sem_plc_wthr"/>
      <attr-item tags="sem_pos"/>
      <attr-item tags="sem_process"/>
      <attr-item tags="sem_prod"/>
      <attr-item tags="sem_prod-audio"/>
      <attr-item tags="sem_prod-audio_txt"/>
      <attr-item tags="sem_prod-cogn"/>
      <attr-item tags="sem_prod-cogn_txt"/>
      <attr-item tags="sem_prod-ling"/>
      <attr-item tags="sem_prod-vis"/>
      <attr-item tags="sem_rel"/>
      <attr-item tags="sem_route"/>
      <attr-item tags="sem_rule"/>
      <attr-item tags="sem_semcon"/>
      <attr-item tags="sem_semcon_txt"/>
      <attr-item tags="sem_sign"/>
      <attr-item tags="sem_sport"/>
      <attr-item tags="sem_state"/>
      <attr-item tags="sem_state-sick"/>
      <attr-item tags="sem_state-sick_substnc"/>
      <attr-item tags="sem_substnc"/>
      <attr-item tags="sem_substnc_wthr"/>
      <attr-item tags="sem_sur"/>
      <attr-item tags="sem_symbol"/>
      <attr-item tags="sem_time"/>
      <attr-item tags="sem_time_wthr"/>
      <attr-item tags="sem_tool"/>
      <attr-item tags="sem_tool-catch"/>
      <attr-item tags="sem_tool-clean"/>
      <attr-item tags="sem_tool-it"/>
      <attr-item tags="sem_tool-measr"/>
      <attr-item tags="sem_tool-music"/>
      <attr-item tags="sem_tool-write"/>
      <attr-item tags="sem_txt"/>
      <attr-item tags="sem_veh"/>
      <attr-item tags="sem_wpn"/>
      <attr-item tags="sem_wthr"/>
      <attr-item tags="sem_year"/>
      <attr-item tags="top"/>
      <attr-item tags="cog"/>
      <attr-item tags="ant"/>
    </def-attr>
    <def-attr n="a_neverdet">
      <attr-item tags="neverdet"/>
    </def-attr>
    <def-attr n="a_maydetind">
      <attr-item tags="maydetind"/>
    </def-attr>
  </section-def-attrs>

  <section-def-vars>
    <def-var n="esubj"           c="tell t3x that this verb takes existential subject (sometimes)
                                    and we may have to insert a formal subject:
                                    «Det(f-subj) står et glass (e-subj) på bordet»"/>
    <def-var n="adv_lem"           c="adverb lemma"/>
    <def-var n="n_lem"           c="noun lemma"/>
    <def-var n="v_lem"           c="verb lemma"/>
    <def-var n="n_nbr"           c="noun number"/>
    <def-var n="seen_num"        c="num if seen a num?"/>
    <def-var n="adj_gen"         c="adj gender"/>
    <def-var n="prn_gen"         c="pronoun gender"/>
    <def-var n="prn_nbr"         c="pronoun number"/>
    <def-var n="prn_pers"        c="pronoun person (esp. for reflexive)"/>
    <def-var n="pre-nom"         c="lu's before nom-lu in nominal chunk"/>
    <def-var n="post-nom"        c="lu's after nom-lu in nominal chunk (only used in 'den som V cmp')"/>
    <def-var n="pre-verb"        c="lu's before verb-lu in verbal chunk (only compounds for now)"/>
    <def-var n="post-verb"        c="lu's after verb-lu in verb abessive chunk "/>
    <def-var n="defnes"          c="definiteness (noun, adj)"/>
    <def-var n="c_name"          c="chunk name"/>
    <def-var n="c_neverdet"      c="tell t4x never to output a determiner if this is set to something"/>
    <def-var n="tmp"             c="temporary variable"/>
    <def-var n="notactioess"             c="notactioess"/>
    <def-var n="blank"           c="for removing blanks"/>
    <def-var n="c_gen"           c="chunk gender"/>
    <def-var n="c_nbr"           c="chunk number"/>
    <def-var n="c_def_pos"       c="chunk defnes tag position"/>
    <def-var n="c_syn"           c="chunk syn_label"/>
    <def-var n="c_animacy"       c="chunk animacy (pers, impers)"/>
    <def-var n="uc_lemh"         c="the lemh, uppercased"/>
    <def-var n="caseFirstWord"   c="has typographic case of first word; is 'init' if it's the first word of a sentence" v="Init"/>
    <def-var n="caseprep"        c="nob preposition (whole chunk) based on sme case"/>
    <def-var n="caseprep_c_name" c="chunk name for the caseprep chunk"/>
    <def-var n="caseprep-verb"   c="nob preposition (whole chunk) based on sme case, used as tag on the verb chunk"/>
    <def-var n="previous-nhead"  c="lemh of the previous NP chunk (or special values like NUM)" v=""/>
    <def-var n="previous-nhead_sem"  c="sem of the previous NP chunk" v=""/>
    <def-var n="previous-obj"  c="lemh of the previous obj" />
    <def-var n="main-verb-pasv"    c="sme pasv of the previous main verb" />
    <def-var n="advl-verb-sl"    c="sme lemh of the previous advl verb" />
    <def-var n="main-verb-sl"    c="sme lemh of the previous main verb" />
    <def-var n="main-verb-tl"    c="nob lemh of the previous main verb" />
    <def-var n="aux-verb-sl"     c="sme lemh of the previous aux verb" />
    <def-var n="aux-verb-tl"     c="nob lemh of the previous aux verb" />
    <def-var n="vfin-pers"     c="vfin-pers" />
    <def-var n="vfin-nbr"     c="vfin-nbr" />
    <def-var n="vfin-temps"     c="vfin-temps" />
    <def-var n="syn-temps"     c="syn-temps" />
    <def-var n="foc-word"     c="foc-word" />
  </section-def-vars>

  <section-def-lists>
    <def-list n="no.actio.ess">
      <list-item v="vuordit"/>
      <list-item v="boahtit"/>
      <list-item v="oađđit"/>
      <list-item v="hálddašit"/>
      <list-item v="govddodit"/>
      <list-item v="fuotnut"/>
    </def-list>
    <def-list n="cond-NIL-verbs">
      <list-item v="fertet"/>
      <list-item v="berret"/>
      <list-item v="galgat"/>
      <list-item v="soaitit"/>
      <list-item v="veadjit"/>
      <list-item v="dáidit"/>
      <list-item v="máhttit"/>
      <list-item v="áigut"/>
      <list-item v="sáhttit"/>
    </def-list>
    <def-list n="esubj-verbs">
<!--      <list-item v="leat"/>  -->
      <list-item v="mannat"/>
      <list-item v="šaddat"/>
      <list-item v="boahtit"/>
    </def-list>
   <def-list n="weather-verbs">
    <list-item v="bievlat"/>
    <list-item v="ránodit"/>
    <list-item v="soaiggáhallat"/>
    <list-item v="biekkastit"/>
    <list-item v="bivaldit"/>
    <list-item v="borgat"/>
    <list-item v="boŋkit"/>
    <list-item v="bulžut"/>
    <list-item v="buolaštit"/>
    <list-item v="golihit"/>
    <list-item v="firtet"/>
    <list-item v="galbmit"/>
    <list-item v="jiellat"/>
    <list-item v="joavgat"/>
    <list-item v="muohttit"/>
    <list-item v="sevnnjodit"/>
    <list-item v="veiggodit"/>
    <list-item v="vuoisat"/>
    <list-item v="álddagastit"/>
    <list-item v="čuorpmastit"/>
    <list-item v="čuvggodit"/>
    <list-item v="šlahttit"/>
    <list-item v="liehmudit"/>
    <list-item v="čoskkiidit"/>
    <list-item v="savdadit"/>
    <list-item v="oaktut"/>
    <list-item v="hieibmat"/>
    <list-item v="golket"/>
    <list-item v="storbmet"/>
    <list-item v="bajánastit"/>
    <list-item v="manihit"/>
    <list-item v="bonjahit"/>
    <list-item v="balvet"/>
    <list-item v="dálvat"/>
    <list-item v="arvit"/>
    <list-item v="bieggat"/>
    <list-item v="bávkit"/>
    <list-item v="spoahkkit"/>
    <list-item v="bávkkihit"/>
    <list-item v="bieggaladdat"/>
    <list-item v="biekkadit"/>
   </def-list>
    <def-list n="pers_nouns">
      <list-item v="jente"/>
      <list-item v="gutt"/>
      <list-item v="mann"/>
      <list-item v="kvinne"/>
      <list-item v="dame"/>
      <list-item v="leder"/>
      <list-item v="student"/>
      <list-item v="elev"/>
      <list-item v="lærer"/>
    </def-list>
    <def-list n="pers_genders">
      <list-item v="&lt;m&gt;"/>
      <list-item v="&lt;f&gt;"/>
      <list-item v="&lt;mf&gt;"/>
      <list-item v="&lt;GD_pers&gt;"/>
    </def-list>
    <def-list n="adj-genders" c="possible nob adj genders">
      <list-item v="&lt;m&gt;"/>
      <list-item v="&lt;mf&gt;"/>
      <list-item v="&lt;f&gt;"/>
      <list-item v="&lt;nt&gt;"/>
      <list-item v="&lt;un&gt;"/>
    </def-list>
    <def-list n="infinite_temps">
      <list-item v="&lt;inf&gt;"/>
      <list-item v="&lt;prfprc&gt;"/>
      <list-item v="&lt;pp&gt;"/>
    </def-list>

    <def-list n="sem_food">
      <list-item v="&lt;sem_body_food&gt;"/>
      <list-item v="&lt;sem_domain_food-med&gt;"/>
      <list-item v="&lt;sem_event_food&gt;"/>
      <list-item v="&lt;sem_food&gt;"/>
      <list-item v="&lt;sem_food-med&gt;"/>
      <list-item v="&lt;sem_food_perc-phys&gt;"/>
      <list-item v="&lt;sem_food_plant&gt;"/>
    </def-list>

    <def-list n="sem_time">
      <list-item v="&lt;sem_ani_hum_time&gt;"/>
      <list-item v="&lt;sem_ani_time&gt;"/>
      <list-item v="&lt;sem_body_group_hum_time&gt;"/>
      <list-item v="&lt;sem_body_time&gt;"/>
      <list-item v="&lt;sem_event_time&gt;"/>
      <list-item v="&lt;sem_hum_lang_time&gt;"/>
      <list-item v="&lt;sem_measr_time&gt;"/>
      <list-item v="&lt;sem_measr_obj_time&gt;"/>
      <list-item v="&lt;sem_plc_time&gt;"/>
      <list-item v="&lt;sem_time&gt;"/>
      <list-item v="&lt;sem_time_wthr&gt;"/>
    </def-list>
    <def-list n="sem_prod-ling">
      <list-item v="&lt;sem_prod-ling&gt;"/>
    </def-list>
    <def-list n="sem_lang">
      <list-item v="&lt;sem_hum_lang&gt;"/>
      <list-item v="&lt;sem_hum_lang_plc&gt;"/>
      <list-item v="&lt;sem_hum_lang_time&gt;"/>
      <list-item v="&lt;sem_lang&gt;"/>
      <list-item v="&lt;sem_lang_tool&gt;"/>
    </def-list>
    <def-list n="sem_lang_lem">
      <list-item v="samisk"/>
      <list-item v="norsk"/>
      <list-item v="finsk"/>
      <list-item v="nordsamisk"/>
      <list-item v="sørsamisk"/>
      <list-item v="lulesamisk"/>
      <list-item v="enaresamisk"/>
    </def-list>


    <def-list n="sem_domain">
      <list-item v="&lt;sem_domain&gt;"/>
      <list-item v="&lt;sem_domain_food-med&gt;"/>
      <list-item v="&lt;sem_domain_hum&gt;"/>
      <list-item v="&lt;sem_domain_prod-audio&gt;"/>
    </def-list>
    <def-list n="sem_prod-cogn">
      <list-item v="&lt;sem_org_prod-cogn&gt;"/>
      <list-item v="&lt;sem_part_prod-cogn&gt;"/>
      <list-item v="&lt;sem_prod-cogn&gt;"/>
      <list-item v="&lt;sem_prod-cogn_txt&gt;"/>
    </def-list>


    <def-list n="sem_mat">
      <list-item v="&lt;sem_body_mat&gt;"/>
      <list-item v="&lt;sem_edu_mat&gt;"/>
      <list-item v="&lt;sem_mat&gt;"/>
      <list-item v="&lt;sem_mat_plant&gt;"/>
      <list-item v="&lt;sem_mat_txt&gt;"/>
      <list-item v="&lt;sem_build-part_cat_ctain_matt&gt;"/>
      <list-item v="&lt;sem_build-part_ctain_matt&gt;"/>
      <list-item v="&lt;sem_hum_mat_toolt&gt;"/>
    </def-list>
    <def-list n="sem_prod-audio">
      <list-item v="&lt;sem_prod-audio_txt&gt;"/>
      <list-item v="&lt;sem_prod-audio&gt;"/>
    </def-list>
    <def-list n="sem_txt">
      <list-item v="&lt;sem_ani_build_hum_txt&gt;"/>
      <list-item v="&lt;sem_ani_plc_txt&gt;"/>
      <list-item v="&lt;sem_group_txt&gt;"/>
      <list-item v="&lt;sem_mat_txt&gt;"/>
      <list-item v="&lt;sem_money_txt&gt;"/>
      <list-item v="&lt;sem_org_txt&gt;"/>
      <list-item v="&lt;sem_prod-audio_txt&gt;"/>
      <list-item v="&lt;sem_prod-cogn_txt&gt;"/>
      <list-item v="&lt;sem_semcon_txt&gt;"/>
      <list-item v="&lt;sem_txt&gt;"/>
    </def-list>
    <def-list n="sem_body">
      <list-item v="&lt;sem_ani_body-abstr_hum&gt;"/>
      <list-item v="&lt;sem_body&gt;"/>
      <list-item v="&lt;sem_body-abstr&gt;"/>
      <list-item v="&lt;sem_body-abstr_prod-audio_semcon&gt;"/>
      <list-item v="&lt;sem_body_body-abstr&gt;"/>
      <list-item v="&lt;sem_body_clth&gt;"/>
      <list-item v="&lt;sem_body_food&gt;"/>
      <list-item v="&lt;sem_body_group_hum&gt;"/>
      <list-item v="&lt;sem_body_group_hum_time&gt;"/>
      <list-item v="&lt;sem_body_hum&gt;"/>
      <list-item v="&lt;sem_body_mat&gt;"/>
      <list-item v="&lt;sem_body_measr&gt;"/>
      <list-item v="&lt;sem_body_obj_tool-catch&gt;"/>
      <list-item v="&lt;sem_body_plc&gt;"/>
      <list-item v="&lt;sem_body_time&gt;"/>
      <list-item v="&lt;sem_body_plc-elevate&gt;"/>
    </def-list>
    <def-list n="sem_veh">
      <list-item v="&lt;sem_ani_veh&gt;"/>
      <list-item v="&lt;sem_ctain-clth_veh&gt;"/>
      <list-item v="&lt;sem_feat-phys_veh&gt;"/>
      <list-item v="&lt;sem_hum_veh&gt;"/>
      <list-item v="&lt;sem_obj_veh&gt;"/>
      <list-item v="&lt;sem_org_veh&gt;"/>
      <list-item v="&lt;sem_prod-sem_org_veh&gt;"/>
      <list-item v="&lt;sem_veh&gt;"/>
    </def-list>
    <def-list n="sem_group">
      <list-item v="&lt;sem_act_group&gt;"/>
      <list-item v="&lt;sem_ani_group&gt;"/>
      <list-item v="&lt;sem_ani_group_hum&gt;"/>
      <list-item v="&lt;sem_body_group_hum&gt;"/>
      <list-item v="&lt;sem_body_group_hum_time&gt;"/>
      <list-item v="&lt;sem_cat_group_hum&gt;"/>
      <list-item v="&lt;sem_cat_group_hum_plc&gt;"/>
      <list-item v="&lt;sem_edu_group_hum&gt;"/>
      <list-item v="&lt;sem_group&gt;"/>
      <list-item v="&lt;sem_group_hum&gt;"/>
      <list-item v="&lt;sem_group_hum_org&gt;"/>
      <list-item v="&lt;sem_group_hum_plc&gt;"/>
      <list-item v="&lt;sem_group_hum_prod-vis&gt;"/>
      <list-item v="&lt;sem_group_org&gt;"/>
      <list-item v="&lt;sem_group_sign&gt;"/>
      <list-item v="&lt;sem_group_txt&gt;"/>
      <list-item v="&lt;sem_ani_group_prod-vis&gt;"/>
      <list-item v="&lt;sem_group_prod-vis&gt;"/>
    </def-list>
    <def-list n="sem_pos">
      <list-item v="&lt;sem_plc_pos&gt;"/>
      <list-item v="&lt;sem_pos&gt;"/>
    </def-list>
    <def-list n="sem_state">
      <list-item v="&lt;sem_obj_state&gt;"/>
      <list-item v="&lt;sem_plc-abstr_rel_state&gt;"/>
      <list-item v="&lt;sem_plc_state&gt;"/>
      <list-item v="&lt;sem_state&gt;"/>
      <list-item v="&lt;sem_state-sick&gt;"/>
      <list-item v="&lt;sem_state-sick_substnc&gt;"/>
    </def-list>
    <def-list n="sem_plc">
      <list-item v="&lt;sem_act_plc&gt;"/>
      <list-item v="&lt;sem_ani_hum_plc&gt;"/>
      <list-item v="&lt;sem_ani_plc&gt;"/>
      <list-item v="&lt;sem_ani_plc_txt&gt;"/>
      <list-item v="&lt;sem_aniprod_plc&gt;"/>
      <list-item v="&lt;sem_aniprod_plc_route&gt;"/>
      <list-item v="&lt;sem_body_plc&gt;"/>
      <list-item v="&lt;sem_build-part_plc&gt;"/>
      <list-item v="&lt;sem_ctain_plc&gt;"/>
      <list-item v="&lt;sem_event_plc&gt;"/>
      <list-item v="&lt;sem_event_plc-elevate&gt;"/>
      <list-item v="&lt;sem_feat-measr_plc&gt;"/>
      <list-item v="&lt;sem_geom_hum_plc&gt;"/>
      <list-item v="&lt;sem_group_hum_plc&gt;"/>
      <list-item v="&lt;sem_hum_lang_plc&gt;"/>
      <list-item v="&lt;sem_hum_plc&gt;"/>
      <list-item v="&lt;sem_plc&gt;"/>
      <list-item v="&lt;sem_plc-abstr&gt;"/>
      <list-item v="&lt;sem_plc-abstr_rel_state&gt;"/>
      <list-item v="&lt;sem_plc-abstr_route&gt;"/>
      <list-item v="&lt;sem_plc-elevate&gt;"/>
      <list-item v="&lt;sem_plc-line&gt;"/>
      <list-item v="&lt;sem_plc_semcon&gt;"/>
      <list-item v="&lt;sem_plc-water&gt;"/>
      <list-item v="&lt;sem_plc_pos&gt;"/>
      <list-item v="&lt;sem_plc_route&gt;"/>
      <list-item v="&lt;sem_plc_state&gt;"/>
      <list-item v="&lt;sem_plc_substnc&gt;"/>
      <list-item v="&lt;sem_plc_substnc_wthr&gt;"/>
      <list-item v="&lt;sem_plc_time&gt;"/>
      <list-item v="&lt;sem_plc_time_wthr&gt;"/>
      <list-item v="&lt;sem_plc_tool-catch&gt;"/>
      <list-item v="&lt;sem_plc_wthr&gt;"/>
      <list-item v="&lt;sem_body_plc-elevate&gt;"/>
      <list-item v="&lt;sem_feat-phys_plc&gt;"/>
      <list-item v="&lt;top&gt;"/>
    </def-list>
    <def-list n="sem_org">
      <list-item v="&lt;sem_build_edu_org&gt;"/>
      <list-item v="&lt;sem_build_event_org&gt;"/>
      <list-item v="&lt;sem_build_org&gt;"/>
      <list-item v="&lt;sem_clth-jewl_org&gt;"/>
      <list-item v="&lt;sem_ctain-abstr_org&gt;"/>
      <list-item v="&lt;sem_curr_org&gt;"/>
      <list-item v="&lt;sem_dance_org&gt;"/>
      <list-item v="&lt;sem_edu_org&gt;"/>
      <list-item v="&lt;sem_group_hum_org&gt;"/>
      <list-item v="&lt;sem_group_org&gt;"/>
      <list-item v="&lt;sem_hum_org&gt;"/>
      <list-item v="&lt;sem_money_org&gt;"/>
      <list-item v="&lt;sem_org&gt;"/>
      <list-item v="&lt;sem_org_prod-cogn&gt;"/>
      <list-item v="&lt;sem_org_rule&gt;"/>
      <list-item v="&lt;sem_org_txt&gt;"/>
      <list-item v="&lt;sem_org_veh&gt;"/>
      <list-item v="&lt;sem_clth-jewl_curr_obj_org&gt;"/>
    </def-list>
    <def-list n="sem_edu">
      <list-item v="&lt;sem_build_edu_org&gt;"/>
      <list-item v="&lt;sem_edu&gt;"/>
      <list-item v="&lt;sem_edu_event&gt;"/>
      <list-item v="&lt;sem_edu_group_hum&gt;"/>
      <list-item v="&lt;sem_edu_mat&gt;"/>
      <list-item v="&lt;sem_edu_org&gt;"/>
      <list-item v="&lt;sem_edu_geom&gt;"/>
    </def-list>
    <def-list n="sem_cat">
      <list-item v="&lt;sem_build-part_cat&gt;"/>
      <list-item v="&lt;sem_build-part_cat_ctain&gt;"/>
      <list-item v="&lt;sem_cat&gt;"/>
      <list-item v="&lt;sem_cat_group_hum&gt;"/>
      <list-item v="&lt;part_cat_ctain_mat&gt;"/>
      <list-item v="&lt;sem_cat_group_hum_plc&gt;"/>
    </def-list>
    <def-list n="sem_hum">
      <list-item v="&lt;sem_ani_body-abstr_hum&gt;"/>
      <list-item v="&lt;sem_ani_build_hum_txt&gt;"/>
      <list-item v="&lt;sem_ani_group_hum&gt;"/>
      <list-item v="&lt;sem_ani_hum&gt;"/>
      <list-item v="&lt;sem_ani_hum_plc&gt;"/>
      <list-item v="&lt;sem_ani_hum_time&gt;"/>
      <list-item v="&lt;sem_aniprod_hum&gt;"/>
      <list-item v="&lt;sem_body_group_hum&gt;"/>
      <list-item v="&lt;sem_body_group_hum_time&gt;"/>
      <list-item v="&lt;sem_body_hum&gt;"/>
      <list-item v="&lt;sem_cat_group_hum&gt;"/>
      <list-item v="&lt;sem_cat_group_hum_plc&gt;"/>
      <list-item v="&lt;sem_clth_hum&gt;"/>
      <list-item v="&lt;sem_domain_hum&gt;"/>
      <list-item v="&lt;sem_edu_group_hum&gt;"/>
      <list-item v="&lt;sem_edu_hum&gt;"/>
      <list-item v="&lt;sem_event_hum&gt;"/>
      <list-item v="&lt;sem_feat-psych_hum&gt;"/>
      <list-item v="&lt;sem_fruit_hum&gt;"/>
      <list-item v="&lt;sem_geom_hum_plc&gt;"/>
      <list-item v="&lt;sem_group_hum&gt;"/>
      <list-item v="&lt;sem_group_hum_org&gt;"/>
      <list-item v="&lt;sem_group_hum_plc&gt;"/>
      <list-item v="&lt;sem_group_hum_prod-vis&gt;"/>
      <list-item v="&lt;sem_hum&gt;"/>
      <list-item v="&lt;sem_hum-prof&gt;"/>
      <list-item v="&lt;sem_hum-abstr&gt;"/>
      <list-item v="&lt;sem_hum_lang&gt;"/>
      <list-item v="&lt;sem_hum_lang_plc&gt;"/>
      <list-item v="&lt;sem_hum_lang_time&gt;"/>
      <list-item v="&lt;sem_hum_obj&gt;"/>
      <list-item v="&lt;sem_hum_org&gt;"/>
      <list-item v="&lt;sem_hum_plant&gt;"/>
      <list-item v="&lt;sem_hum_plc&gt;"/>
      <list-item v="&lt;sem_hum_sign&gt;"/>
      <list-item v="&lt;sem_hum_tool&gt;"/>
      <list-item v="&lt;sem_hum_veh&gt;"/>
      <list-item v="&lt;sem_hum_wthr&gt;"/>
      <list-item v="&lt;sem_hum-prof&gt;"/>
      <list-item v="&lt;sem_hum_mat_tool&gt;"/>
      <list-item v="&lt;sem_hum_tool-it&gt;"/>
    </def-list>

    <def-list n="animate_nonagent-verbs" c="Passive versions of these have 'pers' tag on 'bli', else 'impers',
                                            in order to make the inserted subject pronoun animate.">
      <!-- From newspaper corpus, grep 'h[au]n ble'|sort|uniq -c|sort -n, then filter out 'det ble' hits etc.: -->
      <list-item v="pågripe"/>
      <list-item v="arrestere"/>
      <list-item v="drepe"/>
      <list-item v="hente"/>
      <list-item v="spørre"/>
      <list-item v="dømme"/>
      <list-item v="stoppe"/>
      <list-item v="velge"/>
      <list-item v="løslate"/>
      <list-item v="kåre"/>
      <list-item v="frakte"/>
      <list-item v="påføre"/>
      <list-item v="tvinge"/>
      <list-item v="påkjøre"/>
      <list-item v="overraske"/>
      <list-item v="anmelde"/>
      <list-item v="utnevne"/>
      <list-item v="skade"/>
      <list-item v="intervjue"/>
      <list-item v="be"/>
      <list-item v="utvise"/>
      <list-item v="bytte"/>
      <list-item v="anklage"/>
      <list-item v="operere"/>
      <list-item v="fly"/>
      <list-item v="ansette"/>
      <list-item v="styrte"/>
      <list-item v="sparke"/>
      <list-item v="sikte"/>
      <list-item v="nekte"/>
      <list-item v="konfrontere"/>
      <list-item v="såre"/>
      <list-item v="sjokkere"/>
      <list-item v="redde"/>
      <list-item v="presse"/>
      <list-item v="gjenvelge"/>
      <list-item v="frikjenne"/>
      <list-item v="fengsle"/>
      <list-item v="tildele"/>
      <list-item v="forsinke"/>
      <list-item v="utestenge"/>
      <list-item v="overmanne"/>
      <list-item v="oppringe"/>
      <list-item v="ringe"/>
      <list-item v="kontakte"/>
      <list-item v="filme"/>
      <list-item v="fange"/>
      <list-item v="bære"/>
      <list-item v="anrope"/>
      <list-item v="sykemelde"/>
      <list-item v="knivstikke"/>
      <list-item v="henrette"/>
      <list-item v="flytte"/>
      <list-item v="erstatte"/>
      <list-item v="banke"/>
      <list-item v="avhøre"/>
      <list-item v="vekke"/>
      <list-item v="overkjøre"/>
      <list-item v="nominere"/>
      <list-item v="lure"/>
      <list-item v="innkalle"/>
      <list-item v="idømme"/>
      <list-item v="hylle"/>
      <list-item v="frata"/>
      <list-item v="etterforske"/>
      <list-item v="ekskludere"/>
      <list-item v="bøtelegge"/>
      <list-item v="bortføre"/>
      <list-item v="beskyte"/>
      <list-item v="begrave"/>
      <list-item v="baktale"/>
      <list-item v="varetektsfengsle"/>
      <list-item v="utstøte"/>
      <list-item v="utlevere"/>
      <list-item v="utelate"/>
      <list-item v="transportere"/>
      <list-item v="smitte"/>
      <list-item v="skade"/>
      <list-item v="rane"/>
      <list-item v="provosere"/>
      <list-item v="plassere"/>
      <list-item v="overlevere"/>
      <list-item v="overbevise"/>
      <list-item v="omringe"/>
      <list-item v="myrde"/>
      <list-item v="irritere"/>
      <list-item v="involvere"/>
      <list-item v="invitere"/>
      <list-item v="innhente"/>
      <list-item v="imponere"/>
      <list-item v="gjenkjenne"/>
      <list-item v="geleide"/>
      <list-item v="forkjøle"/>
      <list-item v="dytte"/>
      <list-item v="deportere"/>
      <list-item v="binde"/>
      <list-item v="blende"/>
      <list-item v="avsette"/>
      <list-item v="avlytte"/>
      <list-item v="avbryte"/>
      <list-item v="avbilde"/>
      <list-item v="anholde"/>
      <!-- Newspaper-animate_nonagent-verbs are so depressing, here are some happier ones: -->
      <list-item v="forundre"/>
      <list-item v="elske"/>
      <list-item v="pålegge"/>
      <list-item v="fotografere"/>
      <list-item v="inspirere"/>
      <list-item v="klemme"/>
      <list-item v="kysse"/>
      <list-item v="rose"/>
      <list-item v="oppmuntre"/>
      <list-item v="frigjøre"/>
      <list-item v="unnskylde"/>
      <list-item v="forlate"/>
      <list-item v="beklage"/>
      <list-item v="savne"/>
    </def-list>

    <def-list n="ill-NIL-verbs" c="We add the 'ill-NIL' tag to verb chunks with these verbs,
                                   use that tag in t2x to remove the caseprep.PR.ill chunk
                                   TODO: use nob/tl verb instead?">
<!--      <list-item v="oahpahit"/> -->
      <list-item v="oččodit"/>
      <list-item v="guoskat"/>
      <list-item v="joavdat"/>
      <list-item v="deaivat"/>
      <list-item v="čuohcit"/>
      <list-item v="čuohcat"/>
      <list-item v="riŋget"/>
      <list-item v="čuojahit"/>
      <list-item v="váikkuhit"/>
      <list-item v="liikot"/>
      <list-item v="liikostit"/>
      <list-item v="påvirke"/>
      <list-item v="utvikle"/>
      <list-item v="ovdánahttit"/>
    </def-list>
    <def-list n="ill-med-verbs">
      <list-item v="duhtat"/>
      <list-item v="oahpásmuvvat"/>
    </def-list>
    <def-list n="ill-i-verbs">
      <list-item v="ásahit"/>
      <list-item v="bisánit"/>
      <list-item v="bálkestit"/>
      <list-item v="investeret"/>
    </def-list>
    <def-list n="ill-for-verbs">
      <list-item v="leat"/>
      <list-item v="mearkkašit"/>
      <list-item v="čiegadit"/>
    </def-list>
    <def-list n="ill-på-verbs" c="See 'ill-NIL-verbs' above.
                                  Speech verbs, emotional(?) verbs">
      <list-item v="suhttat"/>
      <list-item v="luohttit"/>
      <list-item v="dorvvastit"/>
      <list-item v="jáhkkit"/>
      <list-item v="geahččat"/>
      <list-item v="guovlat"/>
      <list-item v="báhcit"/>
      <list-item v="čoalkalit"/>
    </def-list>
    <def-list n="ill-av-verbs" c="See 'ill-NIL-verbs' above.
                                  TODO: Add all lexicalised Der_halla verbs (with illative agents)
                                  (Verbs tagged Der_halla are added in out_verb)">
      <list-item v="fillehallat"/>
      <list-item v="oainnahallat"/>
      <list-item v="borahallat"/>
      <list-item v="gáskkáhallat"/>
      <list-item v="cábmohallat"/>
      <list-item v="cápmahallat"/>
      <list-item v="dorohallat"/>
      <list-item v="bovttáhallat"/>
      <list-item v="bealkkáhallat"/>
      <list-item v="rissehallat"/>
      <list-item v="gávnnahallat"/>
      <list-item v="oainnahallat"/>
      <list-item v="vuojáhallat"/>
    </def-list>
    <def-list n="loc-for-verbs">
      <list-item v="ballat"/>
      <list-item v="nohkkot"/>
      <list-item v="váruhit"/>
    </def-list>
    <def-list n="loc-om-verbs">
      <list-item v="beroštit"/>
    </def-list>
    <def-list n="loc-som-verbs">
      <list-item v="beaggit" c="beaggán Sámi soga lávlaga čállin"/>
    </def-list>
    <def-list n="loc-fra-verbs">
<!--      <list-item v="gullat" c="Problematic; Leat go gullan sus alddis? vs Go gullen sámegiela dien mátkkis."/>-->
      <list-item v="beassat" c="Mihttomearri lea beassat hálddašanguovllus."/>
      <list-item v="boahtit" c="Mun boađán gávpogis."/>
      <list-item v="gáidat"  c="Son lea gáidan Ipmila sánis."/>
      <list-item v="fárret"  c="… juogo fárret sámi gilážis vai besset eallit homofiilan."/>
      <list-item v="earuhit" c="earuhii nuorra Prinssa skuvlavázzima eará skuvlamánáin"/>
    </def-list>
    <def-list n="loc-NIL-verbs">
      <list-item v="fitnat"/>
      <list-item v="finadit"/>
    </def-list>
    <def-list n="loc-om" c="Locative noun phrases default to 'på' unless in this or next list (or are np.top)">
      <list-item v="kveld"/>
      <list-item v="dag"/>
      <list-item v="morgen"/>
      <list-item v="natt"/>
      <list-item v="tema"/>
    </def-list>
    <def-list n="loc-for" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
      <list-item v="NOTHING HERE YET"/>
    </def-list>
    <def-list n="loc-av" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
        <list-item v="rein"/>
        <list-item v="slekt"/>
    </def-list>
    <def-list n="loc-ved" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
        <list-item v="makt"/>
    </def-list>
    <def-list n="loc-etter" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
      <list-item v="oppfatning"/>
      <list-item v="mening"/>
      <list-item v="syn"/>
    </def-list>
    <def-list n="loc-fra" c="Locative noun phrases default to 'på' unless they're in this list (or are np.top)">
      <list-item v="ønske" c="Lihkkobeaivve sávaldagat Káre Márehis."/>
    </def-list>
    <def-list n="loc-i" c="Locative noun phrases default to 'på' unless in this list (or are np.top)">
      <list-item v="Guovdageainnu suohkan"/>
      <list-item v="Norge"/>
      <list-item v="Nord-Norge"/>
      <list-item v="NSR"/>
      <list-item v="USA"/>
      <list-item v="administrasjon"/>
      <list-item v="alder"/>
      <list-item v="allmenning"/>
      <list-item v="analyse"/>
      <list-item v="april"/>
      <list-item v="arbeid"/>
      <list-item v="august"/>
      <list-item v="avgrensning"/>
      <list-item v="barnehage"/>
      <list-item v="barnehagetilbud"/>
      <list-item v="begynnelse"/>
      <list-item v="besittelse"/>
      <list-item v="bilulykke"/>
      <list-item v="biltrafikk"/>
      <list-item v="blod"/>
      <list-item v="brann"/>
      <list-item v="brev"/>
      <list-item v="bruk"/>
      <list-item v="bryting"/>
      <list-item v="by"/>
      <list-item v="bygd"/>
      <list-item v="debatt"/>
      <list-item v="desember"/>
      <list-item v="dokument"/>
      <list-item v="dråpe"/>
      <list-item v="eksempel"/>
      <list-item v="erklæring"/>
      <list-item v="fattigdom"/>
      <list-item v="februar"/>
      <list-item v="film"/>
      <list-item v="finale"/>
      <list-item v="flaske"/>
      <list-item v="forbindelse"/>
      <list-item v="form"/>
      <list-item v="forord"/>
      <list-item v="forskning"/>
      <list-item v="forvaltning"/>
      <list-item v="framtid"/>
      <list-item v="frykt"/>
      <list-item v="fylke"/>
      <list-item v="fylkeskommune"/>
      <list-item v="første omgang"/>
      <list-item v="gamme"/>
      <list-item v="gang"/>
      <list-item v="hage"/>
      <list-item v="historie"/> <!-- i historia, men skrive på ei historie -->
      <list-item v="hjerte"/>
      <list-item v="hus"/>
      <list-item v="husstand"/>
      <list-item v="idrett"/>
      <list-item v="januar"/>
      <list-item v="juli"/>
      <list-item v="juni"/>
      <list-item v="kirke"/>
      <list-item v="klasse"/>
      <list-item v="kommune"/>
      <list-item v="kraft"/>
      <list-item v="krav"/>
      <list-item v="krukke"/>
      <list-item v="kulde"/>
      <list-item v="land"/>
      <list-item v="ledelse"/>
      <list-item v="ledelse"/>
      <list-item v="liv"/>
      <list-item v="lov"/>
      <list-item v="lys"/>
      <list-item v="mai"/>
      <list-item v="mars"/>
      <list-item v="meningsmåling"/>
      <list-item v="medisin"/>
      <list-item v="mellomrom"/>
      <list-item v="mobiltelefon"/>
      <list-item v="motvind"/>
      <list-item v="mørke"/>
      <list-item v="natur"/>
      <list-item v="navn"/>
      <list-item v="nominasjon"/>
      <list-item v="november"/>
      <list-item v="offentlighet"/>
      <list-item v="oktober"/>
      <list-item v="omsorgsbolig"/>
      <list-item v="paragraf"/>
      <list-item v="periode"/>
      <list-item v="perspektiv"/>
      <list-item v="posisjon"/>
      <list-item v="praksis"/>
      <list-item v="program"/>
      <list-item v="prosjekt"/>
      <list-item v="prosjektstønad"/>
      <list-item v="rom"/>
      <list-item v="røving"/>
      <list-item v="sak"/>
      <list-item v="samarbeid"/>
      <list-item v="samfunn"/>
      <list-item v="samtale"/>
      <list-item v="sammenheng"/>
      <list-item v="sending"/>
      <list-item v="seng"/>
      <list-item v="september"/>
      <list-item v="seriefotball"/>
      <list-item v="sjanger"/>
      <list-item v="skap"/>
      <list-item v="skimesterskap"/>
      <list-item v="skirenn"/>
      <list-item v="skuff"/>
      <list-item v="speil"/>
      <list-item v="spill"/>
      <list-item v="stue"/>
      <list-item v="sum"/>
      <list-item v="søknad"/>
      <list-item v="telefon"/>
      <list-item v="tidsrom"/>
      <list-item v="tet"/>
      <list-item v="trafikk"/>
      <list-item v="trygghet"/>
      <list-item v="tvil"/>
      <list-item v="ulykke"/>
      <list-item v="undervisning"/>
      <list-item v="urfolkssak"/>
      <list-item v="utgangspunkt"/>
      <list-item v="utland"/>
      <list-item v="utredning"/>
      <list-item v="vask"/>
      <list-item v="verden"/>
      <list-item v="vind"/>
      <list-item v="virkelighet"/>
      <list-item v="jakt"/>
      <list-item v="kultur"/>
      <list-item v="fiske"/>
      <list-item v="reindrift"/>
      <list-item v="utdanning"/>
      <list-item v="valgprogram"/>
    </def-list>
    <def-list n="loc-på" c="Proper place nouns (np.top) get preposition 'i' unless they're in this list.">
      <list-item v="Andøya"/>
      <list-item v="Bygdøy"/>
      <list-item v="Cuba"/>
      <list-item v="Filippinene"/>
      <list-item v="Gjøvik"/>
      <list-item v="Grønland"/>
      <list-item v="Hamar"/>
      <list-item v="Hidra"/>
      <list-item v="Hispaniola"/>
      <list-item v="Hitra"/>
      <list-item v="Hovedøya"/>
      <list-item v="Island"/>
      <list-item v="Komsa"/>
      <list-item v="Lille Komsa"/>
      <list-item v="Kreta"/>
      <list-item v="Kvaløya"/>
      <list-item v="Kvaløysletta"/>
      <list-item v="Lillehammer"/>
      <list-item v="Madagaskar"/>
      <list-item v="Ráisduottarháldi"/>
      <list-item v="Sameskolen"/>
      <list-item v="Sennalandet"/>
      <list-item v="Sicilia"/>
      <list-item v="Statnett"/>
      <list-item v="Sørøya"/>
      <list-item v="Svalbard"/>
      <list-item v="Varangerhalvøya"/>
      <list-item v="Vestlandet"/>
      <list-item v="arbeidsplass"/>
      <list-item v="dag"/>
      <list-item v="dato"/>
      <list-item v="deltid"/>
      <list-item v="festival"/>
      <list-item v="fotballkamp"/>
      <list-item v="fredag"/>
      <list-item v="grunnskole"/>
      <list-item v="gårdsplass"/>
      <list-item v="heltid"/>
      <list-item v="hjemmebane"/>
      <list-item v="hotell"/>
      <list-item v="kort tid"/>
      <list-item v="kino"/>
      <list-item v="kjøkken"/>
      <list-item v="liste"/>
      <list-item v="lørdag"/>
      <list-item v="mandag"/>
      <list-item v="møte"/>
      <list-item v="nivå"/>
      <list-item v="onsdag"/>
      <list-item v="papir"/>
      <list-item v="sameskole"/>
      <list-item v="scene"/>
      <list-item v="side"/>
      <list-item v="skole"/>
      <list-item v="slette"/>
      <list-item v="sykehjem"/>
      <list-item v="sykehus"/>
      <list-item v="søndag"/>
      <list-item v="tall"/>
      <list-item v="tirsdag"/>
      <list-item v="topp"/>
      <list-item v="torsdag"/>
      <list-item v="vegg"/>
      <list-item v="Østlandet"/>
      <list-item v="øy"/>
    </def-list>
    <def-list n="loc-NIL" c="Locative noun phrases default to 'i' unless in this list">
      <list-item v="uke"/>
      <list-item v="glad"/>
      <list-item v="enig"/>
      <list-item v="redd"/>
      <list-item v="år"/>
    </def-list>
    <def-list n="loc-om-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
<!--      <list-item v="informasjon"/> ambigious  -->
      <list-item v="tale"/>
      <list-item v="snakk"/>
      <list-item v="kontrakt"/>
<!--      <list-item v="avtale"/> ambigious  -->
      <list-item v="bok"/>
      <list-item v="artikkel"/>
    </def-list>
    <def-list n="loc-for-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="frykt"/>
      <list-item v="tema"/>
      <list-item v="redd"/>
      <list-item v="glad"/>
    </def-list>
    <def-list n="loc-av-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
        <list-item v="del"/>
      <list-item v="sammendrag"/>
      <list-item v="halvpart"/>
      <list-item v="resultat"/>
      <list-item v="NUMERAL"/>      <!-- special value set by numerals, see NUMERAL rule -->
    </def-list>
    <def-list n="loc-fra-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="ønske"/>
      <list-item v="lykkeønskning"/>
      <list-item v="hilsning"/>
      <list-item v="kondolanse"/>
    </def-list>
    <def-list n="loc-etter-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="mening"/>
      <list-item v="oppfatning"/>
    </def-list>
    <def-list n="loc-i-head" c="Locative noun phrases default to 'på', unless they modify nouns in this list">
      <list-item v="infeksjon"/>
    </def-list>
    <def-list n="ess-NIL" c="Essive noun phrases default to 'som' unless in this list">
      <list-item v="del"/>
    </def-list>
    <def-list n="ess-til" c="Essive noun phrases default to 'som' unless in this list">
      <list-item v="aske"/>
      <list-item v="grunn"/>
      <list-item v="nytte"/>
    </def-list>
    <def-list n="ess-til-gen" c="Essive noun phrases default to 'som' unless in this list (note: these are also turned genitive!)">
      <list-item v="lån"/>
    </def-list>
    <def-list n="ess-i" c="Essive noun phrases default to 'som' unless in this list">
      <list-item v="tillegg"/>
      <list-item v="skumring"/>
      <list-item v="regn"/>
      <list-item v="tåke"/>
    </def-list>
    <def-list n="ess-på" c="Essive noun phrases default to 'som' unless in this list">
      <list-item v="besøk"/>
    </def-list>
    <def-list n="ill-i" c="Illative noun phrases default to 'til' unless in this list">
      <list-item v="del"/>
      <list-item v="forord"/>
      <list-item v="gang"/>
      <list-item v="tale"/>
      <list-item v="do"/>
    </def-list>
    <def-list n="ill-på" c="Illative noun phrases default to 'til' unless in this list">
      <list-item v="ferie"/>
      <list-item v="golv"/>
      <list-item v="plass"/>
      <list-item v="måte"/>
    </def-list>
    <def-list n="ill-NIL" c="Illative noun phrases default to 'til' unless in this list">
      <list-item v="feil"/>
      <list-item v="nok"/>
    </def-list>
    <def-list n="ill-for-head" c="Illativ noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="behov"/>
      <list-item v="plan"/>
      <list-item v="senter"/>
      <list-item v="interesse"/>
    </def-list>
     <def-list n="ill-i-head" c="Illativ noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="progresjon"/>
    </def-list>
   <def-list n="ill-på-head">
      <list-item v="syn"/>
      <list-item v="innflytelse"/>
      <list-item v="påvirkning"/>
    </def-list>
    <def-list n="gen-av-head" c="Genitive @→N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="forfatter"/>
      <list-item v="forskning"/>
      <list-item v="vurdering"/>
      <list-item v="kopi"/>
      <list-item v="leder"/>
      <list-item v="evaluering"/>
    </def-list>
    <def-list n="gen-om-head" c="Genitive @→N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="sang"/>
    </def-list>
    <def-list n="gen-i-head" c="Genitive @→N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="undervisning"/>
      <list-item v="opplæring"/>
    </def-list>
    <def-list n="gen-for-head" c="Genitive @→N noun phrases default to 'til', unless they modify nouns in this list">
      <list-item v="sjef"/>
      <list-item v="grunnlag"/>
      <list-item v="fundament"/>
      <list-item v="basis"/>
      <list-item v="senter"/>
    </def-list>
    <def-list n="gen-på-head">
      <list-item v="måte"/>
    </def-list>
    <def-list n="gen-som-head">
      <list-item v="masterutdanning"/>
    </def-list>

    <def-list n="no-gen-after-prop" c="If a noun in this list is preceded by a prop.gen, remove the gen from the prop">
      <list-item v="skole"/>
      <list-item v="ungdomssskole"/>
      <list-item v="by"/>
      <list-item v="kommune"/>
      <list-item v="fylkeskommune"/>
      <list-item v="bru"/>
      <list-item v="bro"/>
    </def-list>
    <def-list n="noun.pseudo-prop"
              c="Nouns that act proper (indefinite in the singular, no determiner)">
      <list-item v="april"/>
      <list-item v="august"/>
      <list-item v="bestefar"/>
      <list-item v="bestemor"/>
      <list-item v="desember"/>
      <list-item v="duodji"/>
      <list-item v="far"/>
      <list-item v="mat"/>
      <list-item v="februar"/>
      <list-item v="fredag"/>
      <list-item v="gang"/>
      <list-item v="hjelp"/>
      <list-item v="januar"/>
      <list-item v="julaften"/>
      <list-item v="juli"/>
      <list-item v="juni"/>
      <list-item v="kofte"/>
      <list-item v="langfredag"/>
      <list-item v="lykke"/>
      <list-item v="lørdag"/>
      <list-item v="mai"/>
      <list-item v="mandag"/>
      <list-item v="mars"/>
      <list-item v="merverdiavgift"/>
      <list-item v="midnatt"/>
      <list-item v="moms"/>
      <list-item v="mor"/>
      <list-item v="november"/>
      <list-item v="oktober"/>
      <list-item v="onsdag"/>
      <list-item v="pop"/>
      <list-item v="påskeaften"/>
      <list-item v="samisk"/>
      <list-item v="september"/>
      <list-item v="skjærtorsdag"/>
      <list-item v="støtte"/>
      <list-item v="søndag"/>
      <list-item v="takk"/>
      <list-item v="tirsdag"/>
      <list-item v="torsdag"/>
      <list-item v="trygghet"/>
      <list-item v="velkommen"/>
      <list-item v="verden"/>
      <list-item v="junior"/>
      <list-item v="senior"/>
      <list-item v="fokus"/>
      <list-item v="grad"/>
      <list-item v="downs syndrom"/>
      <list-item v="asyl"/>
      <list-item v="null"/>
      <list-item v="deltid"/>
      <list-item v="heltid"/>
      <list-item v="twitter"/>
      <list-item v="vare"/> <!-- váldit vára -->
    </def-list>

    <def-list n="bigrams-def" c="det/adj+noun lemma co-occurrences that are typically definite">
      <list-item v="hel tid"/>
    </def-list>

    <def-list n="caus-la-verbs" c="Should get 'la' instead of 'få' in causative">
      <list-item v="delegere"/>
    </def-list>
    <def-list n="caus-Ø-verbs" c="For some verbs, there is no need for a causative helper">
      <list-item v="delegere"/>
    </def-list>
    <def-list n="not-det-verbs" c="exceptions from the pattern of passive verb + subj: formal subject det and indef form">
      <list-item v="loahpahit"/>
      <list-item v="gieldit"/>
      <list-item v="alidit"/>
      <list-item v="geavahit"/>
      <list-item v="buoridit"/>
    </def-list>
    <def-list n="annen">
      <list-item v="annen"/>
    </def-list>
    <def-list n="guhte" c="hvem av dem/ingen av dem - Lene added">
      <list-item v="guhte"/>
      <list-item v="goabbá"/>
      <list-item v="guhtemuš"/>
    </def-list>
    <def-list n="determiner-although-determinerless_sem">
      <list-item v="måned"/>
      <list-item v="dag"/>
      <list-item v="uke"/>
      <list-item v="år"/>
      <list-item v="time"/>
      <list-item v="minutt"/>
      <list-item v="sekund"/>
    </def-list>
    <def-list n="determinerless_sem">
      <list-item v="&lt;sem_time&gt;"/>
      <list-item v="&lt;sem_time_wthr&gt;"/>
      <list-item v="&lt;sem_measr_obj_time&gt;"/>
      <list-item v="&lt;sem_measr_time&gt;"/>
      <list-item v="&lt;sem_ani_hum_time&gt;"/>
      <list-item v="&lt;sem_ani_time&gt;"/>
      <list-item v="&lt;sem_body_group_hum_time&gt;"/>
      <list-item v="&lt;sem_body_time&gt;"/>
      <list-item v="&lt;sem_event_time&gt;"/>
      <list-item v="&lt;sem_hum_lang_time&gt;"/>
      <list-item v="&lt;sem_plc_time&gt;"/>
    </def-list>
    <def-list n="determinerless_lem">
      <list-item v="samiskkunnskap"/>
      <list-item v="verden"/>
      <list-item v="håp"/>
      <list-item v="støtte"/>
      <list-item v="kofte"/> <!-- maybe -->
      <list-item v="hjemmebane"/>
      <list-item v="innflytelse"/>
      <list-item v="lyst"/>
      <list-item v="samisk"/>
      <list-item v="duodji"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>
    <def-macro n="set_caseFirstWord" npar="1"
               c="Set the typographic case to be carried by the chunk.
                  - if argument is _not_ a proper noun: caseFirstWord is the case of the lemma, and the lemma gets lowercase.
                  - if argument _is_ a proper noun: caseFirstWord is lowercase, and lemma stays unchanged.

                  This means that if the sentence starts with a proper noun, and we insert eg. a preposition before that,
                  the preposition won't get capitalised in t2x. We _could_ circumvent this by having a global variable
                  'FirstWordSeen' that is set to false on periods and true for all other lexical units, but this is low priority.

                  We treat UPPERCASE as proper nouns.">
      <!-- Default lowercase, but may still have the value 'init': -->
      <modify-case><var n="caseFirstWord"/><lit v="aa"/></modify-case>
      <!-- For numbers and uppercased words, uc_lemh == lemh, in which case we don't alter caseFirstWord below -->
      <let><var n="uc_lemh"/><clip pos="1" side="tl" part="lemh"/></let>
      <modify-case><var n="uc_lemh"/><lit v="AA"/></modify-case>
      <choose><when c="Set to 'aa' with case of lemh unless the word is fixedcase">
        <test><not><or>
          <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
          <equal><clip pos="1" side="tl" part="lettercase"/><lit-tag v="fixedcase"/></equal>
          <equal><var n="uc_lemh"/><clip pos="1" side="tl" part="lemh"/></equal>
        </or></not></test>
        <let><var n="caseFirstWord"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
        <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
      </when></choose>
      <let><var n="uc_lemh"/><lit v=""/></let>
    </def-macro>

    <def-macro n="reset_caseFirstWord" npar="0" c="Unless it's UPPERCASE">
      <choose><when>
        <test><equal><var n="caseFirstWord"/><lit v="Aa"/></equal></test>
        <modify-case><var n="caseFirstWord"/><lit v="aa"/></modify-case>
      </when></choose>
    </def-macro>

    <def-macro n="switch_cases" npar="2"
               c="Simply switch the typographic cases (upper/lower/capital) of the two arguments.">
      <let><var n="tmp"/><get-case-from pos="1"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
      <let><clip pos="1" side="tl" part="lemh"/><get-case-from pos="2"><clip pos="1" side="tl" part="lemh"/></get-case-from></let>
      <modify-case><clip pos="2" side="tl" part="lemh"/><var n="tmp"/></modify-case>
    </def-macro>


    <def-macro n="set_foc-word" npar="1"
               c="arg.1: noun, pronoun">
      <let>
        <var n="foc-word"/><lit v=""/>
      </let>
      <choose>
        <when c="foc_pos-ge">
          <test><or>
          <equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_pos-ge"/></equal>
          <equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_naj"/></equal></or></test>
           <let>
            <var n="foc-word"/>
            <concat>
              <lit v=" ^"/>
              <lit v="foc"/>
              <lit-tag v="FOC"/>
              <lit v="{^"/>
              <lit v="også"/>
              <lit-tag v="adv"/>
              <lit v="$}$"/>
            </concat>
          </let>
          </when>
        <when c="foc_neg-ge">
          <test><equal><clip pos="1" side="sl" part="a_foc"/><lit-tag v="foc_neg-ge"/></equal></test>
           <let>
            <var n="foc-word"/>
            <concat>
              <lit v=" ^"/>
              <lit v="foc"/>
              <lit-tag v="FOC"/>
              <lit v="{^"/>
              <lit v="heller"/>
              <lit-tag v="adv"/>
              <lit v="$}$"/>
            </concat>
          </let>
          </when>
          </choose>
      </def-macro>



    <def-macro n="set_caseprep" npar="1"
               c="arg.1: noun, pronoun
                  –––––
                  First attempt (may be changed in later stages).
                  Assumes that caseFirstWord has been set!">
      <let>
        <var n="caseprep"/><lit v=""/>
      </let>
      <choose>
        <when c="på when loc">
          <test><and><equal><clip pos="1" side="sl" part="case"/><lit-tag v="loc"/></equal>
           <equal><clip pos="1" side="sl" part="hab"/><lit v=""/></equal>
          </and></test>
          <let>
            <var n="caseprep"/><lit v="på"/>
          </let>
          <choose c="Exceptions to the locative→på rule:">
            <when c="som when loc">
              <test><and>
                <equal><clip pos="1" side="sl" part="lemh"/><lit v="árvu"/></equal>
                <equal><clip pos="1" side="sl" part="nbr"/><lit-tag v="sg"/></equal>
      </and></test>
              <let>
                <var n="caseprep"/><lit v="som"/>
              </let>
            </when>
            <when c="om when loc">
              <test>
              <and>
           <not><and>
              <equal><var n="seen_num"/><lit-tag v="num"/></equal>
               <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_time"/></in>
              </and></not>
              <or>
                <in caseless="yes"><var n="previous-nhead"/><list n="loc-om-head"/></in>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-om"/></in>
                  <equal><var n="main-verb-sl"/><lit v="beroštit"/></equal>
                  <and>
                  <or>
                <equal><var n="previous-nhead"/><lit v="konkurranse"/></equal>
                <equal><var n="previous-nhead"/><lit v="kunnskap"/></equal>
                  </or>
             <not><in><clip pos="1" side="sl" part="a_sem"/><list n="sem_plc"/></in></not>
             <not><in><clip pos="1" side="sl" part="a_sem"/><list n="sem_org"/></in></not>
                  </and>
                  <and>
                <equal><var n="previous-nhead"/><lit v="avtale"/></equal>
             <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_act"/></equal>
                  </and>
             </or></and>

             </test>
              <let>
                <var n="caseprep"/><lit v="om"/>
              </let>
            </when>
            <when c="hos">
              <test><or>
              <and><or>
                <equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.pers"/></equal>
                <equal><clip pos="1" side="sl" part="prop_type"/><lit-tag v="cog"/></equal>
                <equal><clip pos="1" side="sl" part="prop_type"/><lit-tag v="ant"/></equal>
                </or>
            <not><equal><var n="previous-nhead"/><lit v="prosent"/></equal></not>
          <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@Pron←"/></equal></not>
           <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@Num←"/></equal></not>
           <equal><clip pos="1" side="sl" part="hab"/><lit v=""/></equal>
           </and>
           <and>
         <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_hum"/></in>
         <not><in><clip pos="1" side="sl" part="a_sem"/><list n="sem_plc"/></in></not>
         <not><equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_hum_lang"/></equal></not>
         <not><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-i"/></in></not>
           <or>
           <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal>
           <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal>
           <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@APP-Pron←"/></equal>
           <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@APP-N←"/></equal>
           </or>
           </and>
           <and>
         <equal><clip pos="1" side="sl" part="lemh"/><lit v="olus"/></equal>
           <equal><clip pos="1" side="sl" part="nbr"/><lit-tag v="pl"/></equal>
           </and>
           </or></test>
              <let>
                <var n="caseprep"/><lit v="hos"/>
              </let>
            </when>
            <when c="av for loc-av">
              <test><or>
                <in caseless="yes"><var n="previous-nhead"/><list n="loc-av-head"/></in>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-av"/></in>
                <and>
                 <equal><var n="previous-nhead"/><lit v="prosent"/></equal>
                <not><in caseless="yes"><clip pos="1" side="sl" part="a_sem"/><list n="sem_time"/></in></not>
               </and>
                <and>
	            <or>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@Pron←"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@Num←"/></equal>
<!--                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@N←"/></equal>  -->
                </or>
                <not><in><clip pos="1" side="sl" part="a_sem"/><list n="sem_plc"/></in></not>
                </and>
              </or>
              </test>
              <let>
                <var n="caseprep"/><lit v="av"/>
              </let>
            </when>
            <when c="i when loc">
              <test><and><or>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-i"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_plc"/></in>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_ani"/></equal>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_rule"/></equal>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_event"/></equal>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_build-part"/></equal>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_ctain-clth"/></equal>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_wthr"/></equal>
                <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_prod-vis"/></equal>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_cat"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_body"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_txt"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_veh"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_state"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_prod-audio"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_prod-ling"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_domain"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_prod-cogn"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_pos"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_org"/></in>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_group"/></in>
                <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.top"/></equal>
                <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.org"/></equal>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_time"/></in>
                <equal><clip pos="1" side="tl" part="a_sem"/><lit-tag v="sem_year"/></equal>
                <in caseless="yes"><var n="previous-nhead"/><list n="loc-i-head"/></in>
              <and>
                    <in caseless="yes"><var n="previous-nhead_sem"/><list n="sem_edu"/></in>
                    <in caseless="yes"><clip pos="1" side="sl" part="a_sem"/><list n="sem_lang"/></in>
                  </and>
              </or>
              <not><in caseless="yes"><var n="previous-nhead"/><list n="loc-fra-head"/></in></not>
              <not><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-på"/></in></not>
              <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal></not>
              <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal></not>
              <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-F←ADVL-ela"/></equal></not>
            </and>
              </test>
              <let>
                <var n="caseprep"/><lit v="i"/>
              </let>
            </when>
            <when c="med when loc">
              <test>
             <equal><var n="main-verb-sl"/><lit v="geargat"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v="med"/>
              </let>
            </when>
            <when c="for when loc">
              <test><or>
                <in caseless="yes"><var n="previous-nhead"/><list n="loc-for-head"/></in>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-for"/></in>
              </or></test>
              <let>
                <var n="caseprep"/><lit v="for"/>
              </let>
            </when>
            <when c="etter when loc">
              <test><or>
                <in caseless="yes"><var n="previous-nhead"/><list n="loc-etter-head"/></in>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-etter"/></in>
              </or></test>
              <let>
                <var n="caseprep"/><lit v="etter"/>
              </let>
            </when>
            <when c="ved when loc">
              <test>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-ved"/></in>
              </test>
              <let>
                <var n="caseprep"/><lit v="ved"/>
              </let>
            </when>
            <when c="for when loc">
              <test>
                <equal><var n="previous-nhead"/><lit v="takk"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v="for"/>
              </let>
            </when>
            <when c="fra when loc">
              <test>
              <and>
              <or>
                <in caseless="yes"><var n="previous-nhead"/><list n="loc-fra-head"/></in>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-fra"/></in>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-F←ADVL-ela"/></equal>
              </or>
                <not><in><clip pos="1" side="sl" part="a_sem"/><list n="sem_mat"/></in></not>
                <not><equal><var n="main-verb-sl"/><lit v="báidnit"/></equal></not>
              </and>
              </test>
              <let>
                <var n="caseprep"/><lit v="fra"/>
              </let>
            </when>
            <when c="Sometimes, das → av den">
              <test>
              <or>
              <and>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_mat"/></in>
                <or>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                </or>
                </and>
              <and>
                <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
                <or>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                </or>
              </and>
              </or>
              </test>
              <let>
                <var n="caseprep"/><lit v="av"/>
              </let>
            </when>
          </choose>
          <choose><when c="but even if the above tests matched, we can override to nil here:">
            <test>
              <or>
                <equal><clip pos="1" side="tl" part="hab"/><lit-tag v="←hab→"/></equal>
                <and>           <!-- «mus lea» now tagged like this: -->
                  <or>
                    <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn"/></equal>
                    <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
                  </or>
                  <equal><clip pos="1" side="tl" part="case"/><lit-tag v="loc"/></equal>
                  <or>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal>
                  </or>
                </and>
                <and>
                  <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn"/></equal>
                  <equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal>
                  <equal><clip pos="1" side="tl" part="lemh"/><lit v="selv"/></equal>
                </and>
                <in caseless="yes"><var n="main-verb-sl"/><list n="loc-NIL-verbs"/></in>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="loc-NIL"/></in>
              </or>
            </test>
            <let>
              <var n="caseprep"/><lit v=""/>
            </let>
          </when>
          </choose>
        </when>
        <when c="com med">
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="com"/></equal></test>
          <let>
            <var n="caseprep"/><lit v="med"/>
          </let>
          <choose c="Exceptions to the comitative→med rule:">
            <when>
              <test>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="måte"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v="på"/>
              </let>
            </when>
            <when c="com NIL">
              <test>
             <equal><var n="main-verb-sl"/><lit v="deaivvadit"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v=""/>
              </let>
            </when>
            </choose>
        </when>
        <when c="ess is som">
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="ess"/></equal></test>
          <let>
            <var n="caseprep"/><lit v="som"/>
          </let>
          <choose><when c="ess is til">
            <test><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ess-til"/></in></test>
            <let>
              <var n="caseprep"/><lit v="til"/>
            </let>
          </when></choose>
          <choose><when c="ess is til">
            <test><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ess-til-gen"/></in></test>
            <let>
              <var n="caseprep"/><lit v="til"/>
            </let>
            <let><clip pos="1" side="tl" part="case"/><lit-tag v="gen"/></let>
          </when></choose>
          <choose><when c="ess is i">
            <test>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ess-i"/></in>
            </test>
            <let>
              <var n="caseprep"/><lit v="i"/>
            </let>
          </when>
          <when c="ess is på">
            <test>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ess-på"/></in>
            </test>
            <let>
              <var n="caseprep"/><lit v="på"/>
            </let>
          </when></choose>
          <choose><when c="ess is en">
            <test>
              <equal><clip pos="1" side="tl" part="lemh"/><lit v="betingelse"/></equal>
            </test>
            <let>
              <var n="caseprep"/><lit v="en"/>
            </let>
          </when></choose>
          <choose><when c="ess is NIL">
            <test><or><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ess-NIL"/></in>
             <equal><var n="main-verb-sl"/><lit v="gohčodit"/></equal>
             <equal><var n="main-verb-sl"/><lit v="šaddat"/></equal>
             <equal><var n="main-verb-sl"/><lit v="gártat"/></equal>
            <equal><var n="advl-verb-sl"/><lit v="leat"/></equal>
             </or></test>
           <let>
              <var n="caseprep"/><lit v=""/>
            </let>
          </when></choose>
        </when>
        <when c="ill is til">
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="ill"/></equal></test>
          <let>
            <var n="caseprep"/><lit v="til"/>
          </let>
          <choose>
            <when c="ill is om" >
              <test>
	              <or>
               <and>
              <equal><clip pos="1" side="tl" part="lemh"/><lit v="dag"/></equal>
              <or>
               <equal><var n="previous-nhead"/><lit v="time"/></equal>
               <equal><var n="previous-nhead"/><lit v="gang"/></equal>
             </or>
             </and>
                  <and>
                <equal><var n="previous-nhead"/><lit v="avtale"/></equal>
             <equal><var n="main-verb-tl"/><lit v="skrive"/></equal>
                  </and>
	              </or>
             </test>
              <let>
                <var n="caseprep"/><lit v="om"/>
              </let>
            </when>
            <when c="ill is i">
              <test><or>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ill-i"/></in>
                <equal caseless="yes"><var n="main-verb-tl"/><lit v="havne"/></equal>
                <and>
                <in caseless="yes"><var n="main-verb-sl"/><list n="ill-i-verbs"/></in>
              <not><equal><clip pos="1" side="tl" part="a_sem"/><lit-tag v="sem_hum"/></equal></not>	         
                </and>
<!--                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_prod-ling"/></in> this is not good  -->
               <equal><var n="previous-nhead"/><lit v="time"/></equal>
               <equal><var n="previous-nhead"/><lit v="gang"/></equal>
               <equal><var n="previous-nhead"/><lit v="liv"/></equal>
             <and>
                <equal caseless="yes"><var n="main-verb-sl"/><lit v="njuiket"/></equal>
                <equal><clip pos="1" side="tl" part="a_sem"/><lit-tag v="sem_plc"/></equal>	         
             </and>       
             <and>
                <equal caseless="yes"><var n="main-verb-sl"/><lit v="vuođđudit"/></equal>
                <equal><clip pos="1" side="tl" part="a_sem"/><lit-tag v="sem_plc"/></equal>	         
             </and>       
             <and>
                <equal caseless="yes"><var n="main-verb-sl"/><lit v="dubmet"/></equal>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="fengsel"/></equal>	         
             </and>       
             </or></test>
              <let>
                <var n="caseprep"/><lit v="i"/>
              </let>
            </when>
            <when c="ill is på">
              <test>
                <or>
                  <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ill-på"/></in>
                  <in caseless="yes"><var n="previous-nhead"/><list n="ill-på-head"/></in>
                    <equal caseless="yes"><var n="main-verb-sl"/><lit v="álgit"/></equal>
                    <equal caseless="yes"><var n="main-verb-sl"/><lit v="fokuseret"/></equal>
                    <equal caseless="yes"><var n="main-verb-sl"/><lit v="vuođđudit"/></equal>
                  <and>
                    <equal caseless="yes"><var n="main-verb-sl"/><lit v="ohcat"/></equal>
                    <or>
                    <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_pos"/></equal>
                    <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_edu"/></equal>
                    <in caseless="yes"><var n="previous-nhead_sem"/><list n="sem_edu"/></in>
                    </or>
                  </and>
                  <and>
                    <equal><var n="seen_num"/><lit-tag v="num"/></equal>
                    <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_time"/></in>
                    <not><equal caseless="yes"><var n="main-verb-sl"/><lit v="dubmet"/></equal></not>
                  </and>
                  <and>
                    <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_lang"/></in>
<!--                    <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal></not>  -->
                    <not><equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="sápmi"/></equal></not>
                    <not><equal><var n="main-verb-sl"/><lit v="viiddidit"/></equal></not>
                    <not><equal><var n="main-verb-sl"/><lit v="jorgalit"/></equal></not>
                    <not><equal><var n="main-verb-sl"/><lit v="rievdadit"/></equal></not>
                    <not><equal><var n="main-verb-sl"/><lit v="jorgalahttit"/></equal></not>
                    <not>
                    <in caseless="yes"><var n="previous-nhead"/><list n="sem_lang_lem"/></in>
                </not>
                  </and>
                  <and><or>
                    <equal><var n="main-verb-sl"/><lit v="bidjat"/></equal>
                    <equal><var n="main-verb-sl"/><lit v="ihtit"/></equal>
                    </or>
                    <not><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ill-i"/></in></not>
                  </and>
                </or>
              </test>
              <let>
                <var n="caseprep"/><lit v="på"/>
              </let>
            </when>
            <when c="ill is med">
              <test>
                <in caseless="yes"><var n="main-verb-sl"/><list n="ill-med-verbs"/></in>
              </test>
              <let>
                <var n="caseprep"/><lit v="med"/>
              </let>
            </when>
            <when c="ill is over">
              <test>
                    <equal><var n="main-verb-sl"/><lit v="beahttit"/></equal>
              </test>
              <let>
                <var n="caseprep"/><lit v="over"/>
              </let>
            </when>
            <when c="ill is for">
              <test><or>
                <and>
                  <or>
                <in caseless="yes"><var n="main-verb-sl"/><list n="ill-for-verbs"/></in>
                    <and>
                    <equal><var n="main-verb-sl"/><lit v="šaddat"/></equal>
               <not><in><clip pos="1" side="sl" part="a_sem"/><list n="sem_plc"/></in></not>
               <not><equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_build_org"/></equal></not>
               <not><equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_build"/></equal></not>
               <not><equal><clip pos="1" side="sl" part="lemh"/><lit v="giddagas"/></equal></not>
                    </and>
                    <in caseless="yes"><var n="previous-nhead"/><list n="ill-for-head"/></in>
                  </or>
                  <not><equal><var n="previous-nhead"/><lit v="utveksling"/></equal></not>
                  <not><equal><var n="previous-nhead"/><lit v="rettighet"/></equal></not>
                  <not><equal><var n="previous-nhead"/><lit v="rett"/></equal></not>
                  <not><equal><clip pos="1" side="sl" part="lemh"/><lit v="guhte"/></equal></not>
                </and>
                <and>
                <in caseless="yes"><var n="main-verb-sl"/><list n="ill-i-verbs"/></in>
              <equal><clip pos="1" side="tl" part="a_sem"/><lit-tag v="sem_hum"/></equal>	         
                </and></or>
              </test>
              <let>
                <var n="caseprep"/><lit v="for"/>
              </let>
            </when>
          </choose>
          <choose><when c="but even if the above tests matched, we can override to nil here:">
            <test>
              <or>
                <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="ill-NIL"/></in>
                <in caseless="yes"><var n="main-verb-sl"/><list n="ill-NIL-verbs"/></in>
              </or>
            </test>
            <let>
              <var n="caseprep"/><lit v=""/>
            </let>
          </when></choose>
        </when>
        <when c="om acc">
          <test><and><equal><clip pos="1" side="sl" part="case"/><lit-tag v="acc"/></equal>
          <equal><var n="main-verb-tl"/><lit v="be"/></equal>
         <equal><clip pos="1" side="tl" part="lemh"/><lit v="hjelp"/></equal>
        </and>   </test>
          <let>
            <var n="caseprep"/><lit v="om"/>
          </let>
        </when>
        <when c="på acc">
          <test><or>
          <equal><var n="main-verb-tl"/><lit v="fokusere"/></equal>
          <equal><var n="main-verb-tl"/><lit v="forske"/></equal>
          <equal><var n="main-verb-tl"/><lit v="stemme"/></equal>
     </or></test>
          <let>
            <var n="caseprep"/><lit v="på"/>
          </let>
        </when>
        <when c="på acc">
          <test>
          <equal><var n="main-verb-tl"/><lit v="protestere"/></equal>
          </test>
          <let>
            <var n="caseprep"/><lit v="mot"/>
          </let>
        </when>
        <when c="til acc">
          <test><and><equal><clip pos="1" side="sl" part="case"/><lit-tag v="acc"/></equal>
          <equal><var n="main-verb-tl"/><lit v="lytte"/></equal>
        </and>   </test>
          <let>
            <var n="caseprep"/><lit v="til"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal></test>
          <choose>
            <when c="The tag @N← is created by rules like NOM.GEN NOM.GEN NOM">
              <test><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@N←"/></equal></test>
              <choose>
                <when>
                  <test><in caseless="yes"><var n="previous-nhead"/><list n="gen-om-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="om"/>
                  </let>
                </when>
                <when>
                  <test><in caseless="yes"><var n="previous-nhead"/><list n="gen-av-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="av"/>
                  </let>
                </when>
                <when c="Guovdageainnu suohkana sátnejođiheaddji : ordføreren i Kautokeino kommune">
                  <test><or>
                  <in caseless="yes"><var n="previous-nhead"/><list n="gen-i-head"/></in>
                   <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_org"/></in>
                <in caseless="yes"><var n="previous-nhead"/><list n="ill-i-head"/></in>
                </or></test>
                  <let>
                    <var n="caseprep"/><lit v="i"/>
                  </let>
                </when>
                <when>
                  <test><in caseless="yes"><var n="previous-nhead"/><list n="gen-som-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="som"/>
                  </let>
                </when>
                <when>
                  <test><in caseless="yes"><var n="previous-nhead"/><list n="gen-for-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="for"/>
                  </let>
                </when>
                <when>
                  <test><in caseless="yes"><var n="previous-nhead"/><list n="gen-på-head"/></in></test>
                  <let>
                    <var n="caseprep"/><lit v="på"/>
                  </let>
                </when>
                <when>
                  <test><or>
                  <equal><clip pos="1" side="sl" part="lemh"/><lit v="bealli"/></equal>
                  <equal><clip pos="1" side="sl" part="lemh"/><lit v="guovlu"/></equal>
                  </or></test>
                  <let>
                    <var n="caseprep"/><lit v="fra"/>
                  </let>
                </when>
                <otherwise>
                  <let><var n="caseprep"/><lit v="til"/></let>
                </otherwise>
              </choose>
            </when>
            <otherwise>
              <choose>
                <when c="For when we output 'sin', when chunking doesn't match up">
                  <test><or>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→N"/></equal>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→A"/></equal>
                    <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SPRED"/></equal>
                  </or></test>
                  <let>
                    <var n="caseprep"/><lit v=""/>
                  </let>
                </when>
                <otherwise c="Not a modifier: neither prep nor genitive case">
                  <let><var n="caseprep"/><lit v=""/></let>
                  <choose><when>
                    <test><and>
                      <equal><clip pos="1" side="tl" part="case"/><lit-tag v="gen"/></equal>
                      <not><equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal></not>
                    </and></test>
                    <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
                  </when></choose>
                </otherwise>
              </choose>
            </otherwise>
        </choose>
        </when>
      </choose>

                  <!-- <out><lit v="let previous-nhead "/><clip pos="1" side="tl" part="lemh"/></out> -->
   <let><var n="previous-nhead"/><clip pos="1" side="tl" part="lemh"/></let>
   <let><var n="previous-nhead_sem"/><clip pos="1" side="sl" part="a_sem"/></let>
              <choose>
                <when c="object">
                  <test><or>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←OBJ"/></equal>
                    <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@OBJ→"/></equal>
                  </or></test>
                  <let>
        <var n="previous-obj"/><clip pos="1" side="tl" part="lemh"/>
                  </let>
                </when> </choose>

      <!-- Now create it for outputting: -->
      <choose>
        <when>
          <test><not><equal><var n="caseprep"/><lit v=""/></equal></not></test>
          <choose>
            <when c="If we're inserting something as the first word of a sentence, we probably want titlecase
                     Note: set_caseFirstWord changes from 'init' to 'aa' if the first word of the sentence was a lowercase word">
              <test><equal caseless="yes"><var n="caseFirstWord"/><lit v="init"/></equal></test>
              <let><var n="caseFirstWord"/><lit v="Aa"/></let>
            </when>
          </choose>
          <let><var n="caseprep_c_name"/><lit v="caseprep"/></let>
          <modify-case><var n="caseprep_c_name"/><var n="caseFirstWord"/></modify-case>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <var n="caseprep_c_name"/>
              <lit-tag v="PR"/>
              <clip pos="1" side="tl" part="case"/>
              <lit v="{^"/>
              <var n="caseprep"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          <let><var n="caseFirstWord"/><lit v="aa"/></let>
        </when>
      </choose>
      <!-- Ensure caseFirstWord is no longer 'init', but still has the correct casing: -->
      <let><var n="tmp"/><var n="caseFirstWord"/></let>
      <let><var n="caseFirstWord"/><lit v="aa"/></let>
      <modify-case><var n="caseFirstWord"/><var n="tmp"/></modify-case>
    </def-macro>

    <def-macro n="modify_prn_case" npar="1"
               c="arg.1: Pron (which might end up as a nob determiner)
                  –––––
                  If pron is the chunk head, make sure to call this after set_caseprep!
                  - Personal pronouns can only be nom or acc (note: ←hab→ / @-FSUBJ→ / @-FOBJ→ to nom),
                  - Demonstrative and indefinites can only be gen in nob,
                  - det.pos (personal genitives) have no case, but this is handled in transfer rules.">
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.ref"/></equal></test>
          <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.pers"/></equal></test>
          <choose>
            <when>
              <test><or>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FSUBJ→"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FOBJ→"/></equal>
                <equal><clip pos="1" side="sl" part="hab"/><lit-tag v="←hab→"/></equal>
                <and>           <!-- «mus lea» now tagged like this: -->
                  <or>
                    <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn"/></equal>
                    <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
                  </or>
                  <equal><clip pos="1" side="tl" part="case"/><lit-tag v="loc"/></equal>
                  <or>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL→"/></equal>
                     <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
                    <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal>
                   <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
                   <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                   <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal>
                  </or>
                </and>
              </or></test>
              <let><clip pos="1" side="tl" part="case"/><lit-tag v="nom"/></let>
            </when>
            <when>
              <test><not>
                <or>
                  <equal><clip pos="1" side="sl" part="case"/><lit-tag v="nom"/></equal>
                  <equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal>
                </or>
              </not></test>
              <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>
            </when>
          </choose>
        </when>
        <otherwise>
          <choose>
           <when>
            <test>
              <equal><clip pos="1" side="tl" part="lemh"/><lit v="de fleste"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
          </when>
         <when>
            <test>
              <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal></not>
            </test>
            <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>
          </when>
          </choose>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_prn_gen_nbr_art2" npar="2"
               c="arg.1: prn/det, arg.2: noun (or, the lu we want to base prn/det gen/nbr on)
                  –––––
                  Note: lone pronouns/determiners just keep GD/ND, this might change
                  in interchunk (postchunk cleans it up if not).">
      <choose c="NUMBER">
        <when c="itg never has number">
          <test><equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.itg"/></equal></test>
          <let><var n="prn_nbr"/><lit v=""/></let>
        </when>
        <when c="ref p3 has sp">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.ref"/></equal>
            <equal><clip pos="1" side="tl" part="pers"/><lit-tag v="p3"/></equal>
          </and></test>
          <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
        </when>
        <when c="sg/pl">
          <test><or>
            <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
            <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
          </or></test>
          <let><var n="prn_nbr"/><clip pos="2" side="tl" part="nbr"/></let>
        </when>
        <when c="Assume we can generate all sme dualis forms">
          <test><equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="du"/></equal></test>
          <let><var n="prn_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when>
        <otherwise>
          <let><var n="prn_nbr"/><lit-tag v="sg"/></let>
        </otherwise>
      </choose>

      <choose c="GENDER">
        <when c="itg never has gender">
          <test><equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.itg"/></equal></test>
          <let><var n="prn_gen"/><lit v=""/></let>
        </when>
        <when c="ref p3 has un">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.ref"/></equal>
            <equal><clip pos="1" side="tl" part="pers"/><lit-tag v="p3"/></equal>
          </and></test>
          <let><var n="prn_nbr"/><lit-tag v="un"/></let>
        </when>
        <when c="pl are always un">
          <test><equal><var n="prn_nbr"/><lit-tag v="pl"/></equal></test>
          <let><var n="prn_gen"/><lit-tag v="un"/></let>
        </when>
        <when c="du are always mf">
          <test><equal><var n="prn_nbr"/><lit-tag v="du"/></equal></test>
          <let><var n="prn_gen"/><lit-tag v="mf"/></let>
        </when>
        <otherwise c="sg">
          <let><var n="prn_gen"/><clip pos="2" side="tl" part="gen"/></let>
          <choose><when>
            <test><or>
              <equal><var n="prn_gen"/><lit v=""/></equal>
              <equal><var n="prn_gen"/><lit-tag v="un"/></equal>
            </or></test>
            <let><var n="prn_gen"/><lit-tag v="m"/></let>
          </when></choose>
          <!-- TODO: Whole lot of lexical exceptions here -->
        </otherwise>
      </choose>

      <choose c="DEFNES">
        <when>
          <test><equal><clip pos="2" side="tl" part="art"/><lit v="DD"/></equal></test>
          <let><clip pos="2" side="tl" part="art"/><lit-tag v="3"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="guess_animacy" npar="1"
               c="arg.1: Chunk 'head'.">
      <choose c="Put a pers tag on it if it's a gendered proper noun
                 TODO: list of animate common nouns?">
        <when>
          <test><or>
            <and>
              <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
              <in><clip pos="1" side="tl" part="gen"/><list n="pers_genders"/></in>
            </and>
            <and>
              <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n"/></begins-with>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="pers_nouns"/></in>
            </and>
          </or></test>
          <let><var n="c_animacy"/><lit-tag v="pers-pro"/></let>
        </when>
        <otherwise>
          <let><var n="c_animacy"/><lit-tag v="agreem-pro"/></let>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_c_gen_nbr" npar="1"
               c="arg.1: Chunk 'head'.
                  Make sure we have GD or ND if no gen or num given.">
      <let><var n="c_gen"/><clip pos="1" side="tl" part="gen"/></let>
      <let><var n="c_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
      <choose c="If chunk head is adj, we probably want nt, but do GD in case t2x wants to change it.
                 (Could do non-sint→GD in bidix, but we don't prepend more/most until t4x, meaning the
                 adj has to have a comp/sup tagset until t4x.)">
        <when>
          <test>
            <or>
              <equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal> <!-- non-sint is turned pos -->
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="pst"/></equal>
            </or>
          </test>
          <let><var n="c_gen"/><lit-tag v="GD"/></let>
        </when>
      </choose>
      <choose>
        <when>
          <test><equal><var n="c_gen"/><lit v=""/></equal></test>
          <choose>
            <when>
              <test><equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.top"/></equal></test>
              <let><var n="c_gen"/><lit-tag v="nt"/></let>
            </when>
            <otherwise>
              <let><var n="c_gen"/><lit-tag v="GD"/></let>
            </otherwise>
          </choose>
        </when>
      </choose>
      <choose><when>
        <test><equal><var n="c_nbr"/><lit v=""/></equal></test>
        <let><var n="c_nbr"/><lit-tag v="ND"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="copy_syn_label" npar="2"
               c="arg.1: might want a syn_label, arg.2: might have syn_label
                  –––––
                  Used in compounds, where typically the left part gets the syn_label while
                  the right one needs it.">
      <choose><when>
        <test><equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal></test>
        <let>
          <clip pos="1" side="sl" part="tags"/>
          <concat>
            <clip pos="1" side="sl" part="tags"/>
            <clip pos="2" side="sl" part="syn_label"/>
          </concat>
        </let>
      </when></choose>
    </def-macro>

    <def-macro n="clean_cmp" npar="1"
               c="arg.1: non-final noun in a compound
                  –––––
                  The sp ones in nob.dix never have defnes tags.
                  Regular nouns are always sg.ind when non-final in compounds.
                  Bidix often does not supply defnes/number, making clip fail; in that case, append to tags">
      <choose c="Only run on compound parts!">
        <when>
          <test><not><equal><clip pos="1" side="sl" part="a_cmp"/><lit v=""/></equal></not></test>
          <choose c="cmp tags">
            <when c="Remove dash from spelled out numbers preceding non-numbers (tiåret, not ti-året)">
              <test><and>
                <equal><clip pos="1" side="sl" part="a_num"/><lit-tag v="num"/></equal>
                <equal><clip pos="1" side="sl" part="a_cmp"/><lit-tag v="cmp_splitr"/></equal>
              </and></test>
              <let><clip pos="1" side="tl" part="a_cmp"/><lit v=""/></let>
            </when>
            <when>
              <test><equal><clip pos="1" side="sl" part="a_cmp"/><lit-tag v="cmp_hyph.cmp"/></equal></test>
              <let><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="guio"/></let>
            </when>
          </choose>
          <choose c="nbr/art tags">
            <when c="noun sp's have no defnes">
              <test><and>
                <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n"/></begins-with>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sp"/></equal>
              </and></test>
              <let><clip pos="1" side="tl" part="art"/><lit v=""/></let>
            </when>
            <when c="other noun/adj's as compound parts fallback to sg.ind">
              <test><or>
                <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n"/></begins-with>
                <begins-with><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></begins-with>
              </or></test>
              <choose><when>
                <test><equal><clip pos="1" side="tl" part="nbr"/><lit v=""/></equal></test>
                <let><clip pos="1" side="tl" part="tags"/><concat><clip pos="1" side="tl" part="tags"/><lit-tag v="sg"/></concat></let>
              </when></choose>
              <choose><when>
                <test><equal><clip pos="1" side="tl" part="art"/><lit v=""/></equal></test>
                <let><clip pos="1" side="tl" part="tags"/><concat><clip pos="1" side="tl" part="tags"/><lit-tag v="ind"/></concat></let>
              </when></choose>
            </when>
          </choose>
          <let><var n="defnes"/><clip pos="1" side="tl" part="art"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_defnes" npar="1"
               c="arg.1: noun/adj, with syn_label
                  –––––
                  Default to indefinite, guess definite for certain GF's, genitives, ...
                  Locatives only indefinite in first position with leat
                  Adjectives given to this macro will be (predicative and) indefinite
                   (or do we ever get 'det er den røde.Def' here?)">
      <let><var n="defnes"/><lit-tag v="ind"/></let>
      <choose><when c="definite if this all matches:">
        <test>
          <and>
            <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@HNOUN"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@VOC"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="a_acr"/><lit-tag v="acr"/></equal></not>
            <not><equal><clip pos="1" side="tl" part="a_count"/><lit-tag v="unc"/></equal></not>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="ekstra"/></equal></not>
            <not><equal><var n="main-verb-tl"/><lit v="søke"/></equal></not>
            <not><and>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="same"/></equal>
            <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←OBJ"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@OBJ→"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@F←OBJ"/></equal></not>
            <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FOBJ→"/></equal></not>
            </and></not>
            <not><and>
            <equal><clip pos="1" side="tl" part="a_sem"/><lit-tag v="sem_domain"/></equal>
            <not><equal><clip pos="1" side="tl" part="case"/><lit-tag v="gen"/></equal></not>
            </and></not>
            <not><and>
            <equal><clip pos="1" side="tl" part="lemh"/><lit v="liv"/></equal>
            <equal><var n="main-verb-tl"/><lit v="blåse"/></equal>
            </and></not>
            <not>
            <equal><clip pos="1" side="sl" part="lemh"/><lit v="miljovdnabealli"/></equal>
            </not>

            <not><equal><clip pos="1" side="sl" part="ext"/><lit-tag v="←ext→"/></equal></not>
            <not><and>
              <equal><clip pos="1" side="sl" part="lemh"/><lit v="ságat"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="ill"/></equal>
            </and></not>
            <not><and>
              <equal><clip pos="1" side="tl" part="lemh"/><lit v="samarbeid"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="loc"/></equal>
            </and></not>
            <not><and>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="noun.pseudo-prop"/></in>
            </and></not>
            <equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal>
           <not><and>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="nom"/></equal>
            <not><equal><var n="main-verb-tl"/><lit v=""/></equal></not>
             <not><in caseless="yes"><var n="main-verb-sl"/><list n="not-det-verbs"/></in></not>
            </and></not>
<!--            <not><and>
            <equal><var n="main-verb-pasv"/><lit v="pasv"/></equal>
            <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SUBJ"/></equal>
            </and></not>  -->
<!--	    <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="samisk"/></equal></not> -->
            <or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@OBJ→"/></equal>
              <equal><clip pos="1" side="sl" part="hab"/><lit-tag v="←hab→"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@SUBJ→"/></equal>
               <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SUBJ"/></equal>  
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="loc"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="ill"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="com"/></equal>
              <and>
<!--                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>   -->
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←PPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←OPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ine"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal></not>
                <!-- syn_label!=@←ADVL conflicts with 'Son ii dáidde
                     jienastit Bargiidbellodaga(def)' but is necessary
                     for 'Doppe son orui vahku(ind)' -->
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@X"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="ess"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal></not>
              </and>
            </or>
             <not><and>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
                <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_mat"/></in>
                </and></not>
          </and>
        </test>
        <let><var n="defnes"/><lit-tag v="def"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_defnes2" npar="2"
               c="arg.1: noun, arg.2: determiner (or adj, but only if no det).
                  With 'det (adj) nom' the noun is:
                  * indefinite if the determiner is a possessive
                  * definite if it is a demonstrative
                  With superlatives, it's always definite.
                  Otherwise, keep old defnes.
                  Assumes that clean_a_det has been called.">
      <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
      <choose>
        <when c="Common co-occurrences first">
          <test><in>
            <concat><clip pos="2" side="tl" part="lemh"/><lit v=" "/><clip pos="1" side="tl" part="lemh"/></concat>
            <list n="bigrams-def"/>
          </in></test>
          <let><var n="defnes"/><lit-tag v="def"/></let>
        </when>
        <when>
          <test><or><equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@HNOUN"/></equal>
          <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="noun.pseudo-prop"/></in></or></test>
          <let><var n="defnes"/><lit-tag v="ind"/></let>
       </when>
        <when>
          <test><and>
            <or>
              <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="ord.pst"/></equal>
              <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="sup"/></equal>
              <and>
              <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
            <not><equal><clip pos="2" side="sl" part="lemh"/><lit v="eará"/></equal></not>
              </and>
              <equal><clip pos="2" side="tl" part="lemh"/><lit v="eneste"/></equal>
            </or>
            <not><equal><clip pos="2" side="tl" part="lemh"/><lit v="slik"/></equal></not>
            <not><ends-with><clip pos="2" side="tl" part="lemh"/><lit v="og en halv"/></ends-with></not>
          </and></test>
          <let><var n="defnes"/><lit-tag v="def"/></let>
        </when>
        <when>
          <test><or>
            <ends-with><clip pos="2" side="tl" part="lemh"/><lit v="og en halv"/></ends-with>
            <equal><clip pos="2" side="sl" part="lemh"/><lit v="eará"/></equal>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.qnt"/></equal>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.itg"/></equal>
            <equal><clip pos="2" side="tl" part="lemh"/><lit v="slik"/></equal>
            <equal><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj"/></equal>
            <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="comp"/></equal>
            <and>
              <equal><clip pos="2" side="tl" part="prop_type"/><lit-tag v="top"/></equal>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="no-gen-after-prop"/></in>
            </and>
            <and>
              <equal><clip pos="2" side="tl" part="prop_type"/><lit-tag v="top"/></equal>
              <in><clip pos="1" side="sl" part="a_sem"/><list n="sem_org"/></in>
            </and>
            <and>
              <equal><clip pos="2" side="tl" part="case"/><lit-tag v="gen"/></equal>
              <not><equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal></not>
            </and>
            <equal><clip pos="2" side="tl" part="lemh"/><lit v="mye"/></equal>
            <equal><clip pos="2" side="tl" part="lemh"/><lit v="mange"/></equal>
            <equal><clip pos="2" side="tl" part="lemh"/><lit v="hvilken"/></equal>
          </or></test>
          <let><var n="defnes"/><lit-tag v="ind"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="clean_det" npar="1"
               c="arg.1: determiner (in nob, was prn in sme).
                  Changes prn.gen into det.pos
                  –––––
                  If pron is the chunk head, make sure to call this AFTER set_caseprep!">
      <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>
      <!-- TODO: maybe a macro / list in case more such: -->
      <choose>
        <when>
          <test><and>
            <equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="enhver"/></equal>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="ill"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="gen"/><lit-tag v="m"/></let>
        </when>
     </choose>
      <choose c="TODO: Might want to just make the tl ambiguous in bidix between prn.gen.@→P and det.pos instead?">
        <when>
          <test><and>
            <begins-with><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn"/></begins-with>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="gen"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_prn"/><lit-tag v="det.pos"/></let>
          <choose><when c="With det.pos, the *owner* gen/nbr is based on lemma">
            <test><and>
              <equal><clip pos="1" side="tl" part="lemh"/><lit v="han"/></equal>
              <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="GD_pers"/></equal>
            </and></test>
            <let><clip pos="1" side="tl" part="lemh"/><lit v="h_ns"/></let>
          </when></choose>
        </when>
     </choose>
     <choose><when>
       <test><equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal></test>
       <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
       <let><clip pos="1" side="tl" part="pers"/><lit v=""/></let>
       <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="ND"/></let>
       <let><clip pos="1" side="tl" part="gen"/><lit-tag v="GD"/></let>
     </when></choose>

    </def-macro>

    <def-macro n="maybe_det_nbr_to_adj" npar="2"
               c="arg.1: det, arg.1: adjective
                  –––––
                  Can be useful even if there's a noun, since noun may be sp.
                  ">
      <choose c="For positives, if use any number on ND">
        <when>
          <test><and>
            <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="ND"/></equal>
            <or>
              <equal><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></equal>
              <ends-with><clip pos="2" side="tl" part="grau"/><lit-tag v="pst"/></ends-with>
            </or>
            <or>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
            </or>
          </and></test>
          <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="modify_adj_gen_nbr" npar="2"
               c="arg.1: noun, arg.2: adjective
                  –––––
                  ">
      <choose><when c="Fix possibly empty plural gender">
        <test><and>
          <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
          <equal><clip pos="1" side="tl" part="gen"/><lit v=""/></equal>
        </and></test>
        <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="un.pl"/></let>
      </when></choose>
      <choose><when c="The rest is just for non-compound adj's:">
        <test><equal><clip pos="2" side="sl" part="a_cmp"/><lit v=""/></equal></test>
        <choose c="bovdejuvvon guossit : inviterte gjester">
          <when>
            <test><equal><clip pos="2" side="sl" part="temps"/><lit-tag v="prfprc"/></equal></test>
            <choose>
            <when c="def">
            <test><or>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="loc"/></equal>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="acc"/></equal>
            </or></test>
            <let><clip pos="2" side="tl" part="tags"/><lit-tag v="adj.pp.sg" /></let>
          </when>
          <otherwise c="ind">
            <let><clip pos="2" side="tl" part="tags"/><lit-tag v="adj.pp.GD.sg" /></let>
          </otherwise>
            </choose>
          </when>
        </choose>
        <choose c="For positives, copy noun number over (if sg/pl).">
          <when>
            <test><and>
              <or>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
              </or>
              <or>
                <equal><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></equal>
                <ends-with><clip pos="2" side="tl" part="grau"/><lit-tag v="pst"/></ends-with>
              </or>
            </and></test>
            <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
          </when>
        </choose>
        <choose c="When GD, nob adj's are either nt or mf">
          <when>
            <test><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal></test>
            <choose c="Try to copy from noun">
              <when><test><in><clip pos="1" side="tl" part="gen"/><list n="adj-genders"/></in></test>
              <let><clip pos="2" side="tl" part="gen"/><clip pos="1" side="tl" part="gen"/></let>
              </when>
            </choose>
            <choose c="Default to mf if still unset">
              <when>
                <test>
                  <not><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="nt"/></equal></not>
                </test>
                <let><clip pos="2" side="tl" part="gen"/><lit-tag v="mf"/></let>
              </when>
            </choose>
          </when>
        </choose>
        <choose c="... but when @→A, use sg.nt">
          <when>
            <test><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→A"/></equal></test>
            <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></let>
            <let><clip pos="2" side="tl" part="gen"/><lit-tag v="nt"/></let>
          </when>
        </choose>
      </when></choose>
      <call-macro n="set_neverdet"><with-param pos="2"/></call-macro>
    </def-macro>

    <def-macro n="set_c_syn" npar="1"
               c="We always have '3' as the defnes position in chunks, following chunk tag and syn_label,
                  this macro just ensures that there _is_ a syn_label.">
      <!-- TODO: remove this and assume functions.cg3 always does what it should? -->
      <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
      <choose>
        <when>
          <test><equal><var n="c_syn"/><lit v=""/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@X"/></let>
        </when>
        <when>
          <test> <or>
          <not><equal><clip pos="1" side="sl" part="ext"/><lit v=""/></equal></not>
          <and>
          <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SUBJ"/></equal>
          <equal><var n="main-verb-pasv"/><lit v="pasv"/></equal>
          <not><in caseless="yes"><var n="main-verb-sl"/><list n="not-det-verbs"/></in></not>
          </and>
          </or></test>
          <let><var n="c_syn"/><lit-tag v="@←SUBJext"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_verb-lemma" npar="1">
      <choose>
         <when c="M[V] set main-verb-pasv">
          <test><and>
            <or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FMAINV"/></equal></or>
              <equal><clip pos="1" side="tl" part="voice"/><lit-tag v="pasv"/></equal>
         </and>
          </test>
          <let><var n="main-verb-pasv"/><lit v="pasv"/></let>
        </when>
      </choose>
      <choose>
        <when c="M[V] set main-verb-sl">
          <test>
            <and><or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FMAINV"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SUBJ"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@X"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←OBJ"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@A←"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal> <!-- vabess -->
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@N←"/></equal>
              </or>
              <equal><clip pos="1" side="sl" part="a_verb"/><lit-tag v="vblex"/></equal>
              <not><equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_nomact"/></equal></not>
            </and>
          </test>
          <let><var n="main-verb-sl"/><clip pos="1" side="sl" part="lemh"/></let>
          <let><var n="main-verb-tl"/><clip pos="1" side="tl" part="lemh"/></let>
        </when>
      </choose>
      <choose>
        <when c="M[V] set advl-verbal-main-verb-sl">
          <test><and><or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←OBJ"/></equal>
              </or>
              <equal><clip pos="1" side="sl" part="a_verb"/><lit-tag v="vblex"/></equal>
              <not><equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_nomact"/></equal></not>
            </and>
          </test>
          <let><var n="advl-verb-sl"/><clip pos="1" side="sl" part="lemh"/></let>
        </when>
      </choose>
      <choose>
       <when c="M[V] set aux-verb-lemma">
          <test>
            <and>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FAUXV"/></equal>
              <equal><clip pos="1" side="sl" part="a_verb"/><lit-tag v="vblex"/></equal>
            </and>
          </test>
          <let><var n="aux-verb-sl"/><clip pos="1" side="sl" part="lemh"/></let>
          <let><var n="aux-verb-tl"/><clip pos="1" side="tl" part="lemh"/></let>
        </when>
        <when c="M[V] set aux-verb lemma, nbr and pers">
          <test>
            <and>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FAUXV"/></equal>
              <equal><clip pos="1" side="sl" part="a_verb"/><lit-tag v="vblex"/></equal>
            </and>
          </test>
          <let><var n="aux-verb-sl"/><clip pos="1" side="sl" part="lemh"/></let>
          <let><var n="aux-verb-tl"/><clip pos="1" side="tl" part="lemh"/></let>
          <let><var n="vfin-pers"/><clip pos="1" side="sl" part="pers"/></let>
          <let><var n="vfin-nbr"/><clip pos="1" side="sl" part="nbr"/></let>
          <let><var n="vfin-temps"/><clip pos="1" side="sl" part="fintemps"/></let>
        </when>
        <when c="M[V] set fin-verb nbr and pers">
          <test>
            <and>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FMAINV"/></equal>
              <equal><clip pos="1" side="sl" part="a_verb"/><lit-tag v="vblex"/></equal>
            </and>
          </test>
          <let><var n="vfin-pers"/><clip pos="1" side="sl" part="pers"/></let>
          <let><var n="vfin-nbr"/><clip pos="1" side="sl" part="nbr"/></let>
          <let><var n="vfin-temps"/><clip pos="1" side="sl" part="fintemps"/></let>
        </when>
      </choose>
    </def-macro>


    <def-macro n="append_pre-nom" npar="2"
               c="arg.1: nom head, arg.2: pre-nom (e.g. genitive-noun, adj)
                  –––––
                  Appends arg2 to the pre-nom variable.
                  ASSUMES defnes HAS BEEN SET!
                  ASSUMES clean_cmp HAS BEEN RUN IF IT'S A COMPOUND!
                  ASSUMES b pos=N IS APPENDED AFTER CALLING THIS!">
      <choose>
        <when c="Adjective, e.g. sápmi.n.sg.gen → samisk.adj">
          <test><or>
          <not><equal><clip pos="2" side="tl" part="a_adj"/><lit v=""/></equal></not>
          <equal><clip pos="2" side="sl" part="temps"/><lit-tag v="prfprc"/></equal>
        </or></test>
          <call-macro n="modify_adj_gen_nbr"><with-param pos="1"/><with-param pos="2"/></call-macro>
          <choose>
            <when>
              <test><and><equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
              <equal><clip pos="2" side="tl" part="a_cmp"/><lit v=""/></equal>
              <equal><clip pos="2" side="tl" part="gen"/><lit v=""/></equal>
              </and></test>
              <let><var n="adj_gen"/><lit-tag v="un"/></let>
            </when>
            <otherwise><let><var n="adj_gen"/><lit v=""/></let></otherwise>
          </choose>
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <var n="adj_gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
          <choose>
            <when>
              <test><ends-with><clip pos="2" side="tl" part="a_cmp"/><lit-tag v="guio"/></ends-with></test>
              <append n="pre-nom"><lit v="-"/></append>
            </when>
          </choose>
        </when>
        <when c="Adverb">
          <test><begins-with><clip pos="2" side="tl" part="a_adv"/><lit-tag v="adv"/></begins-with></test>
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adv"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
          <choose>
            <when>
              <test><ends-with><clip pos="2" side="tl" part="a_cmp"/><lit-tag v="guio"/></ends-with></test>
              <append n="pre-nom"><lit v="-"/></append>
            </when>
          </choose>
        </when>
        <when c="Preposition">
          <test><equal><clip pos="2" side="tl" part="a_prep"/><lit-tag v="pr"/></equal></test>
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_prep"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
          <choose>
            <when>
              <test><ends-with><clip pos="2" side="tl" part="a_cmp"/><lit-tag v="guio"/></ends-with></test>
              <append n="pre-nom"><lit v="-"/></append>
            </when>
          </choose>
        </when>
        <when c="Number/det.qnt">
          <test><not><equal><clip pos="2" side="tl" part="a_num"/><lit v=""/></equal></not></test>
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
        </when>
        <when c="Determiner">
          <test><or>
            <not><equal><clip pos="2" side="tl" part="a_det"/><lit v=""/></equal></not>
            <not><equal><clip pos="2" side="tl" part="a_prn"/><lit v=""/></equal></not>
          </or></test>
          <call-macro n="clean_det"><with-param pos="2"/></call-macro>
          <call-macro n="set_prn_gen_nbr_art2"><with-param pos="2"/><with-param pos="1"/></call-macro>
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <clip pos="2" side="tl" part="a_prn"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
        </when>
        <when c="Proper noun – no nbr/defnes">
          <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <choose><when c="Avoid «Tromsøs kommune»">
            <test>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="no-gen-after-prop"/></in>
            </test>
            <let><clip pos="2" side="tl" part="gen-case"/><lit v=""/></let>
          </when></choose>
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
        </when>
        <otherwise c="Noun (we hope)">
          <append n="pre-nom">
            <concat>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            </concat>
          </append>
        </otherwise>
      </choose>
    </def-macro>

    <def-macro n="set_neverdet" npar="1">
      <choose><when>
        <test>
	  <or>
	    <and>
          <in><clip pos="1" side="tl" part="a_sem"/><list n="determinerless_sem"/></in>
          <not><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="determiner-although-determinerless_sem"/></in></not>
            </and>
	    <equal><clip pos="1" side="sl" part="lemh"/><lit v="olu"/></equal>
	    <equal><clip pos="1" side="sl" part="lemh"/><lit v="ollu"/></equal>
	    <in><clip pos="1" side="tl" part="lemh"/><list n="determinerless_lem"/></in>
	  </or>
	</test>
        <let><var n="c_neverdet"/><lit-tag v="neverdet"/></let>
      </when></choose>
      <append n="c_neverdet"><clip pos="1" side="tl" part="a_maydetind"/></append>
    </def-macro>

    <!-- Output macros: -->

    <def-macro n="out_nom" npar="1"
               c="arg.1: noun
                  –––––
                  ASSUMES THAT pre-nom, c_name, defnes AND caseFirstWord HAVE BEEN SET!
                  This macro is used to output nominal heads, possibly prepended by determiners
                  or adjectives (stored in pre-nom). It uses the case of the argument to find the
                  caseprep, outputting this before any det/adj's. The resulting chunk has the
                  syn_label of the nominal.
                  Removes number from proper noun.">

      <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
      <out><var n="caseprep"/></out>

      <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
      <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
      <choose>
        <when c="add sg to essive">
          <test><equal><clip pos="1" side="tl" part="case"/><lit-tag v="ess"/></equal></test>
          <let>
            <clip pos="1" side="tl" part="tags"/>
            <concat>
              <clip pos="1" side="tl" part="tags"/>
              <lit-tag v="sg"/>
            </concat>
          </let>
        </when>
      </choose>

      <append n="c_name"><lit v="nom"/></append>

      <choose>
        <when c="tl PoS is deverbal noun">
          <test><not><equal><clip pos="1" side="sl" part="a_der_v2n"/><lit v=""/></equal></not></test>

          <choose>
            <when>
              <test><equal><clip pos="1" side="sl" part="a_der_v2n"/><lit-tag v="der_nomag"/></equal></test>
              <let><var n="n_lem"/><lit v="er"/></let>
            </when>
            <otherwise>
              <let><var n="n_lem"/><lit v="ing"/></let>
            </otherwise>
          </choose>

          <let><var n="n_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
          <choose><when>
            <test><equal><clip pos="1" side="tl" part="nbr"/><lit v=""/></equal></test>
            <let><var n="n_nbr"/><lit-tag v="sg"/></let>
          </when></choose>

          <let><var n="c_def_pos"/><lit-tag v="3"/></let>
          <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="a_count"/></tag>
                <tag><var n="c_animacy"/></tag>
              </tags>
              <var n="pre-nom"/>
              <mlu>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <clip pos="1" side="tl" part="a_pstv"/>
                  <clip pos="1" side="tl" part="temps"/>
                  <clip pos="1" side="tl" part="voice"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
                <lu>
                  <var n="n_lem"/>
                  <clip pos="1" side="tl" part="a_nom"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <var n="n_nbr"/>
                  <var n="c_def_pos"/>
                  <clip pos="1" side="tl" part="gen-case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </mlu>
            </chunk>
          </out>
        </when>

        <when c="tl PoS is verb">
          <test><equal><clip pos="1" side="tl" part="a_verb"/><lit-tag v="vblex"/></equal></test>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord"
                   c="The tag order corresponds with nouns, to make c_def_pos (e.g. on pre-nominals) work.">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_verb"/>
                <clip pos="1" side="tl" part="a_pstv"/>
                <clip pos="1" side="tl" part="temps"/>
                <clip pos="1" side="tl" part="voice"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>

        <when c="tl PoS is an adv (ie. V.Der2.Actor.N, but bidix changed lemma PoS to an adv)">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal>
            <not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not>
          </and></test>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord"
                   c="The tag order corresponds with nouns, to make c_def_pos (e.g. on pre-nominals) work.">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adv"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <when c="tl PoS is det ">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal>
            <not><equal><clip pos="1" side="tl" part="a_det"/><lit v=""/></equal></not>
          </and></test>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                 <tag><lit-tag v="SN"/></tag>
                 <tag><var n="c_syn"/></tag>
	             <tag><clip pos="1" side="sl" part="hab"/></tag>
                 <tag><clip pos="1" side="tl" part="pers"/></tag>
                 <tag><clip pos="1" side="tl" part="gen"/></tag>
                 <tag><clip pos="1" side="tl" part="nbr"/></tag>
                 <tag><clip pos="1" side="sl" part="case"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>

        <when c="tl PoS is an adj.sg/pl (ie. V.Der2.Actor.N, but bidix changed lemma PoS to an adj)
                 Just output pst ind; TODO: different bidix verb pardef for these PoS changes.">
          <test><and>
            <equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal>
            <or>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
              <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="ND"/></equal>
            </or>
            <not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not>
          </and></test>
          <choose><when>
            <test><equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="ND"/></equal></test>
            <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
          </when></choose>
          <choose>
            <when>
              <test><equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal></test>
              <let><var n="adj_gen"/><lit-tag v="mf"/></let>
            </when>
            <otherwise><let><var n="adj_gen"/><lit-tag v="un"/></let></otherwise>
          </choose>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord"
                   c="The tag order corresponds with nouns, to make c_def_pos (e.g. on pre-nominals) work.">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adj-pure"/>
                <lit-tag v="pst"/>
                <var n="adj_gen"/>
                <clip pos="1" side="tl" part="nbr"/>
                <lit-tag v="ind"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>

        <when c="cmp_splitr → sg.ind.guio (split compounds)
                 eanan-(cmp_splitr) ja luonddudoahpagiid → jord-(sg.ind) og naturfagord">
          <test><equal><clip pos="1" side="sl" part="a_cmp"/><lit-tag v="cmp_splitr"/></equal></test>
          <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><lit-tag v="ind"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><lit-tag v="sg"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="a_count"/></tag>
                <tag><var n="c_animacy"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_nom"/>
                <clip pos="1" side="tl" part="gen"/>
                <lit-tag v="sg.ind.guio"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>

        <otherwise c="Regular Noun to Noun">
          <let><var n="n_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
          <let><var n="c_def_pos"/><lit-tag v="3"/></let>
          <choose c="Tag cleanup first">
            <when c="np's and acr's have no number nor defnes:">
              <test><or>
                <begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
                <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="n.acr"/></equal>
              </or></test>
              <let><var n="n_nbr"/><lit v=""/></let>
              <let><var n="c_def_pos"/><lit v=""/></let>
            </when>
            <when c="collective mf's always have pl as number:">
              <test><and>
                <equal><clip pos="1" side="tl" part="a_count"/><lit-tag v="coll"/></equal>
                <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="mf"/></equal>
              </and></test>
              <let><var n="n_nbr"/><lit-tag v="pl"/></let>
            </when>
            <when c="other mf's always have sp as number:">
              <test><equal><clip pos="1" side="tl" part="gen"/><lit-tag v="mf"/></equal></test>
              <let><var n="n_nbr"/><lit-tag v="sp"/></let>
            </when>
            <when c="Other genders default to sg if unspecified:">
              <test><equal><clip pos="1" side="tl" part="nbr"/><lit v=""/></equal></test>
              <let><var n="n_nbr"/><lit-tag v="sg"/></let>
            </when>
          </choose>
          <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
          <call-macro n="set_neverdet"><with-param pos="1"/></call-macro>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="sl" part="hab"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="a_count"/></tag>
                <tag><var n="c_animacy"/></tag>
                <tag><var n="c_neverdet"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_nom"/>
                <clip pos="1" side="tl" part="gen"/>
                <var n="n_nbr"/>
                <var n="c_def_pos"/>
                <clip pos="1" side="tl" part="gen-case"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </otherwise>
      </choose>
      <let><var n="pre-nom"/><lit v=""/></let>
      <let><var n="c_neverdet"/><lit v=""/></let>
    </def-macro>


    <def-macro n="out_verb" npar="1"
               c="arg.1: verb
                  –––––
                  ASSUMES THAT pre-verb, c_name AND caseFirstWord HAVE BEEN SET!
                  This macro is used to output verbal heads, possibly prepended by compound parts
                  (stored in pre-verb).
                  TABLE OF CONTENTS – this macro does the following, in this order:
                  - change tags towards nob.dix (anything bidix didn't do)
                  - set the verb caseprep-tag
                  - output 'uten å'                if vabess
                  - output 'i ferd med'        if progressive
                  - output 'kunne/skulle/ville/ha'  if conditional
                  - output 'begynne'             if inchoative
                  - output 'la'                  if causative
                  - output 'bli'                 if passive
                  - output main predicate (tl PoS may be verb, adj, adv or n;
                              temps may have changed by the above operations)
                  - output reflexive if we have a 'ref' tag
                  - output lemq if there was one
                  Each 'output' here gets its own chunk.
                  TODO: caseSecondWord ?">

      <choose c="Initial tag changes">
        <when c="ger to adj.pprs">
          <test><equal><clip pos="1" side="sl" part="a_ger"/><lit-tag v="ger"/></equal></test>
          <let><clip pos="1" side="tl" part="tags"/><lit-tag v="adj.pprs"/></let>
        </when>
        <when c="If pstv and not pret/pres/pp/inf, turn into inf (these have very limited paradigms, and adding an aux just doesn't sound good...)">
          <test><and>
            <not><equal><clip pos="1" side="tl" part="a_pstv"/><lit v=""/></equal></not>
            <not><or>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pres"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></equal>
            </or></not>
          </and></test>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        </when>
      </choose>

      <choose c="Set caseprep tag – t2x can use this to override NP preposition
                 This tag is added to both main predicate chunks (except noun, TODO)
                 and to Conditional, Causative and and Passive chunks, just to make sure...">
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-NIL-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="ill-NIL"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-på-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="ill-på"/></let>
        </when>
        <!-- Why commented out? –KBU -->
<!--        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-i-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="ill-i"/></let>
        </when> -->
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-med-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="ill-med"/></let>
        </when>
        <when>
          <test><or>
            <in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="ill-av-verbs"/></in>
            <ends-with><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_halla"/></ends-with>
          </or></test>
          <let><var n="caseprep-verb"/><lit-tag v="ill-av"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-for-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="loc-for"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-om-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="loc-om"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-fra-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="loc-fra"/></let>
        </when>
        <when>
          <test><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="loc-som-verbs"/></in></test>
          <let><var n="caseprep-verb"/><lit-tag v="loc-som"/></let>
        </when>
        <otherwise c="No Change">
          <let><var n="caseprep-verb"/><lit-tag v="NC"/></let>
        </otherwise>
      </choose>

      <choose c="Prepend uten - we get å in t4x"><when>
        <test><equal><clip pos="1" side="sl" part="a_abess"/><lit-tag v="vabess"/></equal></test>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@ADVL"/></tag>
            </tags>
            <lu>
              <lit v="uten"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <call-macro n="reset_caseFirstWord"></call-macro>
      </when></choose>

      <choose c="Prepend cnjsub if present progressive:
                 TODO: better translation possible? ('drev og'? 'holdt på å'?), but when 'orrut' to the left, it should be inf. Infintive marker å is added in t4x">   
        <when>
          <test><and>
            <equal><clip pos="1" side="sl" part="a_actio"/><lit-tag v="actio.ess"/></equal>
            <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
            <not><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="no.actio.ess"/></in></not>
            <not><equal><var n="aux-verb-tl"/><lit v="synes"/></equal></not>
          </and></test>
          <out>
            <chunk name="adv" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV.@+FAUXV"/></tag>
              </tags>
              <lu>
                <lit v="i ferd med"/>
                <lit-tag v="pr"/>
              </lu>
            </chunk>
            <b/>
          </out>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
          <call-macro n="reset_caseFirstWord"></call-macro>
        </when>
      </choose>
      <choose c="no.actio.ess">   
        <when>
          <test><and>
            <equal><clip pos="1" side="sl" part="a_actio"/><lit-tag v="actio.ess"/></equal>
            <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
            <in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="no.actio.ess"/></in>
          </and></test>
          <let><var n="notactioess"/><lit-tag v="notactioess"/></let>
        </when>
      </choose>


      <choose c="Prepend 'kunne/skulle/skal' if conditional:">
        <when>
          <test><and>
            <not><in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="cond-NIL-verbs"/></in></not>
            <begins-with><clip pos="1" side="tl" part="modality"/><lit-tag v="cond"/></begins-with>
          </and></test>
          <choose>
            <when c="leat cond = ha">
              <test><and>
                  <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="leat"/></equal>
                <begins-with><clip pos="1" side="tl" part="modality"/><lit-tag v="cond"/></begins-with>
              </and></test>
              <let><var n="v_lem"/><lit v="ha"/></let>
            </when>
            <when c="cond = skulle">
              <test><equal><clip pos="1" side="tl" part="modality"/><lit-tag v="cond-skulle"/></equal></test>
              <let><var n="v_lem"/><lit v="skulle"/></let>
            </when>
            <when c="cond = ville">
              <test><equal><clip pos="1" side="tl" part="modality"/><lit-tag v="cond-ville"/></equal></test>
              <let><var n="v_lem"/><lit v="ville"/></let>
            </when>
            <otherwise c="cond = kunne">
              <let><var n="v_lem"/><lit v="kunne"/></let>
            </otherwise>
          </choose>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></let>
          <choose>
            <when c="no v_lem for leat @+FAUXV">
              <test>
                <and>
                  <begins-with><clip pos="1" side="tl" part="modality"/><lit-tag v="cond"/></begins-with>
                  <not><and>
                      <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="leat"/></equal>
                  <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FAUXV"/></equal></and></not>
                </and>
              </test>
              <out>
                <chunk name="verb" case="caseFirstWord">
                  <tags>
                    <tag><lit-tag v="SV"/></tag>
                    <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                    <tag><clip pos="1" side="sl" part="mode"/></tag>
                    <tag><clip pos="1" side="sl" part="modality"/></tag>
                    <tag><clip pos="1" side="tl" part="temps"/></tag>
                    <tag><clip pos="1" side="tl" part="pers"/></tag>
                    <tag><clip pos="1" side="tl" part="nbr"/></tag>
                    <tag><clip pos="1" side="tl" part="animacy"/></tag>
                    <tag><var n="caseprep-verb"/></tag>
                  </tags>
                  <lu>
                    <var n="v_lem"/>
                    <lit-tag v="vblex"/>
                    <clip pos="1" side="tl" part="temps"/>
                  </lu>
                </chunk>
                <b/>
              </out>
              <call-macro n="reset_caseFirstWord"></call-macro>
            </when>
          </choose>
          <choose>
            <when c="leat (except @+FAUXV) = hadde vært">
              <test><and>
                  <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="leat"/></equal>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FAUXV"/></equal></not>
              </and></test>
              <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></let>
            </when>
            <when c="leat @+FAUXV = hadde aux (which should be pp, but now output is inf from sl)">
              <test><and>
                  <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="leat"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FAUXV"/></equal>
              </and></test>
              <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></let>
            </when>
            <otherwise>
              <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
            </otherwise>
          </choose>
          <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
        </when>
        <when>
          <test><and>
            <in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="cond-NIL-verbs"/></in>
            <begins-with><clip pos="1" side="tl" part="modality"/><lit-tag v="cond"/></begins-with>
          </and></test>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></let>
          <let><var n="v_lem"/><lit v=""/></let>
        </when>

      </choose>

      <choose c="Prepend 'begynne' if inchoative:"><when>
        <test><equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="der_inchl"/></equal></test>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="sl" part="modality"/></tag>
              <tag><clip pos="1" side="tl" part="temps"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="animacy"/></tag>
              <tag><var n="caseprep-verb"/></tag>
            </tags>
            <lu>
              <lit v="begynne"/>
              <lit-tag v="vblex"/>
              <clip pos="1" side="tl" part="temps"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="part">
            <tags>
              <tag><lit-tag v="part"/></tag>
            </tags>
            <lu>
              <lit v="å"/><lit-tag v="part"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <call-macro n="reset_caseFirstWord"></call-macro>
        <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
      </when></choose>

      <choose c="Prepend 'la' if causative:
                 TODO: 'få OBJ til å' vs 'la', correct syn_label, interaction with others types..."><when>
        <test><and>
          <equal><clip pos="1" side="tl" part="a_caus"/><lit-tag v="caus"/></equal>
          <not><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="caus-Ø-verbs"/></in></not>
        </and></test>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="sl" part="modality"/></tag>
              <tag><clip pos="1" side="tl" part="temps"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="animacy"/></tag>
              <tag><var n="caseprep-verb"/></tag>
            </tags>
            <lu>
              <lit v="la"/>
              <lit-tag v="vblex"/>
              <clip pos="1" side="tl" part="temps"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <call-macro n="reset_caseFirstWord"></call-macro>
        <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
        <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
      </when></choose>

      <choose c="Prepend 'bli' aux (moving over temps) if
                 passive and pret/pp/pstv/imp/adj (and not a nominal derivation)

                 TODO: OK to just discard syn_label from pret.passives?">
        <when>
          <test><and>
            <equal><clip pos="1" side="tl" part="voice"/><lit-tag v="pasv"/></equal>
            <equal><clip pos="1" side="sl" part="a_nom_all"/><lit v=""/></equal>
            <or>
              <not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="a_nom_all"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="a_pstv"/><lit v=""/></equal></not>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></equal>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="imp"/></equal>
            </or>
          </and></test>
          <let><var n="c_syn"/><lit-tag v="@+FAUXV"/></let>
          <choose><when>
            <test><in><clip pos="1" side="tl" part="temps"/><list n="infinite_temps"/></in></test>
            <let><var n="c_syn"/><lit-tag v="@-FAUXV"/></let>
          </when></choose>
          <let><var n="c_animacy"/><lit-tag v="agreem-pro"/></let>
          <choose><when>
            <test><in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="animate_nonagent-verbs"/></in></test>
            <let><var n="c_animacy"/><lit-tag v="pers-pro"/></let>
          </when></choose>
          <out>
            <chunk name="verb" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><var n="c_animacy"/></tag>
                <tag><var n="caseprep-verb"/></tag>
              </tags>
              <lu>
                <lit v="bli"/>
                <lit-tag v="vblex"/>
                <clip pos="1" side="tl" part="temps"/>
              </lu>
            </chunk>
            <b/>
          </out>
          <call-macro n="reset_caseFirstWord"></call-macro>
          <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
          <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></let>
          <let><clip pos="1" side="tl" part="voice"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="voice"/><lit v=""/></let> <!-- yes twice, bidix can add two tags :/ -->
        </when>
      </choose>

      <choose c="Output the main predicate, verb/adj/adv/etc.">
        <when c="tl PoS is adv (eg. negative)">
          <test><not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
          <choose>
          <when c="tag adv, because of word order">
          <test><or>
          <equal><clip pos="1" side="tl" part="lemh"/><lit v="kanskje"/></equal>
          <equal><clip pos="1" side="tl" part="lemh"/><lit v="nok"/></equal>
       </or></test>
          <let><var n="tmp"/><lit-tag v="adv"/></let>
     </when>
     <otherwise>
          <let><var n="tmp"/><lit v=""/></let>
     </otherwise>
     </choose>
         <append n="c_name"><lit v="adv"/></append>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="neg"/></tag>
                <tag><var n="tmp"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
                <tag><var n="caseprep-verb"/></tag>
              </tags>
              <var n="pre-verb"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adv"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <when c="tl PoS is adj">
          <test><not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not></test>
          <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
          <append n="c_name"><lit v="adj"/></append>
          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SA"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><clip pos="1" side="sl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
                <tag><var n="caseprep-verb"/></tag>
              </tags>
              <var n="pre-verb"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adj"/>
                <clip pos="1" side="tl" part="grau"/>
                <lit-tag v="GD.ND.ind"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <otherwise c="tl PoS is assumed to be verb">
          <choose c="move temps from aux to main, when aux is translated to adv: soaitá boahtit">
            <when>
              <test><and><or>
              <equal><var n="aux-verb-tl"/><lit v="kanskje"/></equal>
              <equal><var n="aux-verb-tl"/><lit v="nok"/></equal>
              </or>
              <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></equal>
              <not><equal><var n="vfin-temps"/><lit v=""/></equal></not>
          </and></test>
              <let><clip pos="1" side="tl" part="temps"/><var n="vfin-temps"/></let>
            </when>
          </choose>
          <choose>
            <when>
              <test><or>
              <equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="være"/></equal>
              <and>
              <equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="leat"/></equal>
            <begins-with><clip pos="1" side="sl" part="modality"/><lit-tag v="cond"/></begins-with>
              </and>
           </or></test>
              <let><var n="c_name"/><lit v="vcop"/></let>
            </when>
            <otherwise>
              <let><var n="c_name"/><lit v="verb"/></let>
            </otherwise>
          </choose>
          <choose>
            <when>
            <test><and>
              <in caseless="yes"><clip pos="1" side="sl" part="lemh"/><list n="esubj-verbs"/></in>
              <or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@+FMAINV"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
              </or>
              </and></test>
              <let><var n="esubj"/><lit-tag v="esubj"/></let>
            </when>
            <otherwise>
              <let><var n="esubj"/><lit v=""/></let>
            </otherwise>
          </choose>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="sl" part="a_actio"/></tag>
                <tag><clip pos="1" side="sl" part="a_abess"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
                <tag><var n="caseprep-verb"/></tag>
                <tag><var n="esubj"/></tag>
                <tag><var n="notactioess"/></tag>
              </tags>
              <var n="pre-verb"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_verb"/>
                <clip pos="1" side="tl" part="a_pstv"/>
                <clip pos="1" side="tl" part="temps"/>
                <clip pos="1" side="tl" part="voice"/>
                <!-- lemq is given its own chunk below -->
              </lu>
            </chunk>
          </out>
        </otherwise>
      </choose>
      <call-macro n="reset_caseFirstWord"></call-macro>

      <choose><when c="Append 'seg' if reflexive:">
        <test>
          <equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal>
        </test>
        <let><var n="prn_pers"/><clip pos="1" side="tl" part="pers"/></let>
        <let><var n="prn_gen"/><lit-tag v="mf"/></let>
        <let><var n="prn_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        <choose><when>
          <test><equal><var n="prn_nbr"/><lit v=""/></equal></test>
          <let><var n="prn_nbr"/><lit-tag v="sg"/></let>
        </when></choose>
        <choose><when c="pl always un">
          <test><equal><var n="prn_nbr"/><lit-tag v="pl"/></equal></test>
          <let><var n="prn_gen"/><lit-tag v="un"/></let>
        </when></choose>
        <choose>
          <when c="vabessiv - now we choose sg p3 for all, more rules when we have examples">
         <test><equal><clip pos="1" side="sl" part="a_abess"/><lit-tag v="vabess"/></equal></test>
            <let><var n="prn_pers"/><lit-tag v="p3"/></let>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
            <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
          </when>
          <when c="when prfprc or inf, then we get pers and nbr from aux - p3 and pl">
            <test><and><or>
              <equal><clip pos="1" side="sl" part="temps"/><lit-tag v="prfprc"/></equal>
              <equal><clip pos="1" side="sl" part="temps"/><lit-tag v="inf"/></equal></or>
              <not><equal><var n="vfin-nbr"/><lit-tag v="sg"/></equal></not></and>
            </test>
            <let><var n="prn_pers"/><var n="vfin-pers"/></let>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
            <let><var n="prn_nbr"/><var n="vfin-nbr"/></let>
          </when>
          <when c="when prfprc or inf, then we get pers and nbr from aux - p1 and p2">
            <test><and><or>
              <equal><clip pos="1" side="sl" part="temps"/><lit-tag v="prfprc"/></equal>
              <equal><clip pos="1" side="sl" part="temps"/><lit-tag v="inf"/></equal></or>
              <equal><var n="vfin-nbr"/><lit-tag v="sg"/></equal>
              <not><equal><var n="vfin-pers"/><lit-tag v="p3"/></equal></not>
              </and>
            </test>
            <let><var n="prn_pers"/><var n="vfin-pers"/></let>
            <let><var n="prn_gen"/><lit-tag v="mf"/></let>
            <let><var n="prn_nbr"/><var n="vfin-nbr"/></let>
          </when>
          <when c="form 'seg' has analysis p3.un.sp">
            <test><or>
              <equal><var n="prn_pers"/><lit v=""/></equal>
              <equal><var n="prn_pers"/><lit-tag v="p3"/></equal>
            </or></test>
            <let><var n="prn_pers"/><lit-tag v="p3"/></let>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
            <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
          </when>
        </choose>
        <out>
          <b/>
          <chunk name="prn">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><lit-tag v="@←OBJ"/></tag>
              <tag><lit-tag v="ref"/></tag>
              <tag><var n="prn_pers"/></tag>
              <tag><var n="prn_nbr"/></tag>
              <tag><lit-tag v="acc"/></tag>
            </tags>
            <lu>
              <lit v="seg"/>
              <lit-tag v="prn.ref"/>
              <var n="prn_pers"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <lit-tag v="acc"/>
            </lu>
          </chunk>
        </out>
      </when></choose>

      <choose><when c="the lemq was not output in the above 'otherwise'; output as a chunk here">
        <test><and>
          <equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal>
          <equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal>
          <not><equal><clip pos="1" side="tl" part="lemq"/><lit v=""/></equal></not>
        </and></test>
        <out>
          <chunk name="lemq">
            <tags>
              <tag><lit-tag v="lemq"/></tag>
              <tag><clip pos="1" side="tl" part="a_lemq"/></tag>
            </tags>
            <lu><clip pos="1" side="tl" part="lemq"/></lu>
          </chunk>
        </out>
      </when></choose>
      <let><var n="caseprep-verb"/><lit v=""/></let>
    </def-macro>
  </section-def-macros>

  <section-rules>
    <!-- <rules: TODO MWE's or pos-changes that really should be lexicalised

         Main pos should preferably never change in bidix, leads to
         too many cases in transfer, better to keep exceptions here,
         where we can avoid introducing complexity in the _regular_
         transfer rules.
    -->
    <rule comment="C[L] lex-buresboahtin → velkommen" c="No ij reading in sme analyser, so needs special rule.">
      <pattern>
        <pattern-item n="lex-buresboahtin"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ij" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="velkommen"/>
              <lit-tag v="ij"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] neg-verb lex-heahti-loc" c="ii heađisge → overhodet ikke">
      <pattern>
        <pattern-item n="neg-verb"/>
        <pattern-item n="lex-heahti-loc"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <lit v="slett ikke"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] neg-verb lex-galle" c="eai galle → ikke mange">
      <pattern>
        <pattern-item n="neg-verb"/>
        <pattern-item n="lex-galle"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <lit v="ikke"/>
              <lit-tag v="adv"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="mange"/>
              <lit-tag v="prn"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-gáidat lex-sápmelaš " c="gáidan sápmelaš → same som har mistet kulturen">
      <pattern>
        <pattern-item n="lex-gáidat"/>
        <pattern-item n="lex-sápmelaš"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <lit v="same"/>
              <lit-tag v="n"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="som har mistet kulturen"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-gáidat lex-hum " c="gáidan olmmoš → menneske som har fjernet seg">
      <pattern>
        <pattern-item n="lex-gáidat"/>
        <pattern-item n="lex-hum"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="som har fjernet seg"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] nom.gen lex-muitu-ess " c="Brekke muitun → til minne om Brekke">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="lex-muitu-ess"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <lit v="til"/>
              <lit-tag v="pr"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="minne"/>
              <lit-tag v="n.nt.sg.ind"/>
            </lu>
            <b />
             <lu>
              <lit v="om"/>
              <lit-tag v="pr"/>
            </lu>
            <b />
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-riekti lex-mielde-post " c="rievtti mielde → egentlig">
      <pattern>
        <pattern-item n="lex-riekti"/>
        <pattern-item n="lex-mielde-post"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
                <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <lit v="egentlig"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-nubbin → nummer to">
      <pattern>
        <pattern-item n="lex-nubbin"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="som nummer to"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] lex-nubbi lex-jođiheaddji → nestleder">
      <pattern>
        <pattern-item n="lex-nubbi"/>
        <pattern-item n="lex-jođiheaddji"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><clip pos="2" side="tl" part="lemh"/><lit v="nestleder"/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
        <choose><when>
          <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
     </action>
    </rule>
    <rule comment="C[L] lex-beali lex-eanet">
      <pattern>
        <pattern-item n="lex-beali"/>
        <pattern-item n="lex-eanet"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="dobbelt så mye"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
      </action>
    </rule>
    <rule comment="C[L] lex-beali lex-unnit">
      <pattern>
        <pattern-item n="lex-beali"/>
        <pattern-item n="lex-unnit"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="halvparten så mye"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
      </action>
    </rule>

    <rule comment="C[L] lex-gealdagas_loc → spent">
      <pattern>
        <pattern-item n="lex-gealdagas_loc"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ij" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="spent"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[DL] lex-bures lex-boahtit" c="bures boahtán → velkommen">
      <pattern>
        <pattern-item n="lex-bures"/>
        <pattern-item n="lex-boahtit"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="velkommen"/>
              <lit-tag v="ij"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
      </action>
    </rule>

    <rule comment="C[DL] lex-guhte lex-guvlui" c="guđe guvlui → i hvilken retning">
      <pattern>
        <pattern-item n="lex-guhte"/>
        <pattern-item n="lex-guvlui"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="i hvilken retning"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
      </action>
    </rule>

    <rule comment="C[DL] num lex-láhkai" c="guovtti láhkai → på to måter">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="lex-láhkai"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when>
          <test>
            <not><equal><clip pos="1" side="tl" part="lemh"/><lit v="en"/></equal></not>
          </test>
          <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="pl"/></let>
        </when></choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="på"/>
              <lit-tag v="pr"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[L] ord lex-lohki
     čihččetlohkái nisu lea navdon goddon
     Dohko bođii almmái gii lei njealjátlohkái " c="čihččetlohkái nisu → i sekstiårene kvinne">
      <pattern>
        <pattern-item n="ord"/>
        <pattern-item n="lex-lohki"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when><test>
          <equal><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@N←"/></let></when>
          <when><test>
            <equal><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@N←"/></let></when>
          <otherwise>
            <let><var n="c_syn"/><clip pos="2" side="sl" part="syn_label"/></let>
          </otherwise>
        </choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
            </tags>
            <mlu>
              <lu><clip pos="1" side="tl" part="lemh"/></lu>
              <lu><lit v="årene"/>
              <lit-tag v="adv"/></lu>
            </mlu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
      </action>
    </rule>

    <rule comment="C[L] det_mod ord lex-lohki
     muhtun čihččetlohkái nisu lea navdon goddon
     Dohko bođii almmái gii lei njealjátlohkái " c="muhtun čihččetlohkái nisu → en i sekstiårene kvinne">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="ord"/>
        <pattern-item n="lex-lohki"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <choose><when><test>
          <equal><clip pos="3" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@N←"/></let></when>
          <when><test>
            <equal><clip pos="3" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@N←"/></let></when>
          <otherwise>
            <let><var n="c_syn"/><clip pos="3" side="sl" part="syn_label"/></let>
          </otherwise>
        </choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
            </tags>
            <lu>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_det"/>
            <var n="prn_gen"/>
            <var n="prn_nbr"/>
            <clip pos="1" side="tl" part="art"/>
            <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <mlu>
              <lu><clip pos="2" side="tl" part="lemh"/></lu>
              <lu><lit v="årene"/>
              <lit-tag v="adv"/></lu>
            </mlu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="2"/><lit v=" "/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
      </action>
    </rule>


    <rule comment="C[L] lex-dan lex-sadjai" c="dan sadjái → i stedet">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-sadjai"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="i stedet"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
          <out><b pos="1"/></out>
        </when></choose>
      </action>
    </rule>

    <rule comment="C[L] bealde-modyfier lex-bealde" c="sii ellet nuppe bealde → de lever på andre siden">
      <pattern>
        <pattern-item n="bealde-modyfier"/>
        <pattern-item n="lex-bealde"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
          <when>
            <test>
              <equal><clip pos="2" side="sl" part="lemh"/><lit v="beallai"/></equal>
            </test>
            <let><var n="caseprep"/><lit v="til"/></let>
          </when>
          <when>
            <test><or>
              <equal><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@←ADVL-ela"/></equal>
              <equal><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal>
            </or></test>
            <let><var n="caseprep"/><lit v="fra"/></let>
          </when>
          <otherwise>
            <let><var n="caseprep"/><lit v="på"/></let>
        </otherwise></choose>
        <choose>
          <when>
            <test><and>
              <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
              <equal><clip pos="1" side="tl" part="lemh"/><lit v="den"/></equal></and>
            </test>
            <let><clip pos="1" side="tl" part="tags"/><lit-tag v="det.dem.m.sg"/></let>
          </when>
          <when>
            <test>
              <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="tags"/><lit-tag v="det.dem.un.sg.def"/></let>
          </when>
          <when>
            <test>
              <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.pers"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="tags"/><lit-tag v="det.pos.m.sg"/></let>
          </when>
          <when>
            <test>
              <equal><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="tags"/><lit-tag v="adj.sint.pst.un.sp.def"/></let>
          </when>
        </choose>
        <out>
          <chunk name="adv">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <var n="caseprep"/>
              <lit-tag v="pr"/>
              <lit v="$"/>
              <b pos="1"/>
              <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
              <lit v="$"/>
              <b/>
              <lit v="^"/>
              <lit v="siden"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[TW] hum_gen lex-guovttos" c="artistta guovttos → de to artistene">
      <pattern>
        <pattern-item n="hum_gen"/>
        <pattern-item n="lex-guovttos"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="de"/>
              <lit-tag v="prn.pers.p3.un.pl.nom"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="to"/>
              <lit-tag v="det.qnt.un.pl"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="pl.def"/>
              <clip pos="1" side="tl" part="lemq"/>
             </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[TW] lex-dievva noun" c="dievva bierggut">
      <pattern>
        <pattern-item n="lex-dievva"/>
        <pattern-item n="nom_all"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="caseprep" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PR"/></tag>
              <tag><lit-tag v="com"/></tag>
            </tags>
            <lu>
              <lit v="full av"/>
              <lit-tag v="pr"/>
            </lu>
          </chunk>
            <b pos="1"/>
          <chunk name="nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="noun"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
             </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[TW] hum_gen lex-guovttos nom_head" c="Ođđa vihtaniid čilgehusat nannejit albmáguoktá ášši. → De nye vitnenes forklaringer styrker de to mennenes sak.">
      <pattern>
        <pattern-item n="hum_gen"/>
        <pattern-item n="lex-guovttos-gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="de"/>
              <lit-tag v="prn.pers.p3.un.pl.nom"/>
            </lu>
            <b />
            <lu>
              <lit v="to"/>
              <lit-tag v="det.qnt.un.pl"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="pl"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
             </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="3" side="tl" part="lemq"/>
             </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[AT] lex-minuhtta lex-minuhtta" c="minuvttas minuktii → minutt for minutt">
      <pattern>
        <pattern-item n="lex-minuhtta-loc"/>
        <pattern-item n="lex-minuhtta-ill"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv_adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="n"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
            </lu>
            <b pos="1"/>
            <lu>
              <lit v="for"/>
              <lit-tag v="pr"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <lit-tag v="n"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[AL] lex-dan lex-sadjai lex-go" c="dan sadjái go → i stedet for å">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-sadjai"/>
        <pattern-item n="lex-go"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="cnjsub"/></tag>
            </tags>
            <lu>
              <lit v="i stedet for å"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[DLT] prn.pers.acc lex-arvvus lex-adnojuvvon" c="min árvvus adnojuvvon → vårt ærede">
      <pattern>
        <pattern-item n="prn.pers.acc"/>
        <pattern-item n="lex-arvvus"/>
        <pattern-item n="lex-adnojuvvon"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="gen"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="det.pos"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="adj_verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><lit-tag v="sg"/></tag>
              <tag><clip pos="2" side="sl" part="case"/></tag>
            </tags>
            <lu>
              <lit v="ære"/>
              <lit-tag v="adj.pp.sg.def"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><not><equal><b pos="2"/><lit v=" "/></equal></not></test>
            <out><b pos="2"/></out>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="C[DL] lex-arvvus lex-adnojuvvon" c="árvvus adnojuvvon → ærede">
      <pattern>
        <pattern-item n="lex-arvvus"/>
        <pattern-item n="lex-adnojuvvon"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adj_verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><lit-tag v="sg"/></tag>
              <tag><clip pos="1" side="sl" part="case"/></tag>
            </tags>
            <lu>
              <lit v="ære"/>
              <lit-tag v="adj.pp.sg.def"/>
            </lu>
          </chunk>
        </out>
        <choose>
          <when>
            <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
            <out><b pos="1"/></out>
          </when>
        </choose>
      </action>
    </rule>

    <rule comment="C[DL] lex-dan lex-sivas lex-go" c="dan sivas go → fordi">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-sivas"/>
        <pattern-item n="lex-go"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="fordi"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[L] lex-vel lex-lassin" c="vel lassin → i tillegg">
      <pattern>
        <pattern-item n="lex-vel"/>
        <pattern-item n="lex-lassin"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="i tillegg"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[L] lex-máŋga lex-dáfus" c="máŋgga dáfus → på mange måter">
      <pattern>
        <pattern-item n="lex-máŋga"/>
        <pattern-item n="lex-dáfus"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="på mange måter"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[AL] lex-times_adv n.sem_time" c="guhkii vahkkui → to ganger i uka">
      <pattern>
        <pattern-item n="lex-times_adv"/>
        <pattern-item n="n.sem_time"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
          <when>
            <test><equal><clip pos="2" side="sl" part="lemh"/><lit v="beaivi"/></equal></test>
            <let><var n="caseprep"/><lit v="om"/></let>
          </when>
          <otherwise>
            <let><var n="caseprep"/><lit v="i"/></let>
          </otherwise>
        </choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="adv"/>
            </lu>
            <b pos="1"/>
            <lu>
              <var n="caseprep"/>
              <lit-tag v="pr"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <lit-tag v="n"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg.def"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] measr lex-guhku" c="mehter guhku → meter lang">
      <pattern>
        <pattern-item n="measr"/>
        <pattern-item n="lex-guhku"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
      <choose><when>
      <test><equal><var n="n_nbr"/><lit-tag v="pl"/></equal></test>
      <let><var n="tmp"/><lit-tag v="un.pl"/></let>
       </when>
       <otherwise>
      <let><var n="tmp"/><lit-tag v="mf.sg"/></let>
       </otherwise></choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <lit-tag v="pst"/>
              <var n="tmp"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[L] num measr lex-guhku" c="guokte mehtera guhku → to meter lang">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="measr"/>
        <pattern-item n="lex-guhku"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
      <choose><when>
      <test><equal><var n="n_nbr"/><lit-tag v="pl"/></equal></test>
      <let><var n="tmp"/><lit-tag v="un.pl"/></let>
       </when>
       <otherwise>
      <let><var n="tmp"/><lit-tag v="mf.sg"/></let>
       </otherwise></choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <lit-tag v="pst"/>
              <var n="tmp"/>
              <lit-tag v="ind"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[DL] lex-dan lex-ektui lex-go" c="dan ektui go → mens / mot">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-ektui"/>
        <pattern-item n="lex-go"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="i forhold til"/>
              <lit-tag v="pr"/>
            </lu>
          </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>
    <rule comment="C[L] lex-das-her " c="dás → her">
      <pattern>
        <pattern-item n="lex-das-her"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when><test>
          <equal><clip pos="1" side="sl" part="lemh"/><lit v="dát"/></equal></test>
          <let><var n="adv_lem"/><lit v="her"/></let></when>
          <otherwise>
            <let><var n="adv_lem"/><lit v="av det"/></let>
        </otherwise></choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <var n="adv_lem"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
        <rule comment="C[T] lex-Finnmarksløpet lex-gilvu">
      <pattern>
        <pattern-item n="lex-Finnmarksløpet"/>
        <pattern-item n="lex-gilvu"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
        <rule comment="C[T] lex-prop-nom lex-latnja">
      <pattern>
        <pattern-item n="np-nom"/>
        <pattern-item n="lex-latnja"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="C[L] lex-dat-sgloc lex-rájes lex-go " c="das rájes go → siden">
      <pattern>
        <pattern-item n="lex-dat-sgloc"/>
        <pattern-item n="lex-rájes"/>
        <pattern-item n="lex-go"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <lit v="siden"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
        <rule comment="C[T] lquot nom-nom rquot clean_noun" c="Váillahit dáidda- ja kulturoasi «Váibmogiella» guorahallamis.">
      <pattern>
        <pattern-item n="lquot"/>
        <pattern-item n="nom-nom"/>
         <pattern-item n="rquot"/>
       <pattern-item n="clean_noun"/>
      </pattern>
      <action>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="tags"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="tags"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><var n="c_neverdet"/><lit-tag v="neverdet"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>
    <rule comment="C[L] lex-dat-sgloc lex-rájes " c="das rájes → siden">
      <pattern>
        <pattern-item n="lex-dat-sgloc"/>
        <pattern-item n="lex-rájes"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <lit v="siden"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[DL] lex-dan lex-botta" c="dan botta → mens">
      <pattern>
        <pattern-item n="lex-dan"/>
        <pattern-item n="lex-botta"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="mens"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>
    <rule comment="C[L] lex-botta" c="botta → mens">
      <pattern>
        <pattern-item n="lex-botta"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <lit v="mens"/>
              <lit-tag v="cnjsub"/>
            </lu>
          </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>
    <rule comment="C[LT] lex-mannan n.sem_time" c="Mannan vahku → Sist uke (could mannan get an adj reading?)">
      <pattern>
        <pattern-item n="lex-mannan"/>
        <pattern-item n="n.sem_time"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
                <lit v="sist"/>
                <lit-tag v="adj.sint.sup.un.sp.ind"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>


    <rule comment="C[LT] lex-mannan n.sem_time lex-siden" c="Njealje jagi áigi → For fire år siden">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="n.sem_time"/>
        <pattern-item n="lex-siden"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><lit-tag v="@ADVL"/></tag>
            </tags>
            <lu>
              <lit v="for"/>
              <lit-tag v="pr"/>
            </lu>
          <b/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          <b pos="2"/>
            <lu>
              <lit v="siden"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[LT] lex-mannan n.sem_time lex-das lex-siden" c="Njealje jagi dás ovdal → For fire år siden">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="n.sem_time"/>
        <pattern-item n="lex-das-adv"/>
        <pattern-item n="lex-siden"/>
      </pattern>
      <action>
        <out>
          <chunk name="adpos">
            <tags>
              <tag><lit-tag v="PR"/></tag>
            </tags>
            <lu>
              <lit v="for"/>
              <lit-tag v="pr"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="adv">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="2"/>
          <chunk name="adv">
            <tags>
              <tag><lit-tag v="ADV.@ADVL←"/></tag>
            </tags>
            <lu>
              <lit v="siden"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[ALT] lex-vaikko lex-vaikko-pluss" c="vaikko mii → hva som helst">
      <pattern>
        <pattern-item n="lex-vaikko"/>
        <pattern-item n="lex-vaikko-pluss"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when><test>
        <equal><clip pos="2" side="tl" part="lemh"/><lit v="hva"/></equal></test>
        <let><clip pos="2" side="tl" part="tags"/><lit-tag v="adv"/></let></when></choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
                <lu>
                   <clip pos="2" side="tl" part="whole"/>
                </lu>
                <b/>
              <lu>
              <lit v="som helst"/>
              <lit-tag v="adv"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] month lex-álgu-loahppa" c="suoidnemánu álggus → i begynnelsen av juli">
      <pattern>
        <pattern-item n="month"/>
        <pattern-item n="lex-álgu-loahppa"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
         <choose>
          <when>
            <test>
              <equal><clip pos="2" side="sl" part="case"/><lit-tag v="ill"/></equal>
            </test>
            <let><var n="caseprep"/><lit v="til"/></let>
          </when>
          <when>
            <test>
              <equal><clip pos="2" side="sl" part="case"/><lit-tag v="loc"/></equal>
            </test>
            <let><var n="caseprep"/><lit v="i"/></let>
          </when>
        </choose>
       <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
                <lu>
              <var n="caseprep"/><lit-tag v="pr"/>
                </lu>
                <b/>
                <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b/>
                 <lu>
              <lit v="av"/><lit-tag v="pr"/>
                </lu>
               <b pos="1"/>
                <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
                </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <!-- <rules: MWE interjections (which can't be in analyser as multiwords) -->
    <rule comment="C[T] ij-adj ij-nom" c="buorre eahket">
      <!-- TODO: Buore beaivvi! gets den gode dagen -->
      <pattern>
        <pattern-item n="ij-adj"/>
        <pattern-item n="ij-nom"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="2"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <out>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[T] ij-adj ij-adj2 ij-nom">
      <pattern>
        <pattern-item n="ij-adj"/>
        <pattern-item n="ij-adj2"/>
        <pattern-item n="ij-nom"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="3"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <out>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <lit-tag v="sg"/>
              <lit-tag v="ind"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Dates (need to be before num_nom rules) -->


     <rule comment="C[DT] num month ord lex-beaivi" c="11:36 njukčamánu 21. beaivi → 11:36 21. april">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="month"/>
        <pattern-item n="ord_num"/>
        <pattern-item n="lex-beaivi"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
       <let><var n="caseprep"/><lit v=""/></let>
       <choose>
        <when><test>
        <equal><clip pos="4" side="tl" part="case"/><lit-tag v="ill"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.ill"/>
              <lit v="{^"/>
              <lit v="til"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
        <when><test>
        <equal><clip pos="4" side="tl" part="case"/><lit-tag v="loc"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.loc"/>
              <lit v="{^"/>
              <lit v="fra"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
          </choose>
        <out>
            <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="4" side="sl" part="syn_label"/></tag>
              <tag><clip pos="4" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="4" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="3"/><b/></equal></not></test>
          <out><b pos="3"/></out>
        </when></choose>
      </action>
    </rule>
   <rule comment="C[DT] month ord lex-beaivi" c="guovvamánu 17. beaivvi → 17. februar
                   TODO: should we also chunk MONTH NUM DOT BEAIVI YEAR ?
                   TODO: should we always delete the genitive here?
                   TODO: do we ever want definite? ('den 17.februar')?">
      <pattern>
        <pattern-item n="month"/>
        <pattern-item n="ord_num"/>
        <pattern-item n="lex-beaivi"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
       <let><var n="caseprep"/><lit v=""/></let>
       <choose>
        <when><test>
        <equal><clip pos="3" side="tl" part="case"/><lit-tag v="ill"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.ill"/>
              <lit v="{^"/>
              <lit v="til"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
        <when><test>
        <equal><clip pos="3" side="tl" part="case"/><lit-tag v="loc"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.loc"/>
              <lit v="{^"/>
              <lit v="fra"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
          </choose>
        <out>
            <var n="caseprep"/>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="2"/><b/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
      </action>
    </rule>
   <rule comment="C[DT] month ord lex-beaivi num-year" c="guovvamánu 17. beaivvi 2001 → 17. februar 2001">
      <pattern>
        <pattern-item n="month"/>
        <pattern-item n="ord_num"/>
        <pattern-item n="lex-beaivi"/>
        <pattern-item n="num-year"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
       <let><var n="caseprep"/><lit v=""/></let>
       <choose>
        <when><test>
        <equal><clip pos="3" side="tl" part="case"/><lit-tag v="ill"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.ill"/>
              <lit v="{^"/>
              <lit v="til"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
        <when><test>
        <equal><clip pos="3" side="tl" part="case"/><lit-tag v="loc"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.loc"/>
              <lit v="{^"/>
              <lit v="fra"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
          </choose>
        <out>
            <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="4" side="sl" part="syn_label"/></tag>
              <tag><clip pos="4" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="4" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
                <b pos="2"/>
                <lu>
                  <clip pos="4" side="tl" part="lemh"/>
                  <clip pos="4" side="tl" part="a_num"/>
                  <clip pos="4" side="tl" part="gen"/>
                  <clip pos="4" side="tl" part="nbr"/>
                  <clip pos="4" side="tl" part="lemq"/>
                </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="3"/><b/></equal></not></test>
          <out><b pos="3"/></out>
        </when></choose>
      </action>
    </rule>

   <rule comment="C[DT] month ord lex-beaivi num-year" c="guovvamánu 17. ja 18. beaivvi 2001 → 17. og 18. februar 2001">
      <pattern>
        <pattern-item n="month"/>
        <pattern-item n="ord_num"/>
        <pattern-item n="cc"/>
        <pattern-item n="ord_num"/>
        <pattern-item n="lex-beaivi"/>
        <pattern-item n="num-year"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="pre_conj_pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="6" side="sl" part="syn_label"/></tag>
              <tag><clip pos="6" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="6" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
             <b pos="1"/>
              <lu>
                <clip pos="3" side="tl" part="lemh"/>
                <clip pos="3" side="tl" part="a_conj"/>
              </lu>
            <b pos="2"/>
            <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="4" side="tl" part="lemq"/>
            </lu>
             <b pos="3"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
                <b pos="4"/>
                <lu>
                  <clip pos="6" side="tl" part="lemh"/>
                  <clip pos="6" side="tl" part="a_num"/>
                  <clip pos="6" side="tl" part="gen"/>
                  <clip pos="6" side="tl" part="nbr"/>
                  <clip pos="6" side="tl" part="lemq"/>
                </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="5"/><b/></equal></not></test>
          <out><b pos="5"/></out>
        </when></choose>
      </action>
    </rule>


    <rule comment="C[DT] lex-jahki_mod lex-jahki month ord lex-beaivi" c="dán jagi suoidnemánu 1. beaivvi : ">
      <pattern>
        <pattern-item n="lex-jahki_mod"/>
        <pattern-item n="lex-jahki"/>
        <pattern-item n="month"/>
        <pattern-item n="ord_num"/>
        <pattern-item n="lex-beaivi"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="caseprep"/><lit v=""/></let>
        <choose>
          <when><test>
            <equal><clip pos="5" side="tl" part="case"/><lit-tag v="ill"/></equal></test>
            <let>
              <var n="caseprep"/>
              <concat>
                <lit v="^"/>
                <lit v="caseprep"/>
                <lit-tag v="PR.ill"/>
                <lit v="{^"/>
                <lit v="til"/>
                <lit-tag v="pr"/>
                <lit v="$}$ "/>
              </concat>
            </let>
          </when>
          <when><test>
            <equal><clip pos="5" side="tl" part="case"/><lit-tag v="loc"/></equal></test>
            <let>
              <var n="caseprep"/>
              <concat>
                <lit v="^"/>
                <lit v="caseprep"/>
                <lit-tag v="PR.loc"/>
                <lit v="{^"/>
                <lit v="fra"/>
                <lit-tag v="pr"/>
                <lit v="$}$ "/>
              </concat>
            </let>
          </when>
        </choose>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="5" side="sl" part="syn_label"/></tag>
              <tag><clip pos="5" side="sl" part="mode"/></tag>
              <tag><clip pos="5" side="tl" part="gen"/></tag>
              <tag><clip pos="5" side="tl" part="nbr"/></tag>
              <tag><clip pos="5" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="4" side="tl" part="lemq"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="4"/><b/></equal></not></test>
          <out><b pos="4"/></out>
        </when></choose>
      </action>
    </rule>


    <rule comment="C[DT] ord lex-beaivi month" c="24. beaivve golggotmánus → 24. oktober">
      <pattern>
        <pattern-item n="ord_num"/>
        <pattern-item n="lex-beaivi"/>
        <pattern-item n="month"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
       <let><var n="caseprep"/><lit v=""/></let>
       <choose>
        <when><test>
        <equal><clip pos="2" side="tl" part="case"/><lit-tag v="ill"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.ill"/>
              <lit v="{^"/>
              <lit v="til"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
        <when><test>
        <equal><clip pos="2" side="tl" part="case"/><lit-tag v="loc"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.loc"/>
              <lit v="{^"/>
              <lit v="fra"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
          </choose>
        <out>
            <var n="caseprep"/>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="3" side="tl" part="gen"/></tag>
              <tag><clip pos="3" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="2"/><b/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
      </action>
    </rule>
    <rule comment="C[DT] ord lex-beaivi det_mod lex-mannu" c="24. beaivve dán mánus → 24. oktober">
      <pattern>
        <pattern-item n="ord_num"/>
        <pattern-item n="lex-beaivi"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="lex-mannu"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
       <let><var n="caseprep"/><lit v=""/></let>
       <choose>
        <when><test>
        <equal><clip pos="2" side="tl" part="case"/><lit-tag v="ill"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.ill"/>
              <lit v="{^"/>
              <lit v="til"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
        <when><test>
        <equal><clip pos="2" side="tl" part="case"/><lit-tag v="loc"/></equal></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR.loc"/>
              <lit v="{^"/>
              <lit v="fra"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
          </when>
          </choose>
        <out>
            <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="4" side="sl" part="syn_label"/></tag>
              <tag><clip pos="4" side="sl" part="mode"/></tag>
              <tag><clip pos="4" side="tl" part="gen"/></tag>
              <tag><clip pos="4" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="4" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="adj.ord.pst.un.sp.def"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_det"/>
              <clip pos="4" side="tl" part="gen"/>
              <clip pos="4" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="art"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
            <b pos="3"/>
           <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_nom"/>
              <clip pos="4" side="tl" part="gen"/>
              <clip pos="4" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="4" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="2"/><b/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
      </action>
    </rule>
    <rule comment="C[T] lex-diibmu num" c="diibmu 11.00 → klokken 11.00">
      <pattern>
        <pattern-item n="lex-diibmu"/>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><equal><clip pos="2" side="tl" part="gen"/><lit-tag v="GD"/></equal></test>
          <let><clip pos="2" side="tl" part="gen"/><lit-tag v="nt"/></let>
          <let><clip pos="2" side="tl" part="lemh"/><lit v="én"/></let> <!-- ett -->
        </when></choose>
        <out>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T] num-year season" c="1990 giđa → våren 1990
                   Always definite (should not add a determiner in t4x)
                   Removes genitive from season (selected by numeral)

                   No need for exceptions for num's like 'okta' since '1990'
                   should be tagged sem_year">
      <pattern>
        <pattern-item n="num-year"/>
        <pattern-item n="season"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>

        <choose>
          <when c="adv">
            <test><not><equal><clip pos="2" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv_det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="tl" part="gen"/></tag>
                  <tag><clip pos="2" side="tl" part="nbr"/></tag>
                  <tag><lit-tag v="def"/></tag>
                  <tag><clip pos="2" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_adv"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_num"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise c="noun">
            <out>
              <chunk name="pre_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="tl" part="gen"/></tag>
                  <tag><clip pos="2" side="tl" part="nbr"/></tag>
                  <tag><lit-tag v="def"/></tag>
                  <tag><clip pos="2" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_nom"/>
                  <clip pos="2" side="tl" part="gen"/>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="def"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
                <b pos="1"/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_num"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="C[T] num.cmp nom_head" c="1990-logu → 1990-tallet
                   Always definite (should not add a determiner in t4x)
                   if a_cmp is 'guio', nob.dix adds a dash">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>


        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><var n="defnes"/><lit-tag v="def"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
              <clip pos="1" side="tl" part="a_cmp"/>
            <lit v="$"/>
          </concat>
        </let>
        <choose>
          <when>
            <test> 
              <equal><clip pos="2" side="sl" part="lemh"/><lit v="lohku"/></equal>
            </test>
            <out>
              <var n="caseprep"/>
              <chunk name="nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><lit-tag v="ind"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="sl" part="nbr"/></tag>
                  <tag><clip pos="2" side="sl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <lit v="-tall"/>
                  <lit-tag v="n.nt.sg.def"/>
                </lu>
              </chunk>
            </out>
            <choose>
              <when>
                <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
                <out><b pos="1"/></out>
              </when>
            </choose>
          </when>
          <when>
            <test><and>
              <equal><clip pos="2" side="sl" part="lemh"/><lit v="jahki"/></equal>
              <equal><clip pos="2" side="sl" part="nbr"/><lit-tag v="sg"/></equal>
              <not><equal><clip pos="2" side="sl" part="a_der"/><lit-tag v="der_sasj"/></equal></not>
            </and></test>
            <out>
              <var n="caseprep"/>
              <chunk name="pre_nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><lit-tag v="ind"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="sl" part="nbr"/></tag>
                  <tag><clip pos="2" side="sl" part="case"/></tag>
                </tags>
                <var n="pre-nom"/>
                <lu>
                  <lit v="-årig"/>
                  <lit-tag v="adj.pst.nt.sg.ind"/>
                </lu>
              </chunk>
            </out>
            <choose>
              <when>
                <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
                <out><b pos="1"/></out>
              </when>
            </choose>
          </when>
          <when>
            <test><and>
              <equal><clip pos="2" side="sl" part="lemh"/><lit v="jahki"/></equal>
              <equal><clip pos="2" side="sl" part="a_der"/><lit-tag v="der_sasj"/></equal>
            </and></test>
            <out>
              <var n="caseprep"/>
              <chunk name="nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><lit-tag v="ind"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="sl" part="nbr"/></tag>
                  <tag><clip pos="2" side="sl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <lit v="-åring"/>
                  <lit-tag v="n.m"/>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="ind"/>
                </lu>
              </chunk>
            </out>
            <choose>
              <when>
                <test><not><equal><b pos="1"/><lit v=" "/></equal></not></test>
                <out><b pos="1"/></out>
              </when>
            </choose>
          </when>

          <otherwise>
            <call-macro n="out_nom"><with-param pos="2"/></call-macro>
          </otherwise>
        </choose>
        <let><var n="pre-nom"/><lit v=""/></let> <!-- since the above sets pre-nom without always using out_nom -->
      </action>
    </rule>



    <rule comment="C[] num.cmp adj_vblex_attr nom_head" c="22-jahkásaš nieida">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="3"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <choose><when>
          <test><equal><clip pos="2" side="tl" part="lemh"/><lit v="lohku"/></equal></test>
          <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        </when></choose>

        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let>
          <var n="tmp"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <choose>
          <when>
            <test><and>
              <equal><clip pos="2" side="sl" part="lemh"/><lit v="jahki"/></equal>
              <equal><clip pos="2" side="sl" part="a_der"/><lit-tag v="der_sasj"/></equal>
              <equal><clip pos="2" side="sl" part="a_attr"/><lit-tag v="attr"/></equal>
            </and></test>
            <let>
              <var n="pre-nom"/>
              <concat>
              <var n="tmp"/>
                 <lit v="^"/>
                  <lit v="-årig"/>
                  <lit-tag v="adj.pst.nt.sg.ind"/>
                <lit v="$"/>
              <b pos="1"/>
       </concat></let>
          </when>
          <when>
            <test><and>
              <equal><clip pos="2" side="sl" part="lemh"/><lit v="jahki"/></equal>
              <equal><clip pos="2" side="sl" part="a_der"/><lit-tag v="der_sasj"/></equal>
          <not><equal><clip pos="2" side="sl" part="a_attr"/><lit-tag v="attr"/></equal></not>
            </and></test>
              <let><var n="c_name"/><lit v="pre_"/></let>
            <let>
              <var n="pre-nom"/>
              <concat>
                 <lit v="^"/>
                  <clip pos="1" side="tl" part="lemh"/>
                  <lit v="-åring"/>
                  <lit-tag v="n.m"/>
                  <clip pos="2" side="tl" part="nbr"/>
                  <lit-tag v="def"/>
                <clip pos="2" side="sl" part="gen-case"/>
                <lit v="$"/>
              <b pos="1"/>
            </concat></let>
          </when>
          <otherwise>
       <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>
          </otherwise>

          </choose>
            <call-macro n="out_nom"><with-param pos="3"/></call-macro>
        <let><var n="pre-nom"/><lit v=""/></let> <!-- since the above sets pre-nom without always using out_nom -->
      </action>
    </rule>


<!--    <rule comment="C[] num.cmp adj_vblex_attr nom_head" c="22-jahkásaš nieida">  -->
      <!--
          Intended matches:
	^6<num><cmp><guio>/6<det><qnt><un><pl><guio>$ ^jahki<n><der_sasj><adj><attr><@→N>/-åring<n><m><attr><@→N>$
	^nieida<n><sem_hum><sg><nom><←ext→><@←SUBJ>/jente<n><f><sem_hum><sg><nom><←ext→><@←SUBJ>      -->
<!--      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro> -->

        <!-- not set_defnes2 here, seems to work better just looking at head syntax tag: -->
 <!--       <call-macro n="set_defnes"><with-param pos="3"/></call-macro>

        <let><var n="c_def_pos"/><lit-tag v="3"/></let>

        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <choose>
          <when>
            <test><not><begins-with><clip pos="2" side="tl" part="lemh"/><lit v="-"/></begins-with></not></test>
            <out><b pos="1"/></out>
          </when>
        </choose>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <let><clip pos="3" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule> -->



    <rule comment="C[S] num.cmp num" c="golbma-njealje → tre-fire">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <!-- In this case we don't want to remove the dash: -->
        <!-- <call-macro n="clean_cmp"><with-param pos="1"/></call-macro> -->
        <choose>
          <when>
            <test><or>
              <equal><clip pos="1" side="sl" part="a_cmp"/><lit-tag v="cmp_splitr"/></equal>
              <not><equal><b pos="1"/><lit v=" "/></equal></not>
            </or></test>
            <let><var n="blank"/><b pos="1"/></let>
          </when>
          <otherwise>
            <let><var n="blank"/><lit v=""/></let>
          </otherwise>
        </choose>
        <out>
          <chunk name="det_det" case="caseFirstWord"> <!-- no t4x rule yet, but no cleanup should be needed -->
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="tl" part="gen"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <var n="blank"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="previous-nhead"/><lit v="NUMERAL"/></let>
      </action>
    </rule>
<!--    <rule comment="C[ST] num.cmp num nom_head" c="golbma-njealje jagi → tre-fire år">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="num"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>

        <choose><when>
          <test><equal><clip pos="3" side="tl" part="lemh"/><lit v="lohku"/></equal></test>
          <let><clip pos="3" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        </when></choose>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><var n="defnes"/><lit-tag v="def"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>  -->



    <rule comment="C[ST] num.cmp nom.cmp nom_head" c="1900-áibmomediagáffe → 1990-kringkastingskaffen
                   Always definite (should not add a determiner in t4x)
                   if a_cmp is 'guio', nob.dix adds a dash">
      <pattern>
        <pattern-item n="num.cmp"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>

        <choose><when>
          <test><equal><clip pos="3" side="tl" part="lemh"/><lit v="lohku"/></equal></test>
          <let><clip pos="3" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        </when></choose>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><var n="defnes"/><lit-tag v="def"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <!-- <rules: Proper nouns -->
    <rule comment="C[T] nom.prop
                   Needs to be before the NOM rule.">
      <pattern>
        <pattern-item n="nom.prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
	      <tag><clip pos="1" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
              <tag><var n="c_animacy"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="c_animacy"/><lit v=""/></let>
      </action>
    </rule>
    <rule comment="C[T] nom.prop_mod nom.prop safd
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom.prop_mod"/>
        <pattern-item n="nom.prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
	      <tag><clip pos="2" side="sl" part="hab"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
              <tag><var n="c_animacy"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="c_animacy"/><lit v=""/></let>
      </action>
    </rule>




    <rule comment="C[T] nom.prop_mod nom.prop_mod nom.prop
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom.prop_mod"/>
        <pattern-item n="nom.prop_mod"/>
        <pattern-item n="nom.prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="3"/></call-macro>
        <call-macro n="guess_animacy"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
	      <tag><clip pos="3" side="sl" part="hab"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
              <tag><var n="c_animacy"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T] nom.prop_attr nom.prop.antcog" c="(šattai) Prinsa Harald (Ruvdnaprinsan) → (ble) Prins Harald (kronprins) Uses NOM.PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <!-- for NOM.PROP_ATTR, no defnes if proper, ind if n -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for NOM.PROP.ANTCOG -->
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[TV] nom.prop_attr nom.prop.antcog_mod nom.prop.antcog" c=", muitala rektor Liisa Holmberg.
                   Uses middle NOM.PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog_mod"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <choose><when c="C[V] c_gen">
          <test><not><equal><clip pos="2" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="2" side="tl" part="gen"/></let>
        </when></choose>

        <choose>
          <when c="remove tags if propernoun">
            <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
            <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="art"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><clip pos="1" side="tl" part="whole"/><concat><clip pos="1" side="tl" part="whole"/><lit-tag v="ind"/></concat></let>
          </otherwise>
        </choose>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
   	          <tag><clip pos="3" side="sl" part="hab"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
              <tag><lit-tag v="pers-pro"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[TV] nom.prop_attr nom.prop.antcog_mod nom.prop.antcog nom.prop.antcog" c=", sámediggepresideantta Tiina Sanila-Aikio.
                   Uses nom.prop.antcog_mod gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog_mod"/>
        <pattern-item n="nom.prop.antcog_mod"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <choose><when c="C[V] c_gen">
          <test><not><equal><clip pos="2" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="2" side="tl" part="gen"/></let>
        </when></choose>

        <choose>
          <when c="remove tags if propernoun">
            <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
            <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
            <let><clip pos="1" side="tl" part="art"/><lit v=""/></let>
          </when>
          <otherwise>
            <let><clip pos="1" side="tl" part="whole"/><concat><clip pos="1" side="tl" part="whole"/><lit-tag v="ind"/></concat></let>
          </otherwise>
        </choose>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_pre_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="4" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="4" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="4" side="tl" part="case"/></tag>
              <tag><lit-tag v="pers-pro"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
            <b pos="3"/>
            <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_nom"/>
              <clip pos="4" side="tl" part="gen"/>
              <clip pos="4" side="tl" part="gen-case"/>
              <clip pos="4" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[TV] nom.cmp nom.prop_attr nom.prop.antcog" c="Ruvdnaprinsa Harald → Kronprins Harald
                   Uses NOM.PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.antcog"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <!-- for NOM.CMP: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <!-- no space after cmp -->

        <!-- for NOM.PROP_ATTR, no defnes if proper, ind if n -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for NOM.PROP.ANTCOG -->
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <!-- <rules: Noun, numeral+noun and compounds -->


    <rule comment="C[_] nom_all (tl: NOM, VERB)
                   This is a catch-all rule; it's OK that some paths are blocked by previous rules.">
      <pattern>
        <pattern-item n="nom_all"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <choose><when><test>
	    <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.pers"/></equal></test>
        <out>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
            </lu>
          </chunk>
        </out></when>
                  <otherwise>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>
          </otherwise></choose>
     </action>
    </rule>

    <rule comment="C[D] lex-jahki num-year" c="áviisa vuođđuduvvui jagis 1899 = avisa ble grunnlagt i 1899">
      <pattern>
        <pattern-item n="lex-jahki"/>
        <pattern-item n="num-year"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="nom">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
              <tag><clip pos="1" side="tl" part="a_count"/></tag>
            </tags>
<!--            <lu>  not år
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>  -->
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="C[D] lex-jahki num-year month" c="Váldodoaimmaheaddjin jagi 2015 golggotmánu rájes lea Eilif Andreas Aslaksen = Som redaktør fra oktober 2015 er Eilif Andreas Aslaksen">
      <pattern>
        <pattern-item n="lex-jahki"/>
        <pattern-item n="num-year"/>
        <pattern-item n="month"/>
      </pattern>
      <action>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_nom">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
              <tag><clip pos="1" side="tl" part="a_count"/></tag>
            </tags>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="C[TV] num nom.gen_NUMl" c="
                   Here the head (caseprep, syn_label) is the numeral!
                   Numerals take genitive case, chunk case is numeral case,
                   so we don't use out_nom
                   TODO: enforce double defnes? (de tre bilene)">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="nom.gen_NUMl"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <let><var n="blank"/><b pos="1"/></let>
        <choose>
          <when>
            <test><or>
              <begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with>
              <equal><clip pos="2" side="tl" part="a_nom"/><lit-tag v="n.acr"/></equal>
            </or></test>
            <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
          </when>
          <when c="logi-jagáš → tiåret">
            <test><and>
              <equal><clip pos="2" side="tl" part="lemh"/><lit v="år"/></equal>
              <equal><b pos="1"/><lit v="-"/></equal>
              <not><equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_year"/></equal></not>
            </and>
            </test>
            <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></let>
            <let><var n="defnes"/><lit-tag v="def"/></let>
            <let><var n="blank"/><lit v=""/></let>
          </when>
          <when c="2015 golggotmánu">
            <test>
              <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_year"/></equal>
            </test>
            <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></let>
            <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
            <let><var n="defnes"/><lit-tag v="ind"/></let>
          </when>
          <otherwise>
            <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
            <let><clip pos="2" side="tl" part="case"/><lit v=""/></let>
          </otherwise>
        </choose>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <let><var n="pre-nom"/>
        <concat>
          <lit v="^"/>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_num"/>
            <clip pos="1" side="tl" part="gen"/>
            <clip pos="1" side="tl" part="nbr"/>
            <clip pos="1" side="tl" part="lemq"/>
          <lit v="$"/>
          <var n="blank"/>      <!-- b pos=1 by default -->
        </concat>
        </let>

        <!-- This will warn, but we do want the numeral's syn_label on the chunk -->
        <let><clip pos="2" side="sl" part="syn_label"/><clip pos="1" side="sl" part="syn_label"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] num num_mod nom.gen_NUMl" c="7,6 miljovnna ruvnnu">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom.gen_NUMl"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="pl"/></let>
        <let><clip pos="3" side="tl" part="nbr"/><lit-tag v="pl"/></let>
        <let><clip pos="2" side="tl" part="case"/><lit v=""/></let>
        <let><clip pos="3" side="tl" part="case"/><lit v=""/></let>

        <let><var n="pre-nom"/>
        <concat>
          <lit v="^"/>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_num"/>
            <clip pos="1" side="tl" part="gen"/>
            <clip pos="1" side="tl" part="nbr"/>
            <clip pos="1" side="tl" part="lemq"/>
            <clip pos="1" side="tl" part="lemq"/>
          <lit v="$"/>
          <b pos="1"/>
          <lit v="^"/>
            <clip pos="2" side="tl" part="lemh"/>
            <clip pos="2" side="tl" part="a_nom"/>
            <clip pos="2" side="tl" part="gen"/>
            <clip pos="2" side="tl" part="nbr"/>
            <clip pos="2" side="tl" part="lemq"/>
            <lit-tag v="ind"/>
          <lit v="$"/>
          <b pos="2"/>
        </concat>
        </let>

        <!-- This will warn, but we do want the numeral's syn_label on the chunk -->
        <let><clip pos="3" side="sl" part="syn_label"/><clip pos="1" side="sl" part="syn_label"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] nom.gen num_mod nom.gen_NUMl nom_head" c="Gonagasbára 80 jagi beaivedoaluide">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom.gen_NUMl"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>

        <!-- for num_mod -->
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for nom.gen_NUMl -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><clip pos="3" side="tl" part="case"/><lit v=""/></let>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>



    <rule comment="C[V] num_mod nom_head" c="
                   Oblique use of num nom, here the nominal is the head (caseprep, syn_label)
                   so we use out_nom
                   (but we copy genitive-case and number from the numeral onto the nom).
                   TODO: should we really copy genitive-case over? ('lea vuosttaš prinsa 567 jahkái')">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <let><var n="seen_num"/><clip pos="1" side="sl" part="a_num"/></let> <!-- illative på -->

        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <choose>
          <when>
            <test><and>
              <not><equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
              <or>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="en"/></equal>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="én"/></equal>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="1"/></equal>
                <and>
                <ends-with><clip pos="1" side="tl" part="lemh"/><lit v="%"/></ends-with>
                <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                </and>
              </or>
            </and></test>
            <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="sg"/></let>
          </when>
          <when c="2016 beaivái">
          <test>
          <not><equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_year"/></equal></not>
          </test>
            <let><clip pos="2" side="tl" part="nbr"/><lit-tag v="pl"/></let>
          </when>
          <when c="Bures boahtin 2016 beaivái">
          <test><and>
          <equal><clip pos="1" side="sl" part="a_sem"/><lit-tag v="sem_year"/></equal>
       <not><in caseless="yes"><clip pos="2" side="tl" part="lemh"/><list n="noun.pseudo-prop"/></in></not>
       </and></test>
          <let><var n="defnes"/><lit-tag v="def"/></let>
          </when>
        </choose>
        <choose>
          <when>
            <test><equal><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@Num←"/></equal></test>
            <let><clip pos="2" side="sl" part="syn_label"/><clip pos="1" side="sl" part="syn_label"/></let>
          </when>
        </choose>

        <let><clip pos="2" side="tl" part="case"/><lit v=""/></let>
        <!-- <let><clip pos="2" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let> -->
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
        <let><var n="seen_num"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[V] num_mod nom.cmp nom_head" c="
                   See num_mod nom_head">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><clip pos="3" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="3" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="3" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when>
         </choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] num_mod adj_vblex_attr nom_head" c="
                   22 jahkásaš Tine        → 22 år gamle Tine
                   22 jahkásaš viesu       → det 22 år gamle huset / 22 år gammelt hus
                   guokte jahkásaš gumppe  → den to år gamle ulven / to år gammel ulv
                   BUT:
                   guokte stuora viesu     → de to store husene    / to store hus
                   guokte buori viesu      → de to gode husene     / to gode hus
                   guokte buori jagi       → de to gode årene      / to gode år
                   okta sámegielalaš bargi → en samiskspråklig ansatt
                   ALSO OBLIQUE:
                   golmmain stuora vuogádagain → med tre store system
                   TODO: num_mod nom_head">
      <!--
          Intended matches:
          ^9<num><sg><nom><@HNOUN>$ ^jahkásaš<a><attr><@→N>$ ^álbmotskuvla<n><sg><nom><@HNOUN>$
          okta<num><sg><nom><@→N>/en<det><qnt><GD><sg><nom><@→N> gassat<a><attr><@→N>/tykk<adj><sint><pst><GD><ND><@→N> nisu<n><sg><nom><@SUBJ→>/kvinne<n><f><sg><nom><@SUBJ→>
          guokte dehálaš čilgehusa – her skal nbr over på adj/subst

          More suspicious matches:
          1922:s parlamentáralaš skuvlakommišuvnna
          C<num><nom><@→N>/C<det><qnt><pl><nom><fixedcase><@→N> Liekkas<a><sup><attr><@→N>/Varm<adj><sint><sup><attr><@→N> mánotbadji<n><sg><nom><@SUBJ→>/måned<n><m><sg><nom><@SUBJ→>
          1976<num><sg><acc><@→N>/1976<det><qnt><pl><acc><@→N> dálá<a><attr><@→N>/nåtidig<adj><sint><pst><GD><ND><@→N> lullisámegiella<n><sg><gen><@Num←>/sørsamisk<n><m><sg><gen><@Num←>
      -->
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <choose>
          <when>
            <test><and>
              <not><equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
              <or>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="en"/></equal>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="én"/></equal>
                <equal><clip pos="1" side="tl" part="lemh"/><lit v="1"/></equal>
                <and>
                <ends-with><clip pos="1" side="tl" part="lemh"/><lit v="%"/></ends-with>
                <equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                </and>
              </or>
            </and></test>
            <let><clip pos="3" side="tl" part="nbr"/><lit-tag v="sg"/></let>
          </when>
          <otherwise>
            <let><clip pos="3" side="tl" part="nbr"/><lit-tag v="pl"/></let>
          </otherwise>
        </choose>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <choose>
          <when>
            <test><equal><clip pos="2" side="tl" part="lemh"/><lit v="år gammel"/></equal></test>
            <let><var n="defnes"/><lit-tag v="def"/></let>
          </when>
          <otherwise>
            <let><var n="defnes"/><lit-tag v="ind"/></let>
          </otherwise>
        </choose>
        <choose>
          <when>
            <test><equal><clip pos="3" side="sl" part="syn_label"/><lit-tag v="@Num←"/></equal></test>
            <let><clip pos="3" side="sl" part="syn_label"/><clip pos="1" side="sl" part="syn_label"/></let>
          </when>
        </choose>

        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <let><clip pos="3" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] num_mod det_mod adj_vblex_attr nom_head
                   –––––
                   máŋggain eará smávit fatnasiiguin → med de mange andre mindre båtene">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="2"/><with-param pos="4"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="3"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>
        <let><clip pos="4" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="4" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="4" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="4" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] num_mod det_mod nom_head
                   –––––
                   čieža eará boazoeaiggádat ">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="2"/><with-param pos="3"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="2" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="3" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
          </and></test>
          <let><clip pos="3" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] det_mod det_mod nom_head
                   –––––
                   dat eará boazoeaiggádat ">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="clean_det"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="2" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <choose><when>
          <test><and>
            <not><equal><clip pos="3" side="sl" part="a_count"/><lit-tag v="coll"/></equal></not>
            <not><equal><clip pos="3" side="tl" part="nbr"/><lit-tag v="sp"/></equal></not>
            <or>
              <equal><var n="prn_nbr"/><lit-tag v="sg"/></equal>
              <equal><var n="prn_nbr"/><lit-tag v="pl"/></equal>
            </or>
          </and></test>
          <let><clip pos="3" side="tl" part="nbr"/><var n="prn_nbr"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] num_mod nom.gen nom_head
                   Oblique use of num nom, here the final nominal is the head
                   See num_mod nom_head rule.">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="2" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <append n="pre-nom">
          <concat>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>


<!--    <rule comment="C[] ADJ.CMP NOM
                   –––––
                   allaskuvla → høyskole
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule> -->

    <rule comment="C[] nom-adj.cmp nom_head
                   –––––
                   politiijastašuvnna → politistasjon(s)
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] nom.prop.gen nom.unprop.gen nom-adj.cmp nom_head
                   –––––
                   Finnmárkku journalistasearvvi journalistabálkkašumi → Finnmark journalistklubbs journalistpris
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="nom.prop.gen"/>
        <pattern-item n="nom.unprop.gen"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <!-- Prop -->
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- cmp -->
        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>

        <!-- head -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] nom-adj.cmp nom.cmp nom_head
                   –––––
                   Ruvdnaprinsabáras → Kronprinsparet
                   Moves syn_label from first CMP to NOM">
      <pattern>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] cmp nom_head
                   –––––
                   vuođđofága → grunnfag
                   mielbargin → som medarbeider
                   Words which only appear as compound parts should be fully specified in bidix.
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>
        <let><clip pos="1" side="tl" part="a_cmp"/><lit v=""/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="whole"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] nom-adj.cmp adj
                   –––––
                   sámegiel → samespråklig
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="pre_adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><var n="defnes"/></tag>
	          <tag><clip pos="2" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="1" side="sl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Lone determiners, pronouns, adverbs -->

    <rule comment="C[] neg-verb prn-nonreferential" c="ii goabbáge → ingen av dem
                   Like DET rule, but force nt sg">
      <pattern>
        <pattern-item n="neg-verb"/>
        <pattern-item n="prn-nonreferential"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="clean_det"><with-param pos="2"/></call-macro>
        <choose>
          <when>
            <test><equal><clip pos="2" side="sl" part="lemh"/><lit v="mihkke"/></equal></test>
            <let><clip pos="2" side="tl" part="lemh"/><lit v="ingenting"/></let>
            <let><clip pos="2" side="tl" part="tags"/><lit-tag v="prn.ind.un.sg.acc"/></let>
          </when>
          <otherwise>
            <let><clip pos="2" side="tl" part="lemh"/><lit v="ingen"/></let>
            <let><clip pos="2" side="tl" part="tags"/><lit-tag v="det.qnt.m.sg"/></let>
          </otherwise>
        </choose>

        <choose>
          <when>
            <test><in caseless="yes"><clip pos="2" side="sl" part="lemh"/><list n="guhte"/></in></test>
            <out>
              <var n="caseprep"/>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
              </chunk>
              <b pos="1"/>
              <chunk name="adpos">
                <tags>
                  <tag><lit-tag v="PR"/></tag>
                </tags>
                <lu>
                  <lit v="av"/>
                  <lit-tag v="pr"/>
                </lu>
              </chunk>
              <b/>
              <chunk name="prn">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                </tags>
                <lu>
                  <lit v="de"/>
                  <lit-tag v="prn.pers.p3.un.pl.acc"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <var n="caseprep"/>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                </tags>
                <lu>
                  <clip pos="2" side="tl" part="whole"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>


    <rule comment="C[] prn-nonreferential" c="maidege → noe
                   Like DET rule, but force nt sg">
      <pattern>
        <pattern-item n="prn-nonreferential"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/></call-macro>

        <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>
       <choose><when>
          <test>
            <equal><clip pos="1" side="sl" part="lemh"/><lit v="goabbá"/></equal>
          </test>
          <let><clip pos="1" side="tl" part="gen"/><lit-tag v="m"/></let>
        </when></choose>

        <out>
          <var n="caseprep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[D] prn.res prn.res" c="goabbat guoibmáseaskka - til hverandre">
      <pattern>
        <pattern-item n="prn.res"/>
        <pattern-item n="prn.res"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="2"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="gen"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_prn"/>
              <clip pos="2" side="tl" part="pers"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] prn.res">
      <pattern>
        <pattern-item n="prn.res"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] prn.gen.P
                   Only runs where tl is *not* a determiner.">
      <pattern>
        <pattern-item n="prn.gen.P"/>
      </pattern>
      <action>
        <choose><when>
          <test><not><equal><clip pos="1" side="tl" part="a_det"/><lit v=""/></equal></not></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="modify_prn_case"><with-param pos="1"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[] DET dán → dette adf
                   munno [geažil] → [på grunn av] oss to">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/></call-macro>

        <choose><when c="dát alone is nearly always 'dette'">
          <test><equal caseless="yes"><clip pos="1" side="sl" part="lemh"/><lit v="dát"/></equal></test>
          <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>
        </when></choose>
        <choose><when>
          <test>
          <not><equal><clip pos="1" side="sl" part="ext"/><lit v=""/></equal></not>
          </test>
          <let><var n="c_syn"/><lit-tag v="@←SUBJext"/></let>
        </when>
        <otherwise>
          <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
         </otherwise>
       </choose>
       <choose><when><test>
	    <equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.pers"/></equal>   
       </test>
        <call-macro n="set_foc-word"><with-param pos="1"/></call-macro>
	        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <var n="foc-word"/>
        </out>
          </when>
        <otherwise>
        <out>
          <var n="caseprep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
                  <tag><var n="c_syn"/></tag>
	           <tag><clip pos="1" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="sl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        </otherwise></choose>
      </action>
    </rule>

    <rule comment="C[DL] lex-diibmá lex-diibmá-compl" c="diibmá ektui : sammenliknet med i fjor">
      <pattern>
        <pattern-item n="lex-diibmá"/>
        <pattern-item n="lex-diibmá-compl"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
                  <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adv_pr_cnjcoo"/>
             </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/>
             </lu>
         </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[DL] prn.rel lex-birra" c="man/gean birra - om hva/hvem">
      <pattern>
        <pattern-item n="prn.rel"/>
        <pattern-item n="lex-birra"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
      <choose><when>
	      <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="hvis"/></equal></test>
	      <let><clip pos="1" side="tl" part="lemh"/><lit v="hvilket"/></let>
	      </when></choose>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SR"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="a_rel"/></tag>
            </tags>
            <lu>
              <lit v="om"/><lit-tag v="pr"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="lemq"/>
             </lu>
         </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>
    <rule comment="C[] RELATIVE_PRONOUN gii → som
                   Just removes everything.
                   (Should we call the chunk something else maybe?)">
      <pattern>
        <pattern-item n="prn.rel"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
               <tag><lit-tag v="SR"/></tag>
             <tag><clip pos="1" side="sl" part="syn_label"/></tag>
	           <tag><clip pos="1" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[] REFLEXIVE_PRONOUN ieš → seg / h*n
                   Just removes everything from normal reflexives,
                   changes @-FOBJ→ reflexives into personal pronouns with GD + nom
                   Does not match genitive reflexives (treated as det.pos)
                   TODO: Son osku iežas(@-FSUBJ→) bestojuvvon(@X)">
      <pattern>
        <pattern-item n="prn.ref"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>

        <choose>
          <when>
            <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="prpers"/></equal></test>
            <out>
              <var n="caseprep"/>
              <chunk name="prn" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
	              <tag><clip pos="1" side="sl" part="hab"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><lit-tag v="GD"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><lit-tag v="nom"/></tag>
                </tags>
                <lu>
                  <lit v="prpers"/>
                  <lit-tag v="prn.pers"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <lit-tag v="GD"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="nom"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="Adverb (eg. 'på egen hånd'): no caseprep">
            <test><not><equal><clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
               <tag><lit-tag v="ADV"/></tag>
                 <tag><lit-tag v="@ADVL"/></tag>
                  <tag><clip pos="1" side="tl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="selv.det.emph">
            <test><and>
              <not><equal><clip pos="1" side="tl" part="a_det"/><lit v=""/></equal></not>
              <not><equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@Pron←"/></equal></not>
            </and></test>
            <out>
              <var n="caseprep"/>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="selv.det.emph.@Pron← Lene added. Mis leat alddámet ain šibihat.">
            <test><and>
              <not><equal><clip pos="1" side="tl" part="a_det"/><lit v=""/></equal></not>
            <equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@Pron←"/></equal></and></test>
            <out>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <lit-tag v="un.sp"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="prn.ref">
            <test><equal><clip pos="1" side="tl" part="a_prn"/><lit-tag v="prn.ref"/></equal></test>
            <out>
              <var n="caseprep"/>
              <chunk name="prn" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
	              <tag><clip pos="1" side="sl" part="hab"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_prn"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <lit-tag v="mf"/>
                  <lit-tag v="ND"/>
                  <clip pos="1" side="tl" part="case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
              <var n="caseprep"/>
              <chunk name="prn" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
	              <tag><clip pos="1" side="sl" part="hab"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_prn"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="C[] prn.pers prn.ref_PRONl
                   (Jus in livčče) mun ieš → (Hvis jeg ikke kan være) meg.acc selv
                   Changes prpers case to accusative.
                   TODO: Does it put acc on too much? E.g.
                   moai ieža vel válljejetne → vi_to.nom selv (vi_to velger)">
      <pattern>
        <pattern-item n="prn.pers"/>
        <pattern-item n="prn.ref_PRONl"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>

        <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>

        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="det">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="gen"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <clip pos="2" side="tl" part="a_prn"/>
              <clip pos="2" side="tl" part="pers"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="C[] prnitg mii → hva">
      <pattern>
        <pattern-item n="prnitg"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
	          <tag><clip pos="1" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="tl" part="a_prn"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] prn.pers
                   This will catch genitive pronouns too (we're outputting both a_prn and a_det).
                   Not all genitive pronouns turn into determiners.">
      <pattern>
        <pattern-item n="prn.pers"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="set_foc-word"><with-param pos="1"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="hab"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <var n="foc-word"/>
        </out>
      </action>
    </rule>

    <!-- <rules: DET* ADJ* NOM* -->

    <rule comment="C[] adj
                   –––––
                   dehálaš → viktig, deháleamos → viktigst
                   bassivuođa → det hellige">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
          <let><var n="caseprep"/><lit v=""/></let>

        <choose><when c="de aliduvvui Gonagas Olav bassin.">
          <test><and>
          <equal><clip pos="1" side="sl" part="case"/><lit-tag v="ess"/></equal>
           <not><equal><var n="main-verb-sl"/><lit v="šaddat"/></equal></not>
         </and></test>
          <let>
            <var n="caseprep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR"/>
              <lit v="{^"/>
              <lit v="som"/>
              <lit-tag v="pr"/>
              <lit v="$}$"/>
              <b />
            </concat>
          </let>
        </when></choose>
        <choose>
          <when c="guovdageaidnulaš → kautokeinoværing">
            <test><equal><clip pos="1" side="tl" part="a_nom_all"/><lit-tag v="n"/></equal></test>
            <let><var n="defnes"/><lit-tag v="ind"/></let>
            <let><clip pos="1" side="tl" part="nbr"/><clip pos="1" side="sl" part="nbr"/></let>
            <let><var n="c_name"/><lit v=""/></let>
            <let><var n="pre-nom"/><lit v=""/></let>
            <call-macro n="out_nom"><with-param pos="1"/></call-macro>
          </when>
          <when c="buoremus = den beste">
            <test><or>
            <not><equal><clip pos="1" side="sl" part="a_nom_all"/><lit v=""/></equal></not>
             <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="sup"/></equal>
           </or></test>
         <choose><when c="son lea buoremusaid searvvis">
          <test><equal><clip pos="1" side="sl" part="nbr"/><lit-tag v="pl"/></equal></test>
           <let><var n="tmp"/><lit-tag v="pl"/></let>
          </when>
         <otherwise>
          <let><var n="tmp"/><lit-tag v="sg"/></let>
         </otherwise>
         </choose>
            <let><var n="defnes"/><lit-tag v="def"/></let>
            <out>
              <chunk name="pre_adj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SA"/></tag>
                  <tag><var n="c_syn"/></tag>
                  <tag><var n="defnes"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><lit-tag v="nt"/></tag>
                  <tag><lit-tag v="sg"/></tag>
                  <tag><clip pos="1" side="sl" part="case"/></tag>
                </tags>
                <lu>
                  <lit v="den"/><lit-tag v="det.dem.nt"/>
                  <var n="tmp"/>
                </lu>
                <b/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adj"/>
                  <clip pos="1" side="tl" part="grau"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="3"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>
            <out>
            <var n="caseprep"/>
              <chunk name="adj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SA"/></tag>
                  <tag><var n="c_syn"/></tag>
                  <tag><var n="defnes"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><var n="c_gen"/></tag>
                  <tag><var n="c_nbr"/></tag>
                  <tag><clip pos="1" side="sl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adj"/>
                  <clip pos="1" side="tl" part="grau"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="3"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
          <let><var n="caseprep"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[] adj_vblex_attr nom_head
                   –––––
                   almmolaš bálvalusaide → til offentlige tjenester
                   almmolaš bálvalus → (den) offentlige tjenesten">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>


        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] adj_vblex_attr conj adj_vblex_attr nom_head" c="Girjji namma lea ohppojuvvon ja sohppojuvvon giella">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="conj"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="3"/></call-macro>

        <let><var n="c_name"/><lit v="pre_conj_pre_"/></let>

        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_conj"/>
              <clip pos="2" side="tl" part="a_part"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] nom.prop.gen adj_vblex_attr conj adj_vblex_attr nom_head" c="Sámedikki nana ja čielga vuostálastin">
      <pattern>
        <pattern-item n="nom.prop.gen"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="conj"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="5"/><with-param pos="1"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="5"/><with-param pos="2"/></call-macro>
        <call-macro n="modify_adj_gen_nbr"><with-param pos="5"/><with-param pos="4"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_conj_pre_"/></let>

        <call-macro n="set_defnes2"><with-param pos="5"/><with-param pos="1"/></call-macro>

        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="gen-case"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="3"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_conj"/>
              <clip pos="3" side="tl" part="a_part"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
            <b pos="3"/>
            <lit v="^"/>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_adj"/>
              <clip pos="4" side="tl" part="grau"/>
              <clip pos="4" side="tl" part="gen"/>
              <clip pos="4" side="tl" part="nbr"/>
              <!-- We set use chunk defnes here for both adj and nom,
                   so that if defnes changes in t2x/t3x, both adj and nom
                   get the change in t4x -->
              <lit-tag v="3"/>
              <clip pos="4" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="4"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="5"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] adj_vblex_attr adj_vblex_attr nom_head
                   –––––
                   ođđa almmolaš bálvalusaide → til nye offentlige tjenester
                   ođđa almmolaš bálvalus → (den) nye offentlige tjenesten">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <!-- for ADJ_ATTR's -->
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for NOM_HEAD -->
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR ADJ_ATTR NOM.CMP NOM
                   –––––
                   ođđa digitála heahtefierpmádat → det nye digitale nødnettverket
                   TODO: epenthesis!
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <!-- for ADJ_ATTR's -->
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for NOM.CMP -->
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>

        <!-- for NOM_HEAD -->
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] ADJ_ATTR NOM.CMP NOM
                   –––––
                   duiska okkupašuvdnafápmu → tysk okkupasjonsmakt
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <!-- for ADJ_ATTR -->
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for NOM.CMP -->
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <!-- for NOM_HEAD -->
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] ADJ_ATTR NOM.CMP NOM.CMP NOM
                   –––––
                   Dalá Ruvdnaprinsabáras → Daværende Kronprinsparet
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="2"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <!-- for ADJ_ATTR -->
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for NOM.CMP -->
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>

        <!-- for NOM_HEAD -->
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] PRON-NONREFERENTIAL NOM.@→P
                   (Ii daddjo)  mihkkege almenneha  (birra) → noe om allmenningen
                   Don't chunk in this case.">
      <pattern>
        <pattern-item n="prn-nonreferential"/>
        <pattern-item n="nom_rP"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <call-macro n="clean_det"><with-param pos="1"/></call-macro>

        <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>
        <out>
          <var n="caseprep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
        </out>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="C[] det_mod nom_head
                   du bávččas → din smerte
                   eará sámi → annen same">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- TODO earáin ruovttusiidduide → av_andre til_hjemmesidene: -->
        <!-- <exception><test><not><equal><clip pos="1" side="sl" part="case"/><clip pos="2" side="sl" part="case"/></equal></not></test></exception> -->
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <choose c="Lene added this : ieš - selv">
          <when>
            <test>
              <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.emph"/></equal>
            </test>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
            <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
          </when>
        </choose>
        <choose c="hvilken">
          <when>
            <test>
              <equal><clip pos="1" side="sl" part="a_prn"/><lit-tag v="prn.itg"/></equal>
            </test>
        <let><var n="c_neverdet"/><lit-tag v="neverdet"/></let>
          </when>
        </choose>
        <choose c="Lene added this: eará - annen">
          <when>
            <test><and>
              <in caseless="yes"><clip pos="1" side="tl" part="lemh"/><list n="annen"/></in> <!-- perhaps we don't need this list -->
              <equal><clip pos="2" side="tl" part="nbr"/><lit-tag v="pl"/></equal></and>
            </test>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
          </when>
        </choose>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
            <clip pos="1" side="tl" part="lemh"/>
            <clip pos="1" side="tl" part="a_det"/>
            <clip pos="1" side="tl" part="a_adj"/>
            <var n="prn_gen"/>
            <var n="prn_nbr"/>
            <clip pos="1" side="tl" part="art"/>
            <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] det_mod nom-adj.cmp nom_head
                   eará skuvlamánáin → andre skolebarnene">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
            <clip pos="1" side="tl" part="a_adj"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] det_mod adj_vblex_attr nom-adj.cmp nom_head "
                 c="makkárge earenoamáš heahteveahkkedoaimmaid">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="4"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
            <clip pos="1" side="tl" part="a_adj"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="art"/>
              <clip pos="3" side="tl" part="a_cmp"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] DET NOM.CMP NOM.CMP NOM
                   du idjabeavdeskuffas → i din nattbordskuff">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="3"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="4"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="art"/>
              <clip pos="3" side="tl" part="a_cmp"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

<!--    <rule comment="C[] DET ADJ.CMP NOM
                   min nuoramus bártni → til vår yngste gutt
                   min nuoramus olbmot → våre yngste mennesker
                   du deháleamos doaibma → din viktigste oppgave
                   mu stuora givssi → til min store plage
                   juohke lágán geđggiiguin → med alle slags steiner
                   TODO: demonstrative 'denne viktige oppgaven' (def!)">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/> -->
<!--              <clip pos="2" side="tl" part="nbr"/>-->
<!--              <lit-tag v="sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/> -->
            <!-- <b pos="2"/> -->
<!--          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>  -->



    <rule comment="C[] det_mod adj_vblex_attr nom_head
                   min nuoramus bártni → til vår yngste gutt
                   min nuoramus olbmot → våre yngste mennesker
                   du deháleamos doaibma → din viktigste oppgave
                   mu stuora givssi → til min store plage
                   juohke lágán geđggiiguin → med alle slags steiner
                   TODO: demonstrative 'denne viktige oppgaven' (def!)">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] det_mod adj_vblex_attr adj_vblex_attr nom_head" c="dan vuosttaš sámi čoahkkimii - not perfect yet, look at 3">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="4"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="3" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="3" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] det_mod adj_vblex_attr adj_vblex_attr nom-adj.cmp nom_head" c="dan vuosttaš sámi árvoháhkanbálkkašumi">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="5"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="5"/><with-param pos="3"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="clean_cmp"><with-param pos="4"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_pre_"/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="5"/><with-param pos="1"/></call-macro>
        <!-- for NOM.GEN -->
        <choose><when>
          <test><begins-with><clip pos="3" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="3" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
              <lit v="^"/>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_nom"/>
              <clip pos="4" side="tl" part="gen"/>
              <clip pos="4" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="4" side="tl" part="a_cmp"/>
              <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="5"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] nom.gen det_mod adj_vblex_attr nom_head
                   –––––
                   riikka nubbi davvisámegiel namma → landets andre nordsamiske navn
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.
                   Ensure det is definite (using clip, only sets if it has a defnes tag).">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="2"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="2"/><with-param pos="4"/></call-macro>
        <let><clip pos="2" side="tl" part="art"/><lit-tag v="def"/></let>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="2"/><with-param pos="3"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
          <let><var n="defnes"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when></choose>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="2" side="tl" part="art"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_adj"/>
              <clip pos="3" side="tl" part="grau"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="3" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="3"/>
          </concat>
        </let>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] adj_vblex_attr nom.gen nom_head
                   –––––
                   aktonas mánáid gatnjaliiguin → ensomme barns tårer
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <!-- for ADJ_ATTR -->
        <let><var n="defnes"/><lit-tag v="def"/></let>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>
    <rule comment="C[] nom.gen cc nom.gen adj_vblex_attr nom_head" c="Álbmotskuvlla ja oahpaheaddjiseminára gaskasaš áigi : Tida mellom folkeskole og lærerseminar.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="cc"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="lex-gaskasaš"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="5"/></call-macro>
          <out>
            <chunk name="pre_pre_nom_conj_nom" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><var n="c_syn"/></tag>
                <tag><lit v="def"/></tag>
                <tag><clip pos="5" side="tl" part="case"/></tag>
                <tag><clip pos="5" side="tl" part="a_count"/></tag>
              </tags>
              <lu>
                <clip pos="5" side="tl" part="lemh"/>
                <clip pos="5" side="tl" part="a_nom"/>
                <clip pos="5" side="tl" part="gen"/>
                <clip pos="5" side="tl" part="nbr"/>
                <lit-tag v="def"/>
                <clip pos="5" side="tl" part="lemq"/>
              </lu>
              <b pos="1"/>
              <lu>
                <clip pos="4" side="tl" part="lemh"/>
                <clip pos="4" side="tl" part="a_prep"/>
              </lu>
               <b pos="2"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_nom"/>
                <clip pos="1" side="tl" part="gen"/>
                <clip pos="1" side="tl" part="nbr"/>
                <lit-tag v="ind"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
              <b pos="3"/>
              <lu>
                <clip pos="2" side="tl" part="lemh"/>
                <clip pos="2" side="tl" part="a_conj"/>
              </lu>
               <b pos="4"/>
              <lu>
                <clip pos="3" side="tl" part="lemh"/>
                <clip pos="3" side="tl" part="a_nom"/>
                <clip pos="3" side="tl" part="gen"/>
                <clip pos="3" side="tl" part="nbr"/>
                <lit-tag v="ind"/>
                <clip pos="3" side="tl" part="lemq"/>
              </lu>
           </chunk>
          </out>
      </action>
    </rule>
    <rule comment="C[] nom.gen adj_vblex_attr nom_head
                   –––––
                   gieldda stuorimus mánáidgárdi → kommunens største barnehage
                   Sámi pedagogalaš bargi bargá doppe → En samisk pedagogisk ansatt arbeider der borte
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.
                   ">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        
        <choose><when c="gielaid gaskasaš relašuvnnaid">
        <test><equal><clip pos="2" side="tl" part="a_prep"/><lit-tag v="pr"/></equal></test>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><clip pos="1" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="append_pre-nom"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>
        <call-macro n="append_pre-nom"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>
        </when> 
        <otherwise>
        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for ADJ_ATTR -->
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
        </otherwise></choose>
      </action>
    </rule>

    <rule comment="C[] adj_vblex_attr nom.gen adj_vblex_attr nom_head
                   –––––
                   Son lea nuorra Ristena boares biilla siste. → Han/Hun er i unge Ristens gamle bil.
                   nuorra sámi boares biilla → en ung samisk gammel bil
                   nuorra Ristena boares biilla → den unge Ristens gamle bil
                   Čeahpes sámi pedagogalaš bargi bargá mánáidgárddis. → Den flinke samiske pedagogiske ansatte arbeider i barnehagen. (defnes TODO)
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <!-- for first ADJ_ATTR -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for second ADJ_ATTR -->
        <choose>
          <when c="Previous word was a real NOM.GEN">
            <test><equal><clip pos="2" side="tl" part="a_adj"/><lit v=""/></equal></test>
            <let><var n="defnes"/><lit-tag v="def"/></let>
          </when>
          <!-- <otherwise c="Use defnes of previous word"> -->
          <!-- </otherwise> -->
        </choose>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] num_mod nom.gen_NUMl adj_vblex_attr nom_head" c="24 mehter guhkkosaš dáidda čájehuvvo">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom.gen_NUMl"/>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <!-- for num_mod -->
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for nom.gen_NUMl -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><clip pos="2" side="tl" part="case"/><lit v=""/></let>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for adj_vblex_attr -->
        <choose>
          <when c="Previous word was a real NOM.GEN">
            <test><equal><clip pos="2" side="tl" part="a_adj"/><lit v=""/></equal></test>
            <let><var n="defnes"/><lit-tag v="ind"/></let>
          </when>
          <!-- <otherwise c="Use defnes of previous word"> -->
          <!-- </otherwise> -->
        </choose>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <!-- for NOM_HEAD -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] DET ADJ
                   –––––
                   Always definite in nob if det is a possessive,
                   TODO: defnes for other determiners, perhaps need c_def_pos
                   TODO: is this a common pattern?">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="maybe_det_nbr_to_adj"><with-param pos="1"/><with-param pos="2"/></call-macro>

        <let><var n="defnes"/><lit-tag v="def"/></let>

        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="2" side="sl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <var n="prn_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>

              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] num adj-sup" c="son lea 10 buoremusa searvvis">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="adj-sup"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>

        <let><var n="defnes"/><lit-tag v="def"/></let>

        <call-macro n="set_caseprep"><with-param pos="2"/></call-macro>

        <out>
          <var n="caseprep"/>
          <chunk name="pre_pre_adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><lit-tag v="pl"/></tag>
              <tag><clip pos="2" side="sl" part="case"/></tag>
            </tags>
                <lu>
                  <lit v="den"/><lit-tag v="det.dem.un.pl"/>
                </lu>
                <b/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] nom.prop.gen nom_head
                   –––––
                   Defnes of possessed NOM is ind (NOM.PROP has no defnes).
                   Needs to be before NOM.GEN NOM">
      <pattern>
        <pattern-item n="nom.prop.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[T] nom.prop_attr nom.prop.gen nom_head
                  Christina Henriksena mielas">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <!-- prop_attr can match n's as well, so set defnes: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>


    <rule comment="C[T] nom.prop_attr nom.prop.gen nom_head
                   Jođiheaddji Christina Henriksena mielas">
      <pattern>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop_attr"/>
        <pattern-item n="nom.prop.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_pre_"/></let>

        <!-- prop_attr can match n's as well, so set defnes: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>
        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <call-macro n="append_pre-nom"><with-param pos="4"/><with-param pos="3"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><var n="c_neverdet"/><lit-tag v="neverdet"/></let>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] nom.unprop.gen nom_head
                   –––––
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="nom.unprop.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <choose><when>
          <test><equal caseless="yes"><clip pos="1" side="tl" part="lemh"/><lit v="velkommen"/></equal></test>
          <reject-current-rule shifting="no"/>
        </when></choose>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_"/></let>

        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <choose><when>
          <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="samisk"/></equal></test>
          <let><var n="c_neverdet"/><lit-tag v="neverdet"/></let>
        </when></choose>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[L] lex-lohkka lex-uksa" c="dan dahket lohkka uvssaid duohken">
      <pattern>
        <pattern-item n="lex-lohkka"/>
        <pattern-item n="lex-uksa"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <let><var n="c_name"/><lit v="pre_"/></let>
      <choose><when>
      <test><equal><clip pos="2" side="sl" part="nbr"/><lit-tag v="pl"/></equal></test>
      <let><var n="tmp"/><lit-tag v="pl"/></let>
      </when>
      <otherwise>
      <let><var n="tmp"/><lit-tag v="nt.sg.ind"/></let>
      </otherwise>
      </choose>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <lit v="låse"/>
              <lit-tag v="adj.pp"/>
              <var n="tmp"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] NOM.GEN NOM.CMP NOM
                   –––––
                   Sámi gievkkanbargi → Samisk kjøkkenansatt
                   Sets defnes of possessor NOM.GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>


        <!-- for NOM.CMP -->
        <call-macro n="clean_cmp"><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

      </action>
    </rule>






    <rule comment="C[] nom-adj.cmp nom.gen nom_head" c="Sámi allaskuvlla neahtta-TV sáddagat rabasbeaivvi dilálašvuođas">
      <pattern>
        <pattern-item n="nom-adj.cmp"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <!-- for NOM.CMP -->
        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <!-- for NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>


        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] det_mod nom.gen nom_head
                   –––––
                   Min álbmoga boahtteáigi → Vårt folks framtid
                   dán jagi válggas → dette år(et)s valg
                   Sets defnes of possessor NOM.GEN based on DET, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="det_mod"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="pre_pre_"/></let>

        <!-- for DET_MOD NOM.GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="1"/></append>

        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <!-- for possessed NOM -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>



    <rule comment="C[] REL ADJ
                   –––––
                   man mávssolaččat → hvor viktig
                   (comp→pst in this construction)">
      <pattern>
        <pattern-item n="prn.rel"/>
        <pattern-item n="adj-nonord"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="2"/></call-macro>

        <out>
          <b pos="1"/>
          <chunk name="adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><clip pos="2" side="sl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <lit-tag v="pst.mf.sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] det_mod_num num_mod nom_head" c="Ii sáhte dadjat ahte diet 5 áirasa leat mannan njuolgga NSR:ii.">
      <pattern>
        <pattern-item n="det_mod_num"/>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_prn_gen_nbr_art2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="prn_gen"/>
              <lit-tag v="pl"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <lit-tag v="un"/>
              <lit-tag v="pl"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="3" side="sl" part="syn_label"/><clip pos="2" side="sl" part="syn_label"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>


    <rule comment="C[] NUMERAL">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseprep"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><equal><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="cmp_splitr"/></equal></test>
          <let><clip pos="1" side="tl" part="a_cmp"/><lit-tag v="guio"/></let>
        </when></choose>

        <out>
          <var n="caseprep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <let><var n="previous-nhead"/><lit v="NUMERAL"/></let>
      </action>
    </rule>

    <rule comment="C[] lpar num rpar" c="Aslaksen (53) lea bajásšaddan Hilláguras Deanus">
      <pattern>
        <pattern-item n="lpar"/>
        <pattern-item n="num"/>
        <pattern-item n="rpar"/>
      </pattern>
      <action>
        <out>
          <var n="caseprep"/>
          <chunk name="app" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
            </tags>
            <lu>
                <clip pos="1" side="tl" part="whole"/>
            </lu>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_num"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="a_cmp"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <lu>
                <clip pos="3" side="tl" part="whole"/>
            </lu>
         </chunk>
        </out>
      </action>
    </rule>


    <!-- <rules ADJ* GEN GEN+ NOM -->
    <!-- These rules output several chunks, since we put the head noun
         before the string of genitives. -->

    <rule comment="C[] NOM.GEN NOM.GEN NOM
                   dáčča skuvlla kopija → kopi av den norske skolen
                   Outputs _two chunks_, head noun first.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- for possessed NOM -->
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <out><b pos="1"/></out>

        <!-- for NOM.GEN NOM.GEN -->
        <!-- TODO: np.top.gen n.gen → n i.pr np.top.gen -->
        <!-- @N← is used by set_caseprep, and yes it should set it to side="sl", the warning is wrong! -->
        <let><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@N←"/></let>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>

        <let><clip pos="2" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] nom.gen nom.gen nom.gen nom_head (we need one with cmp nom_head)
                   –––––
                   Sámi soga lávlaga čállin → forfatteren av sangen om Samelands slekt (TODO: Samelands slekt → Samefolket)
                   sámi árvvuid oahpaheami vuođđu → et grunnlag for opplæringen i samens verdier
                   Oarje-Finnmárkku oahpaheddjiid searvvi jahkečoahkkin → som årsmøte til foreningen til Vest-Finnmarks lærere (TODO better)
                   Outputs _two chunks_, head noun first.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- for possessed NOM -->
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="4"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>

        <out><b pos="1"/></out>

        <!-- for third NOM.GEN -->
        <let><clip pos="3" side="sl" part="syn_label"/><lit-tag v="@N←"/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <let><clip pos="3" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <out><b pos="2"/></out>

        <!-- for first and second NOM.GEN -->
        <!-- TODO: np.top.gen n.gen → n i.pr np.top.gen -->
        <let><clip pos="2" side="sl" part="syn_label"/><lit-tag v="@N←"/></let>
        <let><var n="c_name"/><lit v="pre_"/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <let><clip pos="2" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>



    <rule comment="C[] ADJ_ATTR NOM.GEN NOM.GEN NOM
                   –––––
                   dábálaš dáčča skuvlla kopija → kopi av den vanlige norske skolen
                   Outputs _two chunks_, head noun first.">
      <pattern>
        <pattern-item n="adj_vblex_attr"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom.gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <!-- for possessed NOM -->
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="4"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>

        <out><b pos="1"/></out>

        <!-- for ADJ NOM.GEN NOM.GEN -->
        <!-- TODO: np.top.gen n.gen → n i.pr np.top.gen -->
        <let><clip pos="3" side="sl" part="syn_label"/><lit-tag v="@N←"/></let>
        <let><var n="c_name"/><lit v="pre_pre_"/></let>
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <append n="pre-nom"><b pos="2"/></append>
        <call-macro n="append_pre-nom"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <append n="pre-nom"><b pos="3"/></append>

        <let><clip pos="3" side="tl" part="gen-case"/><lit v=""/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <!-- <rules VERBS ETC. -->

    <rule comment="C[T]-V lex-mielde vblex.actio.ess" c="lea maid mielde váikkuheamen : er også med å påvirke">
      <pattern>
        <pattern-item n="lex-mielde"/>
        <pattern-item n="vblex.actio.ess"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="2"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV.@ADVL"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
			  <lit-tag v="adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            </chunk>
          <b pos="1"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@←ADVL"/></tag>
              <tag><clip pos="2" side="sl" part="a_actio"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="temps"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T]-V lex-orrut-indic adverb vblex.actio.ess" c="dat lea mielde ovddosguvlui ovddideamen giela">
      <pattern>
        <pattern-item n="lex-mielde"/>
        <pattern-item n="adverb"/>
        <pattern-item n="vblex.actio.ess"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="3"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV.@ADVL"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
			  <lit-tag v="adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            </chunk>
          <b pos="1"/>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV.@ADVL"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lem"/>
			  <lit-tag v="adv"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            </chunk>
          <b pos="2"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@←ADVL"/></tag>
              <tag><clip pos="3" side="sl" part="a_actio"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_verb"/>
              <clip pos="3" side="tl" part="temps"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[T]-V lex-orrut-indic vblex.actio.ess cc vblex.actio.ess" c="lea maid mielde váikkuheamen : er også med å påvirke">
      <pattern>
        <pattern-item n="lex-mielde"/>
        <pattern-item n="vblex.actio.ess"/>
        <pattern-item n="cc"/>
        <pattern-item n="vblex.actio.ess"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV.@ADVL"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lem"/>
			  <lit-tag v="adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            </chunk>
          <b pos="1"/>
          <chunk name="verb" >
            <tags>
              <tag><lit-tag v="SV.@←ADVL"/></tag>
              <tag><clip pos="1" side="sl" part="a_actio"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="temps"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="2"/>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_conj"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="3"/>
          <chunk name="verb">
            <tags>
              <tag><lit-tag v="SV.@ADVL"/></tag>
              <tag><clip pos="4" side="sl" part="a_actio"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <clip pos="4" side="tl" part="lemh"/>
              <clip pos="4" side="tl" part="a_verb"/>
              <clip pos="4" side="tl" part="temps"/>
              <clip pos="4" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[AT] vblex_abess" c="all in one chunk, so we can change word order if it comes after the object">
      <pattern>
        <pattern-item n="vblex_abess"/>
      </pattern>
      <action>
        <call-macro n="reset_caseFirstWord"></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>
      <choose><when c="Append 'seg' if reflexive:">
        <test>
          <equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal>
        </test>
            <let><var n="prn_pers"/><lit-tag v="p3"/></let>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
            <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
        <let><var n="post-verb"/>
        <concat>
          <b/>
            <lit v="^"/>
              <lit v="seg"/>
              <lit-tag v="prn.ref.p3.un.sp.acc"/>
            <lit v="$"/>
                    </concat>
            </let>
      </when></choose>
          <out>
          <chunk name="adv" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SV"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                 <tag><lit-tag v="vabess"/></tag>
            </tags>
           <lu>
              <lit v="uten"/><lit-tag v="adv"/>
            </lu>
            <b />
           <lu>
              <lit v="å"/><lit-tag v="part"/>
            </lu>
            <b />
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="vblex.inf"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            <var n="post-verb"/>
            </chunk>
          </out>
            <let><var n="post-verb"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[AT] vblex_ger" c="giesadettiin = mens h_n vikler" >
      <pattern>
        <pattern-item n="vblex_ger"/>
      </pattern>
      <action>
        <call-macro n="reset_caseFirstWord"></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>

      <choose><when c="Append 'seg' if reflexive:">
        <test>
          <equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal>
        </test>
            <let><var n="prn_pers"/><lit-tag v="p3"/></let>
            <let><var n="prn_gen"/><lit-tag v="un"/></let>
            <let><var n="prn_nbr"/><lit-tag v="sp"/></let>
        <let><var n="post-verb"/>
        <concat>
          <b/>
            <lit v="^"/>
              <lit v="seg"/>
              <lit-tag v="prn.ref.p3.un.sp.acc"/>
            <lit v="$"/>
                    </concat>
            </let>
      </when></choose>
      <choose><when c="p3 or no person">
      <test><or>
      <equal><var n="vfin-temps"/><lit v=""/></equal>
      <equal><var n="vfin-pers"/><lit-tag v="p3"/></equal>
      </or></test>
          <out>
          <chunk name="adv" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="ADV"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                 <tag><lit-tag v="ger"/></tag>
            </tags>
           <lu>
              <lit v="mens"/><lit-tag v="adv"/>
            </lu>
            <b />
           <lu>
              <lit v="h_n"/><lit-tag v="prn.pers.p3.GD_pers.sg.nom"/>
            </lu>
            <b />
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="vblex.pres"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            <var n="post-verb"/>
            </chunk>
          </out> </when>
          <otherwise>
          <out>
          <chunk name="adv" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="ADV"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                 <tag><lit-tag v="ger"/></tag>
            </tags>
           <lu>
              <lit v="mens"/><lit-tag v="adv"/>
            </lu>
            <b />
           <lu>
              <lit v="prpers"/><lit-tag v="prn.pers"/>
              <var n="vfin-pers"/>
              <lit-tag v="mf"/>
              <var n="vfin-nbr"/>
               <lit-tag v="nom"/>
           </lu>
            <b />
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
              <lit-tag v="vblex.pres"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            <var n="post-verb"/>
            </chunk>
          </out> </otherwise></choose>

            <let><var n="post-verb"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[] vblex (tl: vblex, adv, adj, n)
                   See out_verb macro.
                   –––––
                   oažžun → fående (adj.pprs, using fallback rule)
                   ii → adv.p3.sg{ikke}
                   Itgo → adv.p2.sg.qst{ikke}">
      <pattern>
        <pattern-item n="vblex"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <call-macro n="out_verb"><with-param pos="1"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] lex-leat.cond vblex.IFAUXV
                   See out_verb macro.
                   –––––
                   livččen sáhttit → hadde kunnet">
      <pattern>
        <pattern-item n="lex-leat.cond"/>
        <pattern-item n="vblex.IFAUXV"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_verb-lemma"><with-param pos="1"/></call-macro>
        <let><var n="pre-verb"/><lit v=""/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><clip pos="1" side="tl" part="lemh"/><lit v="ha"/></let>
        <let><clip pos="1" side="tl" part="modality"/><lit v=""/></let>
        <let><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></let>
        <call-macro n="out_verb"><with-param pos="1"/></call-macro>
        <out><b pos="1"/></out>
        <let><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></let>
        <call-macro n="out_verb"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[] nom.cmp vblex" c="skuvlavázzima → skolegående
                   (should be 'skolegang', but if it's not in bidix, adj.pprs is the best we can do)">
      <pattern>
        <pattern-item n="nom.cmp"/>
        <pattern-item n="vblex"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_cmp"><with-param pos="1"/></call-macro>
        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>

        <let><var n="c_name"/><lit v="pre_"/></let>
        <let>
          <var n="pre-verb"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="a_cmp"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="out_verb"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="C[DT] lex-leat vblex.actio.ess" c="Sámediggeráđđi leat vuordime evttohusa - Sametingsrådet venter forslaget">
      <pattern>
        <pattern-item n="lex-leat"/>
        <pattern-item n="lex-state.actio.ess"/>
     </pattern>
     <action>
       <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
       <let><var n="pre-verb"/><lit v=""/></let>
       <let><var n="c_name"/><lit v=""/></let>
       <choose><when><test>
         <equal><clip pos="1" side="sl" part="temps"/><lit-tag v="pret"/></equal></test>
         <let><clip pos="2" side="tl" part="temps"/><lit-tag v="pret"/></let>
       </when>
       <otherwise>
         <let><clip pos="2" side="tl" part="temps"/><lit-tag v="pres"/></let>
       </otherwise></choose>
       <call-macro n="out_verb"><with-param pos="2"/></call-macro>
     </action>
    </rule>



    <!-- <rules: NOM/PRN V.ACTIO NOM -->
    <rule comment="C[] prn.pers.gen vblex.actio nom_head" c="du čállin reivve → brevet som du hadde skrevet
                   The Agent Construction.
TODO! We make several chunks, should be possible to handle in interchunk like
   other relative clauses; perhaps we could make t2x relative chunking rules.
TODO sin geargan áššiin
TODO: should we restrict to V.Actio.Nom/Gen ?">
      <pattern>
        <pattern-item n="prn.pers.gen"/>
        <pattern-item n="vblex.actio"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <out>
          <b pos="1"/>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@OBJ→"/></tag>
              <tag><lit-tag v="acc"/></tag>
            </tags>
            <lu><lit v="som"/><lit-tag v="cnjsub"/></lu>
          </chunk>
          <b/>
          <chunk name="prn" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.@SUBJ→"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prn"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="nom"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>

        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <out>
          <b pos="2"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@+FAUXV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pres"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <lit v="ha"/><lit-tag v="vblex.pres"/>
            </lu>
          </chunk>
          <b/>
        </out>
        <let><var n="c_name"/><lit v=""/></let>
        <let><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></let>
        <call-macro n="out_verb"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="C[AT] nom.gen vblex.actio nom_head" c="irggi čállin reivve → brevet som kjæresten hadde skrevet
                   The Agent Construction. See above rule.">
      <pattern>
        <pattern-item n="nom.gen"/>
        <pattern-item n="vblex.actio"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <out>
          <b pos="1"/>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@OBJ→"/></tag>
              <tag><lit-tag v="acc"/></tag>
            </tags>
            <lu><lit v="som"/><lit-tag v="cnjsub"/></lu>
          </chunk>
          <b/>
        </out>

        <let><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@SUBJ→"/></let>
        <let><clip pos="1" side="tl" part="case"/><lit-tag v="nom"/></let>
        <let><clip pos="1" side="tl" part="case"/><lit v="nom"/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <out>
          <b pos="2"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@+FAUXV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pres"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <lit v="ha"/><lit-tag v="vblex.pres"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@-FMAINV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pp"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="a_pstv"/>
              <lit-tag v="pp"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <!-- SINGLE CLOSED CLASS WORDS: -->

    <rule comment="C[] conj">
      <pattern>
        <pattern-item n="conj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose><when><test>
        <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@CVP"/></equal></test>
          <let><var n="main-verb-pasv"/><lit v=""/></let>
          <let><var n="main-verb-sl"/><lit v=""/></let>
          <let><var n="main-verb-tl"/><lit v=""/></let>
          <let><var n="aux-verb-sl"/><lit v=""/></let>
          <let><var n="aux-verb-tl"/><lit v=""/></let>
          </when></choose>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="a_part"/><lit-tag v="part"/></equal></test>
            <let><var n="c_name"/><lit v="part"/></let>
          </when>
          <otherwise>
            <let><var n="c_name"/><lit v="conj"/></let>
          </otherwise>
        </choose>
        <out>
          <chunk namefrom="c_name" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="a_part"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] adpos">
      <pattern>
        <pattern-item n="adpos"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adpos" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="PR"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prep"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="C[] rel-adverb - these we will handle differently from other adverbs">
      <pattern>
        <pattern-item n="rel-adverb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
        <when>
        <test><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ine→"/></equal></test>
        <let><var n="c_syn"/><lit-tag v="@ADVLrel-ine→"/></let>
        </when>
        <when>
        <test><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL-ela→"/></equal></test>
        <let><var n="c_syn"/><lit-tag v="@ADVLrel-ela→"/></let>
        </when>
        <when>
        <test><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal></test>
        <let><var n="c_syn"/><lit-tag v="@ADVLrel→"/></let>
        </when>
        </choose>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADV"/></tag>
                  <tag><var n="c_syn"/></tag>
                  <tag><clip pos="1" side="tl" part="a_adv_pr_cnjcoo_cnjsub"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><clip pos="1" side="sl" part="a_sem"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv_pr_cnjcoo_cnjsub"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[] adverb">
      <pattern>
        <pattern-item n="adverb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_syn"><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let> <!-- workaround for empty clip lemh matching syntags; fixed in trunk/apertium r76155-->

        <choose><when><test><or>
        <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVLcs-ela→"/></equal>
        <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVLcs-ine→"/></equal>
     </or></test>
           <let><var n="main-verb-pasv"/><lit v=""/></let>
          <let><var n="main-verb-sl"/><lit v=""/></let>
          <let><var n="main-verb-tl"/><lit v=""/></let>
          <let><var n="aux-verb-sl"/><lit v=""/></let>
          <let><var n="aux-verb-tl"/><lit v=""/></let>
         </when></choose>
        <choose>
          <when c="Since we match on chunk lemma 'adv' in t3x, we have a two-lu chunks
                   here with the single name 'adv' (no postchunking rules for adverbs, so that's OK).">
                   <test><equal><clip pos="1" side="sl" part="mode"/><lit-tag v="qst"/></equal></test>
                   <out>
                     <chunk name="adv" case="caseFirstWord">
                       <tags>
                         <tag><lit-tag v="ADV"/></tag>
                         <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                         <tag><clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/></tag>
                         <tag><clip pos="1" side="sl" part="mode"/></tag>
                       </tags>
                       <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
                       <b/>
                       <lu>
                         <clip pos="1" side="tl" part="lemh"/>
                         <clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/>
                         <clip pos="1" side="tl" part="lemq"/>
                       </lu>
                     </chunk>
                   </out>
          </when>
          <when c="Lene: gitta adv - stenge vblex stengt">
            <test><equal><clip pos="1" side="tl" part="a_verb"/><lit-tag v="vblex"/></equal></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADV"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <clip pos="1" side="tl" part="temps"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="Lene: adv til cnjsub: movt  som">
            <test><equal><clip pos="1" side="tl" part="a_conj"/><lit-tag v="cnjsub"/></equal></test>
            <out>
              <chunk name="cnjsub" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_conj"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when c="otherwise, as long as there's a target language lemma">
            <test><not><equal><clip pos="1" side="tl" part="lemh"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="ADV"/></tag>
                  <tag><var n="c_syn"/></tag>
                  <tag><clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><clip pos="1" side="sl" part="a_sem"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
        </choose>
      </action>
    </rule>
    <rule comment="C[] adverb PcleQst" c="guhká go → hvor lenge
                                          Since we match on chunk lemma 'adv' in t3x, even two-lu chunks
                                          here are named 'adv' (no postchunking rules, so that's OK).

TODO: this should be an mwe in the analyser.">
      <pattern>
        <pattern-item n="adverb"/>
        <pattern-item n="PcleQst"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="ADV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
            <b/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
          <let><var n="main-verb-tl"/><lit v=""/></let>
      </action>
    </rule>

    <rule comment="C[] Pcle" c="ba → engang">
      <pattern>
        <pattern-item n="Pcle"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
        <choose><when>
          <test><equal><var n="c_syn"/><lit v=""/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@PCLE"/></let>
        </when></choose>
        <!-- Need to empty the tl syn_label so we can check for empty translations; fixed in trunk/apertium r76155: -->
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>
        <choose><when>
          <test><not><equal><clip pos="1" side="tl" part="lemh"/><lit v=""/></equal></not></test>
          <out>
            <chunk name="adv" case="caseFirstWord">
              <tags>
                <tag><var n="c_syn"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when></choose>
      </action>
    </rule>

    <rule comment="C[] ij">
      <pattern>
        <pattern-item n="ij"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
        <out>
          <chunk name="ij" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_ij"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[S] cmp">
      <pattern>
        <pattern-item n="cmp"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv_pr_cnjcoo"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="C[_]-T lquot">
      <pattern>
        <pattern-item n="lquot"/>
      </pattern>
      <action>
          <out>
            <chunk name="lquot">
              <tags>
                <tag><lit-tag v="lquot"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
            </chunk>
          </out>
      </action>
    </rule>
    <rule comment="C[_]-T rquot">
      <pattern>
        <pattern-item n="rquot"/>
      </pattern>
      <action>
          <out>
            <chunk name="rquot">
              <tags>
                <tag><lit-tag v="rquot"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
            </chunk>
          </out>
      </action>
    </rule>
    <rule comment="C[_]-T comma">
      <pattern>
        <pattern-item n="comma"/>
      </pattern>
      <action>
        <choose><when>
          <test><not><equal><clip pos="1" side="tl" part="lemh"/><lit v=""/></equal></not></test>
          <out>
            <chunk name="comma">
              <tags>
                <tag><lit-tag v="SENT"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
            </chunk>
          </out>
        </when></choose>
        <choose><when>
          <test><not><equal><clip pos="1" side="tl" part="lemh"/><lit v=";"/></equal></not></test>
          <let><var n="foc-word"/><lit v=""/></let>
        </when></choose>
      </action>
    </rule>
    <rule comment="C[_]-T sent">
      <pattern>
        <pattern-item n="sent"/>
      </pattern>
      <action>
        <choose><when>
          <test><not><equal><clip pos="1" side="tl" part="lemh"/><lit v=""/></equal></not></test>
          <out>
            <chunk name="sent">
              <tags>
                <tag><lit-tag v="SENT"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="whole"/>
              </lu>
            </chunk>
          </out>
        </when></choose>
<!--        <choose><when>
          <test><not><equal><clip pos="1" side="tl" part="lemh"/><lit v=";"/></equal></not></test> -->
          <let><var n="caseFirstWord"/><lit v="Init"/></let>
          <let><var n="aux-verb-sl"/><lit v=""/></let>
          <let><var n="aux-verb-tl"/><lit v=""/></let>
          <let><var n="foc-word"/><lit v=""/></let>
          <let><var n="main-verb-pasv"/><lit v=""/></let>
          <let><var n="main-verb-sl"/><lit v=""/></let>
          <let><var n="main-verb-tl"/><lit v=""/></let>
          <let><var n="previous-nhead"/><lit v=""/></let>
          <let><var n="previous-nhead_sem"/><lit v=""/></let>
          <let><var n="previous-obj"/><lit v=""/></let>
          <let><var n="vfin-nbr"/><lit v=""/></let>
          <let><var n="vfin-pers"/><lit v=""/></let>
          <let><var n="vfin-temps"/><lit v=""/></let>
<!--        </when></choose>  -->
      </action>
    </rule>

  </section-rules>
</transfer>
