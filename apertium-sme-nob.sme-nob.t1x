<?xml version="1.0" encoding="utf-8"?>

<!--
This is the first pass. Responsibilities of this file include:
* Chunking (all rules)
* Handling part-of-speech changes introduced by bidix.
  * Rules match on source tags, so a sme verb which is specified 
    as a nob noun has to be handled by the verb rule
    (this leads to some redundancy, hopefully we'll get a bidix module soon)
* (De-)compounding
  * See rule: NOMCMP NOM
* Derivation
  * See rule: VERB Der/goahti
* Simple noun phrases
  * Heads and their simple modifiers/specifiers: adj nom, adj adj nom, det adj adj nom, num adj nom
  * See rule: DET ADJ_ATTR NOM
  * See macro: out_nom
* Insert prepositions based on case
  * These get their own chunk; t2x might have to remove them in co-ordination or post-position rules
  * See macro: set_case-prep

TODO:
* Perhaps chunk simple periphrastic verb combinations (verb, vaux pp, vaux inf)

-->

<transfer default="chunk">
  <section-def-cats>
    <def-cat n="adpos">
      <cat-item tags="Adp.*"/>
      <cat-item tags="Pr.*"/>
      <cat-item tags="Po.*"/>
    </def-cat>
    <def-cat n="adverb">
      <cat-item tags="Adv"/>
      <cat-item tags="Adv.*"/>
    </def-cat>
    <def-cat n="pcle">
      <cat-item tags="Pcle.*"/>
      <cat-item tags="Pcle"/>
    </def-cat>
    <def-cat n="pcle.qst">
      <cat-item lemma="go" tags="Pcle.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="A.*"/>
    </def-cat>
    <def-cat n="adj_attr">
      <cat-item tags="A.Ess.*"/>
      <cat-item tags="A.Attr.*"/>
      <cat-item tags="A.*.Attr.*"/>
    </def-cat>
    <def-cat n="num_mod">
      <cat-item tags="Num.*.*.@→N"/>
      <cat-item tags="Num.*.*.@→A"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="Num.*"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item tags="Pron.*"/>
    </def-cat>
    <def-cat n="pronrel">
      <cat-item tags="Pron.Rel.*"/>
    </def-cat>
    <def-cat n="pronref">
      <cat-item tags="Pron.Refl.*"/>
    </def-cat>
    <def-cat n="pronref-PRONL">
      <cat-item lemma="ieš:1" tags="Pron.Refl.*.*.@Pron←"/>
    </def-cat>
    <def-cat n="pronitg">
      <cat-item tags="Pron.Interr.*"/>
    </def-cat>
    <def-cat n="pronpers">
      <cat-item tags="Pron.Pers.*"/>
    </def-cat>
    <def-cat n="pronpersgen">
      <cat-item tags="Pron.Pers.*.Gen.*"/>
    </def-cat>
    <def-cat n="det" c="Pronouns most likely to end up as determiners">
      <cat-item tags="Pron.Pers.*.Gen.*"/>
      <cat-item tags="Pron.Dem.*"/>
      <cat-item tags="Pron.Indef.*"/>
      <cat-item lemma="makkár" tags="Pron.Interr.*"/>
    </def-cat>
    <def-cat n="detpos_ADVL" c="Pronouns most likely to end up as det.pos">
      <cat-item tags="Pron.Pers.*.Gen.@X"/>
      <cat-item tags="Pron.Pers.*.Gen.@ADVL"/>
    </def-cat>
    <def-cat n="detdemqnt_gen">
      <cat-item tags="Pron.Dem.*.Gen.*"/>
      <cat-item tags="Pron.Indef.*.Gen.*"/>
    </def-cat>
    <def-cat n="cmp" c="Words only seen as compund parts">
      <cat-item tags="Cmp.*"/>
      <cat-item tags="ShCmp.*"/>
      <cat-item tags="Cmp"/>
      <cat-item tags="ShCmp"/>
    </def-cat>
    <def-cat n="adj_cmp">
      <cat-item tags="A.*.*.Cmp"/>
      <cat-item tags="A.*.*.Cmp.*"/>
    </def-cat>
    <def-cat n="nom_cmp">
      <cat-item tags="N.*.*.Cmp"/>
      <cat-item tags="N.*.*.Cmp.*"/>
    </def-cat>
    <def-cat n="nom_head" c="Head nom's are sent to out_nom, thus we can have Verb derivatives here.">
      <cat-item tags="V.*.Der2.*.N.*"/>
      <cat-item tags="N.*"/>
    </def-cat>
    <def-cat n="nom_gen">
      <cat-item tags="N.*.Gen.*"/>
    </def-cat>
    <def-cat n="nom_gen_LNUM">
      <cat-item tags="N.*.Gen.@Num←"/>
    </def-cat>
    <def-cat n="nom_prop">
      <cat-item tags="N.Prop.*"/>
    </def-cat>
    <def-cat n="nom_prop_gen">
      <cat-item tags="N.Prop.*.Gen"/>
      <cat-item tags="N.Prop.*.Gen.*"/>
    </def-cat>
    <def-cat n="nom_hon">
      <cat-item lemma="gonagas" tags="N.*"/>
      <cat-item lemma="gonagas:1" tags="N.*"/>
      <cat-item lemma="dronnet" tags="N.*"/>
      <cat-item lemma="prinsa" tags="N.*"/>
      <cat-item lemma="ruvdnaprinsa" tags="N.*"/>
      <cat-item lemma="prinseassa" tags="N.*"/>
      <cat-item lemma="ruvdnaprinseassa" tags="N.*"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="V.*"/>
    </def-cat>
    <def-cat n="vneg">
      <cat-item tags="V.*.Neg.*"/>
    </def-cat>
    <def-cat n="vactio">
      <cat-item tags="V.*.Actio.*"/>
    </def-cat>
    <def-cat n="vgoahti">
      <cat-item lemma="goahti" tags="V.*"/>
    </def-cat>
    <def-cat n="conj">
      <cat-item tags="CC.*"/>
      <cat-item tags="CS.*"/>
    </def-cat>
    <def-cat n="month">
      <cat-item lemma="guovvamánnu" tags="N.*"/>
      <cat-item lemma="ođđajagimánnu" tags="N.*"/>
      <cat-item lemma="guovvamánnu" tags="N.*"/>
      <cat-item lemma="njukčamánnu" tags="N.*"/>
      <cat-item lemma="cuoŋománnu" tags="N.*"/>
      <cat-item lemma="miessemánnu" tags="N.*"/>
      <cat-item lemma="geassemánnu" tags="N.*"/>
      <cat-item lemma="suoidnemánnu" tags="N.*"/>
      <cat-item lemma="borgemánnu" tags="N.*"/>
      <cat-item lemma="čakčamánnu" tags="N.*"/>
      <cat-item lemma="golggotmánnu" tags="N.*"/>
      <cat-item lemma="skábmamánnu" tags="N.*"/>
      <cat-item lemma="juovlamánnu" tags="N.*"/>
    </def-cat>
    <def-cat n="season">
      <cat-item lemma="giđđa" tags="N.*"/>
      <cat-item lemma="geassi" tags="N.*"/>
      <cat-item lemma="dálvi" tags="N.*"/>
      <cat-item lemma="čakča" tags="N.*"/>
    </def-cat>
    <def-cat n="year">
      <cat-item tags="Num.*"/>
    </def-cat>
    <def-cat n="ord">
      <cat-item tags="A.Ord.*"/>
      <cat-item tags="A.Ord"/>
    </def-cat>
    <def-cat n="beaivi">
      <cat-item lemma="beaivi" tags="N.*"/>
      <cat-item lemma="b" tags="ABBR.*"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <def-attr n="a_der">
      <attr-item tags="Der2.Actor"/>
      <attr-item tags="Der3.Der_n"/>
      <attr-item tags="Der2.Der_eapmi"/>
    </def-attr>
    <def-attr n="a_sintagma">
      <attr-item tags="SN"/>
      <attr-item tags="SV"/>
      <attr-item tags="SA"/>
    </def-attr>
    <def-attr n="a_verb">
      <attr-item tags="V"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="A"/>
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
    </def-attr>
    <def-attr n="a_adv">
      <attr-item tags="Adv"/>
      <attr-item tags="adv"/>
    </def-attr>
    <def-attr n="a_prep">
      <attr-item tags="Po"/>
      <attr-item tags="Pr"/>
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="a_num">
      <attr-item tags="Num"/>
      <attr-item tags="det.qnt"/>
    </def-attr>
    <def-attr n="a_pron">
      <attr-item tags="Pron"/>
      <attr-item tags="Pron.Rel"/>
      <attr-item tags="Pron.Indef"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Pers"/>
      <attr-item tags="prn"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.ref"/>
    </def-attr>
    <def-attr n="a_det">
      <attr-item tags="det"/> 
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="a_conj">
      <attr-item tags="CC"/>
      <attr-item tags="CS"/>
      <attr-item tags="cnjcoo"/>
      <attr-item tags="cnjcoo.clb"/>
      <attr-item tags="cnjsub"/>
    </def-attr>
    <def-attr n="a_count">
      <attr-item tags="Coll"/>
      <attr-item tags="unc"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="N"/>
      <attr-item tags="n"/>
      <attr-item tags="N.Prop"/>
      <attr-item tags="N.Prop.Sur"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="a_rel">
      <attr-item tags="Refl"/>
      <attr-item tags="ref"/>
      <attr-item tags="res" c="Reciprocal"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pass"/>
    </def-attr>
    <def-attr n="animacy">
      <attr-item tags="impers"/>
      <attr-item tags="pers"/>
    </def-attr>
    <def-attr n="trans">
      <attr-item tags="TV"/>
      <attr-item tags="IV"/>
    </def-attr>
    <def-attr n="actio">                                       <!--TODO: what's the category name?-->
      <attr-item tags="Actio"/>
    </def-attr>
    <def-attr n="a_caus">                                      <!--TODO: what's the category name?-->
      <attr-item tags="caus"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="Nom"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Loc"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ela"/>
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="gen-case">
      <attr-item tags="gen"/>
    </def-attr>
    <def-attr n="pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="ord.posi"/>
      <attr-item tags="ord.comp"/>
      <attr-item tags="ord.sup"/>
      <attr-item tags="Comp"/>
      <attr-item tags="Superl"/>
      <attr-item tags="posi"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
      <attr-item tags="GD_pers"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="Sg"/>
      <attr-item tags="Du"/>
      <attr-item tags="Pl"/>
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
      <attr-item tags="DD"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="Prs"/>
      <attr-item tags="Prt"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="Inf"/>
      <attr-item tags="inf"/>
      <attr-item tags="Imprt"/>
      <attr-item tags="imp"/>
      <attr-item tags="PrfPrc"/>
      <attr-item tags="pp"/>
      <attr-item tags="TD"/>
    </def-attr>
    <def-attr n="neg">
      <attr-item tags="ConNeg"/>
      <attr-item tags="Neg"/>
    </def-attr>
    <def-attr n="modality">
      <attr-item tags="Ind"/>
      <attr-item tags="Cond"/>
      <attr-item tags="Pot"/>
    </def-attr>
    <def-attr n="mode">
      <attr-item tags="Qst"/>
    </def-attr>
    <def-attr n="syn_label">
      <attr-item tags="@X"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@→Pron"/>
      <attr-item tags="@OBJ→"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@→ADVL"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@→A"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@←PPRED"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@-FADVL"/>
      <attr-item tags="@APP-N←"/>
    </def-attr>
  </section-def-attrs>
  
  <section-def-vars>
    <def-var n="pron_gen"       c="pronoun gender"/>
    <def-var n="pron_nbr"       c="pronoun number"/>
    <def-var n="pron_pers"       c="pronoun person (esp. for reflexive)"/>
    <def-var n="pre-nom"        c="lu's before nom-lu in nominal chunk"/>
    <def-var n="defnes"         c="definiteness (noun, adj)"/>
    <def-var n="c_name"         c="chunk name"/>
    <def-var n="c_gen"          c="chunk gender"/>
    <def-var n="c_nbr"          c="chunk number"/>
    <def-var n="c_def_pos"      c="chunk defnes tag position"/>
    <def-var n="c_syn"          c="chunk syn_label"/>
    <def-var n="caseFirstWord"  c="typographic case of first word"/>
    <def-var n="case-prep"      c="nob preposition (whole chunk) based on sme case"/>
  </section-def-vars>

  <section-def-lists>
    <def-list n="infinite_temps">
      <list-item v="&lt;Inf&gt;"/>
      <list-item v="&lt;inf&gt;"/>
      <list-item v="&lt;PrfPrc&gt;"/>
      <list-item v="&lt;pp&gt;"/>
    </def-list>
    <def-list n="nt-verbs">
      <!-- These are not currently in use. -->
      <!-- They're all tagged "impers" in sme-nob, trying that instead for now. -->
      <!-- todo: "det" instead of "han" for pro-drop insertion with these verbs -->
      <!-- Odne arvá. -->
      <list-item v="arvit"/>
      <list-item v="borgat"/>
      <list-item v="bieggat"/>
      <list-item v="bivaldit"/>
      <list-item v="boŋkit"/>
      <list-item v="bulžut"/>
      <list-item v="bávkit"/>
      <list-item v="bávkkihit"/>
      <list-item v="firtet"/>
      <list-item v="galbmit"/>
      <list-item v="joavgat"/>
      <list-item v="muohttit"/>
      <list-item v="sevnnjodit"/>
      <list-item v="veiggodit"/>
      <list-item v="álddagastit"/>
      <list-item v="čuorpmastit"/>
      <list-item v="čuvggodit"/>
      <list-item v="šlahttit"/>
    </def-list>
    <def-list n="loc-i" c="Locatives default to 'på' unless in this list (or are np.top)">
      <list-item v="oppfatning"/>
      <list-item v="sammenheng"/>
      <list-item v="forbindelse"/>
      <list-item v="hus"/>
      <list-item v="januar"/>
      <list-item v="februar"/>
      <list-item v="mars"/>
      <list-item v="april"/>
      <list-item v="mai"/>
      <list-item v="juni"/>
      <list-item v="juli"/>
      <list-item v="august"/>
      <list-item v="september"/>
      <list-item v="oktober"/>
      <list-item v="november"/>
      <list-item v="desember"/>
    </def-list>
    <def-list n="loc-på" c="Proper place nouns (np.top) get preposition 'i' unless they're in this list.">
      <list-item v="Vestlandet"/>
      <list-item v="Østlandet"/>
      <list-item v="Gjøvik"/>
      <list-item v="Lillehammer"/>
      <list-item v="Hamar"/>
      <list-item v="Bygdøy"/>
      <list-item v="Andøya"/>
      <list-item v="Sicilia"/>
      <list-item v="Cuba"/>
      <list-item v="Grønland"/>
      <list-item v="Filippinene"/>
      <list-item v="Island"/>
      <list-item v="Svalbard"/>
      <list-item v="Hovedøya"/>
      <list-item v="Kreta"/>
      <list-item v="Madagaskar"/>
      <list-item v="Hitra"/>
      <list-item v="Hidra"/>
      <list-item v="Hispaniola"/>
      <list-item v="Island"/>
      <list-item v="mandag"/>
      <list-item v="tirsdag"/>
      <list-item v="onsdag"/>
      <list-item v="torsdag"/>
      <list-item v="fredag"/>
      <list-item v="lørdag"/>
      <list-item v="søndag"/>
      <list-item v="dag"/>
      <list-item v="øy"/>
      <list-item v="topp"/>
      <list-item v="kjøkken"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>
    <def-macro n="set_caseFirstWord" npar="1"
               c="Set the typographic case to be carried by the chunk.
                  - if argument is _not_ a proper noun: caseFirstWord is the case of the lemma, and the lemma gets lowercase.
                  - if argument _is_ a proper noun: caseFirstWord is lowercase, and lemma stays unchanged.
                  
                  (This means that if the sentence starts with a proper noun, and we insert eg. a preposition before that,
                   the preposition won't get capitalised in t2x. We _could_ circumvent this by having a global variable
                   'FirstWordSeen' that is set to false on periods and true for all other lexical units, but this is low priority.)">
      <let><var n="caseFirstWord"/><lit v="aa"/></let>
      <choose><when>
        <test><not><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></not></test>        
        <let><var n="caseFirstWord"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
        <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
      </when></choose>
    </def-macro>
    
    <def-macro n="set_case-prep" npar="1"
               c="arg.1: noun, pronoun
                  -----
                  First attempt (may be changed in later stages).">
      <let>
        <var n="case-prep"/><lit v=""/>
      </let>
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Loc"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="på"/>
          </let>
          <choose><when>
            <test><or>
              <in><clip pos="1" side="tl" part="lemh"/><list n="loc-i"/></in>
              <and>
                <equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.top"/></equal>
                <not><in><clip pos="1" side="tl" part="lemh"/><list n="loc-på"/></in></not>
              </and>
            </or></test>
            <let>
              <var n="case-prep"/><lit v="i"/>
            </let>
          </when></choose>
          <choose><when>
            <test><equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@HAB"/></equal></test>
            <let>
              <var n="case-prep"/><lit v=""/>
            </let>
          </when></choose>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Com"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="med"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ess"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="som"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ill"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="til"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal></test>
          <choose>
            <when>
              <test><or>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→N"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→A"/></equal>
                <equal><clip pos="1" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
              </or></test>
              <let>
                <var n="case-prep"/><lit v=""/>                <!--sin-->
              </let>
            </when>
            <otherwise>
              <let><var n="case-prep"/><lit v="til"/></let>
              <choose><when>
                <test><equal><clip pos="1" side="tl" part="case"/><lit-tag v="gen"/></equal></test>
                <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
              </when></choose>
            </otherwise>
          </choose>
        </when>
      </choose>
      <!-- Now output it: -->
      <choose>
        <when>
          <test><not><equal><var n="case-prep"/><lit v=""/></equal></not></test>
          <let>
            <var n="case-prep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR"/>
              <clip pos="1" side="tl" part="case"/>
              <lit v="{^"/>
              <var n="case-prep"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
        </when>
      </choose>
    </def-macro>
    
    <def-macro n="modify_pron_case" npar="1"
               c="arg.1: Pron (which might end up as a nob determiner)
                  -----
                  - Personal pronouns can only be nom or acc (note: @HAB / @-FSUBJ→ / @-FOBJ→ => nom),
                  - Demonstrative and indefinites can only be gen in nob,
                  - det.pos (personal genitives) have no case, but this is handled in transfer rules.">
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron.Pers"/></equal></test>
          <choose>
            <when>
              <test><or>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@HAB"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FSUBJ→"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FOBJ→"/></equal>
              </or></test>
              <let><clip pos="1" side="tl" part="case"/><lit-tag v="nom"/></let>
            </when>
            <when>
              <test><not>
                <or>
                  <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Nom"/></equal>
                  <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal>
                </or>
              </not></test>
              <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>
            </when>
          </choose>
        </when>
        <otherwise>
          <choose><when>
            <test>
              <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal></not>
            </test>
            <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
          </when></choose>
        </otherwise>
      </choose>
    </def-macro>
    
    <def-macro n="set_pron_gen_nbr_art" npar="1"
               c="arg.1: noun (or, the lu we want to base pron/det gen/nbr on)
                  -----
                  Note: lone pronouns/determiners just keep GD/ND, this might change
                  in interchunk (postchunk cleans it up if not).">
      <let><var n="pron_gen"/><clip pos="1" side="tl" part="gen"/></let>
      <let><var n="pron_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
          </test>
          <let><var n="pron_gen"/><lit v=""/></let>
        </when>
      </choose>
      <choose><when>
          <test><equal><clip pos="1" side="tl" part="art"/><lit v="DD"/></equal></test>
          <call-macro n="set_c_def_pos"><with-param pos="1"/></call-macro>
          <let><clip pos="1" side="tl" part="art"/><var n="c_def_pos"/></let>
      </when></choose>
    </def-macro>
    
    <def-macro n="set_c_gen_nbr" npar="1"
               c="Make sure we have GD or ND if no gen or num given">
      <let><var n="c_gen"/><clip pos="1" side="tl" part="gen"/></let>
      <let><var n="c_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
      <choose><when>
        <test><equal><var n="c_gen"/><lit v=""/></equal></test>
        <let><var n="c_gen"/><lit-tag v="GD"/></let>
      </when></choose>
      <choose><when>
        <test><equal><var n="c_nbr"/><lit v=""/></equal></test>
        <let><var n="c_nbr"/><lit-tag v="ND"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="copy_syn_label" npar="2"
               c="arg.1: might want a syn_label, arg.2: might have syn_label
                  -----
                  Used in compounds, where typically the left part gets the syn_label while
                  the right one needs it.">
      <choose><when>
        <test><equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal></test>
        <let>
          <clip pos="1" side="sl" part="tags"/>
          <concat>
            <clip pos="1" side="sl" part="tags"/>
            <clip pos="2" side="sl" part="syn_label"/>
          </concat>
        </let>
      </when></choose>
    </def-macro>

    <def-macro n="set_defnes" npar="1"
               c="arg.1: noun/adj, with syn_label
                  -----
                  Default to indefinite, guess definite for certain GF's, genitives, ...
                  Locatives only indefinite in first position with leat
                  Adjectives given to this macro will be (predicative and) indefinite
                   (or do we ever get 'det er den røde.Def' here?)">
      <let><var n="defnes"/><lit-tag v="ind"/></let>
      <choose>
        <when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="a_count"/><lit-tag v="unc"/></equal></not>
            <equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal>
            <or>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@OBJ→"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@HAB"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@SUBJ→"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Loc"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ill"/></equal>
              <and>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←PPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←SPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←OPRED"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@ADVL→"/></equal></not>
                <!-- syn_label!=@←ADVL conflicts with 'Son ii dáidde
                     jienastit Bargiidbellodaga(def)' but is necessary
                     for 'Doppe son orui vahku(ind)' -->
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@←ADVL"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@HNOUN"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@X"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ess"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal></not>
              </and>
            </or></and>
          </test>
          <let><var n="defnes"/><lit-tag v="def"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_defnes2" npar="2"
               c="arg.1: noun, arg.2: determiner. With 'det (adj) nom' the noun is definitely
                  * indefinite if the determiner is a possessive or quantifier,
                  * definite if it is a demonstrative
                  Otherwise, keep old defnes.
                  Assumes that clean_a_det has been called.">      
      <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
      <choose>
	<when>
          <test><or>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.qnt"/></equal>
          </or></test>
	  <let><var n="defnes"/><lit-tag v="ind"/></let>
	</when>
        <when>
          <test>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
          </test>
	  <let><var n="defnes"/><lit-tag v="def"/></let>
	</when>
      </choose>
    </def-macro>

    <def-macro n="clean_a_det" npar="1"
               c="arg.1: determiner. Change pron.gen into det.pos">
      <choose>
        <when>
          <test><and>
            <begins-with><clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron"/></begins-with>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_pron"/><lit-tag v="det.pos"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="modify_adj_gen_nbr" npar="2"
               c="arg.1: noun, arg.1: adjective
                  -----
                  Number is only a feature of positive/pp adjectives in nob.
                  nob adj's never have m or f tags.">
      <choose>
        <when>
          <test>
            <or>
              <equal><clip pos="2" side="tl" part="temps"/><lit-tag v="pp"/></equal>
              <ends-with><clip pos="2" side="tl" part="grau"/><lit-tag v="posi"/></ends-with>
            </or>
          </test>
          <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when>
        <otherwise>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </otherwise>
      </choose>
      <let>
        <clip pos="2" side="tl" part="gen"/><clip pos="1" side="tl" part="gen"/>
      </let>
      <choose>
        <when>
          <test>
            <or>
              <equal><clip pos="2" side="tl" part="gen"/><lit-tag v="m"/></equal>
              <equal><clip pos="2" side="tl" part="gen"/><lit-tag v="f"/></equal>
            </or>
          </test>
          <let><clip pos="2" side="tl" part="gen"/><lit-tag v="mf"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_c_def_pos" npar="1"
               c="Set variable for the position of the defnes tag in the SN chunk">
      <choose>
        <when>
          <test><and>
            <equal><clip pos="1" side="sl" part="mode"/><lit v=""/></equal>
            <equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal>
          </and></test>
          <let><var n="c_def_pos"/><lit-tag v="4"/></let>
        </when>
        <when>
          <test><or>
            <equal><clip pos="1" side="sl" part="mode"/><lit v=""/></equal>
            <equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal>
          </or></test>
          <let><var n="c_def_pos"/><lit-tag v="5"/></let>
        </when>
        <otherwise><let><var n="c_def_pos"/><lit-tag v="6"/></let></otherwise>
      </choose>
    </def-macro>

    <!-- Output macros: -->    
    <def-macro n="out_nom" npar="1"
               c="arg.1: tl-noun
                  (tl PoS is noun, sl may be something else!)
                  -----
                  ASSUMES THAT pre-nom, c_name, defnes AND caseFirstWord HAVE BEEN SET!
                  This macro is used to output nominal heads, possibly prepended by determiners
                  or adjectives (stored in pre-nom). It uses the case of the argument to find the
                  case-prep, outputting this before any det/adj's. The resulting chunk has the
                  syn_label of the nominal.
                  Removes nbr if given proper noun.">
      <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
      <out><var n="case-prep"/></out>

      <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
      <call-macro n="set_c_def_pos"><with-param pos="1"/></call-macro>

      <choose>
        <when c="tl PoS is verb">
          <test><equal><clip pos="1" side="tl" part="a_verb"/><lit-tag v="vblex"/></equal></test>
        
          <choose>
            <when c="V.Der2.Actor => (den) pre-nom som V
                     (pre-nom gets 'den' in front (unless determined already), and 'som' after)
                     Only do the 'den som' if non-sg definite or there is a lemq">
              <test><and>
                <equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="Der2.Actor"/></equal>
                <or>
                  <not><equal><clip pos="1" side="tl" part="lemq"/><lit v=""/></equal></not>
                  <not><equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal></not>
                  <equal><var n="defnes"/><lit-tag v="def"/></equal>
                </or>
              </and></test>
              
              <choose><when c="Only add determiner if it doesn't already have one
                               TODO: other chunk lemh for those 'semi-determiners' (eg. quantifiers)">
                <test><not><begins-with><var n="c_name"/><lit v="det"/></begins-with></not></test>
                <let><var n="c_name"/><concat><lit v="det_"/><var n="c_name"/></concat></let>
                <let>
                  <var n="pre-nom"/>
                  <concat>
                    <lit v="^den"/><lit-tag v="det.dem.GD"/>
                    <clip pos="1" side="tl" part="nbr"/>
                    <lit v="$"/>
                    <b/>
                    <var n="pre-nom"/>
                  </concat>
                </let>
              </when></choose>
              <append n="c_name"><lit v="conj_verb"/></append>
              <append n="pre-nom">
                <concat>
                  <lit v="^som"/><lit-tag v="cnjsub"/><lit v="$"/>
                  <b/>
                </concat>
              </append>
              <let><var n="c_syn"/><lit-tag v="SN"/></let>
            </when>
            <otherwise c="Just the verb and unchanged pre-nom, no 'som'
                          If we have a Der2.Actor, it should work pretty much like a regular noun.
                          TODO: do anything about pre-nom here?">
              <append n="c_name"><lit v="verb"/></append>
              <choose>
                <when>
                  <test><equal><clip pos="1" side="sl" part="a_der"/><lit-tag v="Der2.Actor"/></equal></test>
                  <let><var n="c_syn"/><lit-tag v="SN"/></let>
                </when>
                <otherwise c="So far only happens with lemma-specific N.Ess=>V.Pres exceptions in bidix">
                  <let><var n="c_syn"/><lit-tag v="SV"/></let>
                </otherwise>
              </choose>
            </otherwise>
          </choose>
          
          <out>
            <chunk namefrom="c_name" case="caseFirstWord"
                   c="The tag order corresponds with nouns, to make c_def_pos work.">
              <tags>
                <tag><var n="c_syn"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_verb"/>
                <clip pos="1" side="tl" part="temps"/>
                <clip pos="1" side="tl" part="voice"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        
        <otherwise c="Regular Noun=>Noun">
          <append n="c_name"><lit v="nom"/></append>
          <choose><when>
            <test><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></test>
            <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
          </when></choose>

          <out>
            <chunk namefrom="c_name" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
                <tag><clip pos="1" side="tl" part="a_count"/></tag>
              </tags>
              <var n="pre-nom"/>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_nom"/>
                <clip pos="1" side="tl" part="gen"/>
                <clip pos="1" side="tl" part="nbr"/>
                <var n="c_def_pos"/>
                <clip pos="1" side="tl" part="gen-case"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </otherwise>
        
      </choose>
    </def-macro>
    
  </section-def-macros>
  
  <section-rules>
    <!-- <rules: Dates (need to be before num_nom rules) -->
    <rule comment="REGLA: MONTH ORD BEAIVI
                   guovvamánu 17. beaivvi => 17. februar
                   TODO: should we also chunk MONTH NUM DOT BEAIVI YEAR ?
                   TODO: should we always delete the genitive here?
                   TODO: do we ever want definite? ('den 17.februar')?">
      <pattern>
        <pattern-item n="month"/>
        <pattern-item n="ord"/>
        <pattern-item n="beaivi"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adj_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <!-- <tag><lit-tag v="def"/></tag> -->
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <!-- <clip pos="1" side="tl" part="gen-case"/> -->
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
        <choose><when>
          <test><not><equal><b pos="2"/><b/></equal></not></test>
          <out><b pos="2"/></out>
        </when></choose>
      </action>
    </rule>
    <rule comment="REGLA: SEASON YEAR
                   1990 giđa => våren 1990
                   Always definite (should not add a determiner in t4x)">
      <pattern>
        <pattern-item n="year"/>
        <pattern-item n="season"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="nom_det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="tl" part="gen"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="def"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <!-- <rules: Proper nouns -->
    <rule comment="REGLA: NOM_PROP
                   Needs to be before the NOM rule.">
      <pattern>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM_PROP NOM_PROP
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom_prop"/>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="prop_prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM_PROP NOM_PROP NOM_PROP
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom_prop"/>
        <pattern-item n="nom_prop"/>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="3"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="prop_prop_prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM_HON NOM_PROP
                   (šattai) Prinsa Harald (Ruvdnaprinsan) => (ble) Prins Harald (kronprins)
                   Uses NOM_PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom_hon"/>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <choose><when>
          <test><not><equal><clip pos="2" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="2" side="tl" part="gen"/></let>
        </when></choose>
        
        <out>
          <var n="case-prep"/>
          <chunk name="nom_prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOMCMP NOM_HON NOM_PROP
                   Ruvdnaprinsa Harald => Kronprins Harald
                   Uses NOM_PROP gender if possible as chunk gender.">
      <pattern>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_hon"/>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <choose><when>
          <test><not><equal><clip pos="3" side="tl" part="gen"/><lit v=""/></equal></not></test>
          <let><var n="c_gen"/><clip pos="3" side="tl" part="gen"/></let>
        </when></choose>
        
        <out>
          <var n="case-prep"/>
          <chunk name="cmp_nom_prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <!-- <rules: Noun, numeral+noun and compounds -->
    <rule comment="REGLA: NOM (tl: NOM, VERB)">
      <pattern>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>
      </action>
    </rule>

    <rule comment="REGLA: NUM NOM_GEN_LNUM
                   -----
                   Here the head (case-prep, syn_label) is the numeral!
                   Numerals take genitive case, chunk case is numeral case,
                   so we don't use out_nom.
                   TODO: enforce double defnes? (de tre bilene)">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="nom_gen_LNUM"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <!-- Here we call set_defnes2 because after a numeral quantifier it should be indefinite -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro> 
        
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_def_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_def_pos"/><lit-tag v="6"/></let>
        </when></choose>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="det_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
              <tag><clip pos="1" side="tl" part="a_count"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_def_pos"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: NUM_MOD NOM
                   -----
                   Oblique use of num nom, here the nominal is the head (case-prep, syn_label)
                   so we use out_nom
                   (but we copy genitive-case and number from the numeral onto the nom).
                   TODO: should we really copy genitive-case over? ('lea vuosttaš prinsa 567 jahkái')">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <!-- Here we call set_defnes2 because after a numeral quantifier it should be indefinite -->
        <call-macro n="set_defnes2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        
        
        <let><var n="c_name"/><lit v="det_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <let><clip pos="2" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="REGLA: NUM_MOD ADJ_ATTR NOM
                   -----
                   22 jahkásaš Tine
                   (see above rule)">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>

        <!-- Here we call set_defnes2 because after a numeral quantifier it should be indefinite -->
        <call-macro n="set_defnes2"><with-param pos="1"/><with-param pos="3"/></call-macro>
        
        <!-- We set c_def_pos here and use that for both adj and nom,
             so that if defnes changes in t2x/t3x, both adj and nom
             get the change in t4x: -->
        <call-macro n="set_c_def_pos"><with-param pos="2"/></call-macro>        
        <let><var n="c_name"/><lit v="det_adj_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_def_pos"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <let><clip pos="3" side="tl" part="case"/><clip pos="1" side="tl" part="gen-case"/></let>
        <let><clip pos="3" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>


    <rule comment="REGLA: ADJCMP NOM
                   -----
                   allaskuvla => høyskole
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="cmp_"/></let>

        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    
    <rule comment="REGLA: NOMCMP NOM
                   -----
                   politiijastašuvnna => politistasjon(s)
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <let><var n="c_name"/><lit v="cmp_"/></let>
        
        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    
    <rule comment="REGLA: NOMCMP NOMCMP NOM
                   -----
                   Ruvdnaprinsabáras => Kronprinsparet
                   Moves syn_label from first CMP to NOM">
      <pattern>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <let><var n="c_name"/><lit v="cmp_cmp_"/></let>
        
        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>
    
    <rule comment="REGLA: CMP NOM
                   -----
                   vuođđofága => grunnfag
                   mielbargin => som medarbeider
                   Words which only appear as compound parts should be fully specified in bidix.
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="cmp_"/></let>
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="whole"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    
    <rule comment="REGLA: NOMCMP ADJ
                   -----
                   sámegiel => samespråklig
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="cmp_adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: Lone determiners, pronouns, adverbs -->

    <rule comment="REGLA: DETPOS_ADVL (lone genitive pronoun likely to be a determiner)
                   TODO: any reason to do GD ND here?">
      <pattern>
        <pattern-item n="detpos_ADVL"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: RELATIVE_PRONOUN gii => som
                   Just removes everything.
                   (Should we call the chunk something else maybe?)">
      <pattern>
        <pattern-item n="pronrel"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: REFLEXIVE_PRONOUN ieš => seg / h*n
                   Just removes everything from normal reflexives,
                   changes @-FOBJ→ reflexives into personal pronouns with GD + nom
                   TODO: Son osku iežas(@-FSUBJ→) bestojuvvon(@X)">
      <pattern>
        <pattern-item n="pronref"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        
        <out><var n="case-prep"/></out>
        
        <choose>
          <when>
            <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="prpers"/></equal></test>
            <out>
              <chunk name="pron" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><lit-tag v="GD"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><lit-tag v="nom"/></tag>
                </tags>
                <lu>
                  <lit v="prpers"/>
                  <lit-tag v="prn"/>
                  <clip pos="1" side="tl" part="pers"/>
                  <lit-tag v="GD"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <lit-tag v="nom"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when>
            <test><not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="@ADVL"/></tag>
                  <tag><clip pos="1" side="tl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <when>
            <test><not><equal><clip pos="1" side="tl" part="a_det"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="det" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="gen"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_det"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
        <otherwise>
          <out>
            <chunk name="ref" case="caseFirstWord">
              <tags>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="gen"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_pron"/>
                <clip pos="1" side="tl" part="pers"/>
                <clip pos="1" side="tl" part="nbr"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </otherwise>
        </choose>
      </action>
    </rule>
    
    <rule comment="REGLA: PERSONAL_PRONOUN REFLEXIVE_PRONOUN
                   mun ieš => meg selv
                   Changes prpers case to accusative.
                   TODO: this really ought to be an mwe specified in the sme dictionary. Will this rule catch too much?">
      <pattern>
        <pattern-item n="pronpers"/>
        <pattern-item n="pronref-PRONL"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        
        <let><clip pos="1" side="tl" part="case"/><lit-tag v="acc"/></let>
        
        <out>
          <var n="case-prep"/>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="gen"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_det"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: DET dán => dette
                              munno [geažil] => [på grunn av] oss to
                   TODO: set_pron_case needs more work">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>

        <call-macro n="modify_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: INTERROGATIVE_PRONOUN mii => hva">
      <pattern>
        <pattern-item n="pronitg"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: PERSONAL_PRONOUN
                   This will catch genitive pronouns too (we're outputting both a_pron and a_det).
                   Not all genitive pronouns turn into determiners.">
      <pattern>
        <pattern-item n="pronpers"/>
      </pattern>
      <action>
        <call-macro n="modify_pron_case"><with-param pos="1"/></call-macro>

        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <!-- <rules: DET* ADJ* NOM* -->
    
    <rule comment="REGLA: DET NOM
                   du bávččas => din smerte
                   eará sámi => annen same">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_gen_nbr_art"><with-param pos="2"/></call-macro>
        
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="det_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    <rule comment="REGLA: DET NOMCMP NOM
                   eará skuvlamánáin => andre skolebarnene">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_gen_nbr_art"><with-param pos="3"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        
        <let><var n="c_name"/><lit v="det_cmp_"/></let>
        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>
     
    <rule comment="REGLA: DET ADJ_ATTR NOM
                   min nuoramus bártni => til vår yngste gutt
                   min nuoramus olbmot => våre yngste mennesker
                   du deháleamos doaibma => din viktigste oppgave
                   mu stuora givssi => til min store plage
                   juohke lágán geđggiiguin => med alle slags steiner
                   TODO: demonstrative 'denne viktige oppgaven' (def!)">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_gen_nbr_art"><with-param pos="3"/></call-macro>

        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="2"/></call-macro>
        
        <let><var n="c_name"/><lit v="det_adj_"/></let>
        <call-macro n="set_defnes2"><with-param pos="3"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>
    <rule comment="REGLA: DET ADJ
                   -----
                   Always definite in nob if det is a possessive,
                   TODO: defnes for other determiners, perhaps need c_def_pos
                   TODO: is this a common pattern?">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_gen_nbr_art"><with-param pos="2"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>

        <let><var n="defnes"/><lit-tag v="def"/></let>
        
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>

        <out>
          <var n="case-prep"/>
          <chunk name="det_adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: NOM_PROP_GEN NOM
                   -----
                   Defnes of possessed NOM is ind (NOM_PROP has no defnes).">
      <pattern>
        <pattern-item n="nom_prop_gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="prop_"/></let>
        
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>        
        <!-- for possessed NOM -->        
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>
    
    <rule comment="REGLA: NOM_GEN NOM
                   -----
                   Sets defnes of possessor NOM_GEN using set_defnes, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="nom_gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="nom_"/></let>

        <!-- for NOM_GEN -->
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        
        <!-- for possessed NOM -->        
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="REGLA: DET NOM_GEN NOM
                   -----
                   dán jagi válggas => dette år(et)s valg
                   Sets defnes of possessor NOM_GEN based on DET, defnes of possessed NOM is ind.">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="nom_gen"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>

        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="modify_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_gen_nbr_art"><with-param pos="2"/></call-macro>

        <let><var n="c_name"/><lit v="det_nom_"/></let>

        <!-- for NOM_GEN -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="art"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="2"/>
          </concat>
        </let>
        
        <!-- for possessed NOM -->        
        <let><var n="defnes"/><lit-tag v="ind"/></let>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="REGLA: ADJ_ATTR NOM
                   -----
                   almmolaš bálvalusaide => til offentlige tjenester
                   almmolaš bálvalus => (den) offentlige tjenesten">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <call-macro n="modify_adj_gen_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <let><var n="c_name"/><lit v="adj_"/></let>

        <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
        
        <!-- We set c_def_pos here and use that for both adj and nom,
             so that if defnes changes in t2x/t3x, both adj and nom
             get the change in t4x: -->
        <call-macro n="set_c_def_pos"><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_def_pos"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
          </concat>
        </let>
        <call-macro n="out_nom"><with-param pos="2"/></call-macro>
      </action>
    </rule>

    <rule comment="REGLA: ADJ_ATTR NOMCMP NOM
                   -----
                   duiska okkupašuvdnafápmu => tysk okkupasjonsmakt
                   TODO: epenthesis!
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <call-macro n="modify_adj_gen_nbr"><with-param pos="3"/><with-param pos="1"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <!-- We set c_def_pos here and use that for both adj and nom,
             so that if defnes changes in t2x/t3x, both adj and nom
             get the change in t4x: -->
        <call-macro n="set_c_def_pos"><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_def_pos"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
            <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        <let><var n="c_name"/><lit v="adj_cmp_"/></let>        
        <call-macro n="copy_syn_label"><with-param pos="3"/><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
      </action>
    </rule>

    <rule comment="REGLA: ADJ_ATTR NOMCMP NOMCMP NOM
                   -----
                   Dalá Ruvdnaprinsabáras => Daværende Kronprinsparet
                   Moves syn_label from CMP to NOM">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <call-macro n="modify_adj_gen_nbr"><with-param pos="4"/><with-param pos="1"/></call-macro>

        <!-- most likely both ADJ and NOM are ind: -->
        <let><var n="defnes"/><lit-tag v="ind"/></let>

        <!-- We set c_def_pos here and use that for both adj and nom,
             so that if defnes changes in t2x/t3x, both adj and nom
             get the change in t4x: -->
        <call-macro n="set_c_def_pos"><with-param pos="1"/></call-macro>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_def_pos"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
            <b pos="1"/>
              <lit v="^"/>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="2" side="tl" part="lemq"/>
              <lit v="$"/>
            <lit v="^"/>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="3" side="tl" part="lemq"/>
              <lit v="$"/>
          </concat>
        </let>
        <let><var n="c_name"/><lit v="adj_cmp_cmp_"/></let>        
        <call-macro n="copy_syn_label"><with-param pos="4"/><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="4"/></call-macro>
        <call-macro n="out_nom"><with-param pos="4"/></call-macro>
      </action>
    </rule>

    <rule comment="REGLA: ADJ
                   -----
                   dehálaš => viktig, deháleamos => viktigst
                   bassivuođa => det hellige">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>        
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <let><var n="c_def_pos"/><lit-tag v="6"/></let>
        <choose><when>
          <test><or>
            <equal><clip pos="1" side="sl" part="mode"/><lit v=""/></equal>
            <equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal>
          </or></test>
          <let><var n="c_def_pos"/><lit-tag v="5"/></let>
        </when></choose>
        <choose><when>
          <test><and>
            <equal><clip pos="1" side="sl" part="mode"/><lit v=""/></equal>
            <equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal>
          </and></test>
          <let><var n="c_def_pos"/><lit-tag v="4"/></let>
        </when></choose>

        <choose>
          <when>
            <test><not><equal><clip pos="1" side="sl" part="a_nom"/><lit v=""/></equal></not></test>
            <let><var n="defnes"/><lit-tag v="def"/></let>
            <out>
              <chunk name="det_adj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SA"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><lit-tag v="nt"/></tag>
                  <tag><lit-tag v="sg"/></tag>
                  <tag><var n="defnes"/></tag>
                </tags>
                <lu>
                  <lit v="den"/><lit-tag v="det.dem.nt.sg"/>
                </lu>
                <b/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adj"/>
                  <clip pos="1" side="tl" part="grau"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <var n="c_def_pos"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>            
          <otherwise>
            <out>
              <chunk name="adj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SA"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><var n="c_gen"/></tag>
                  <tag><var n="c_nbr"/></tag>
                  <tag><var n="defnes"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adj"/>
                  <clip pos="1" side="tl" part="grau"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <var n="c_def_pos"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>



    <rule comment="REGLA: NUMERAL">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <!-- <rules VERBS ETC. -->        
    
    <rule comment="REGLA: VERB (tl: VERB, ADV, ADJ, NOUN)
                   dansún => dans (noun, explicitly in bidix)
                   oažžun => fående (adj.pprs, using fallback rule)
                   ii => adv.p3.sg{ikke}
                   Itgo => adv.p2.sg.Qst{ikke}

TODO: caseSecondWord
TODO: Compounds with these. Should put it all in a macro then...
TODO: should VERB->ADJ always be tagged SN?

TODO: Change the branching/logic here; the 'if adv/adj/N' should all happen _after_ we've
checked for passive (and if so output the aux), but not be dependent on outputting a passive aux.">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v="verb"/></let>
        <choose><when>
          <test><equal><clip pos="1" side="tl" part="lemh"/><lit v="være"/></equal></test>
          <let><var n="c_name"/><lit v="vcop"/></let>
        </when></choose>

        <choose>
          <when>
            <test><not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="neg"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><clip pos="1" side="sl" part="modality"/></tag>
                  <tag><clip pos="1" side="tl" part="temps"/></tag>
                  <tag><clip pos="1" side="tl" part="voice"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="animacy"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
        </when>
        <when>
          <test><not><equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal></not></test>
          <let><var n="c_name"/><lit v=""/></let>
          <let><var n="pre-nom"/><lit v=""/></let>
          <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
          <call-macro n="out_nom"><with-param pos="1"/></call-macro>
        </when>
        <when>
          <test><and>
            <begins-with><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></begins-with>
            <not><equal><clip pos="1" side="tl" part="voice"/><lit-tag v="pass"/></equal></not>
          </and></test>
          <out>
            <chunk name="adj" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adj"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <otherwise>
          <choose c="Prepend cnjsub if present progressive:"><when>
            <test><and>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ess"/></equal>
              <equal><clip pos="1" side="sl" part="actio"/><lit-tag v="Actio"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
            </and></test>
            <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
            <out>
              <chunk name="conj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="@CVP.cnjsub"/></tag>
                </tags>
                <lu>
                  <lit v="i gang med å"/>
                  <lit-tag v="cnjsub"/>
                </lu>
              </chunk>
              <b/>
            </out>
          </when></choose>
          <choose c="Prepend 'la' if causative:
                     TODO: få til å vs la, correct syn_label, interaction with others types..."><when>
            <test>
              <equal><clip pos="1" side="tl" part="a_caus"/><lit-tag v="caus"/></equal>
            </test>
            <out>
              <chunk name="verb" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><clip pos="1" side="sl" part="modality"/></tag>
                  <tag><clip pos="1" side="tl" part="temps"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="animacy"/></tag>
                </tags>
                <lu>
                  <lit v="la"/>
                  <lit-tag v="vblex"/>
                  <clip pos="1" side="tl" part="temps"/>
                </lu>
              </chunk>
              <b/>
            </out>
            <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
            <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></let>
          </when></choose>
          <choose c="Output verb, inserting aux (with temps) iff passive pret:
                     TODO: OK to just discard syn_label from pret.passives?">
            <when c="iff passive pret/pp/adj">
              <test><and>
                <equal><clip pos="1" side="tl" part="voice"/><lit-tag v="pass"/></equal>
                <or>
                  <not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not>
                  <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></equal>
                  <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pp"/></equal>
                </or>
              </and></test>
              <let><var n="c_syn"/><lit-tag v="@+FAUXV"/></let>
              <choose><when>
                <test><in><clip pos="1" side="tl" part="temps"/><list n="infinite_temps"/></in></test>
                <let><var n="c_syn"/><lit-tag v="@-FAUXV"/></let>
              </when></choose>
              <out>
                <chunk name="verb" case="caseFirstWord">
                  <tags>
                    <tag><lit-tag v="SV"/></tag>
                    <tag><var n="c_syn"/></tag>
                    <tag><clip pos="1" side="sl" part="mode"/></tag>
                    <tag><clip pos="1" side="sl" part="modality"/></tag>
                    <tag><clip pos="1" side="tl" part="temps"/></tag>
                    <tag><clip pos="1" side="tl" part="pers"/></tag>
                    <tag><clip pos="1" side="tl" part="nbr"/></tag>
                    <tag><clip pos="1" side="tl" part="animacy"/></tag>
                  </tags>
                  <lu>
                    <lit v="bli"/>
                    <lit-tag v="vblex"/>
                    <clip pos="1" side="tl" part="temps"/>
                    <clip pos="1" side="tl" part="lemq"/>
                  </lu>
                </chunk>
                <b/>
              </out>
              <choose c="Output the predicate of the passive construction, either verb or adj">
                <when>
                  <test><not><equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal></not></test>
                  <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
                  <out>
                    <chunk name="adj">
                      <tags>
                        <tag><lit-tag v="SA"/></tag>
                        <tag><lit-tag v="@-FMAINV"/></tag>
                        <tag><clip pos="1" side="sl" part="mode"/></tag>
                        <tag><clip pos="1" side="sl" part="modality"/></tag>
                        <tag><clip pos="1" side="tl" part="pers"/></tag>
                        <tag><var n="c_gen"/></tag>
                        <tag><var n="c_nbr"/></tag>
                        <tag><clip pos="1" side="tl" part="animacy"/></tag>
                      </tags>
                      <lu>
                        <clip pos="1" side="tl" part="lemh"/>
                        <clip pos="1" side="tl" part="a_adj"/>
                        <clip pos="1" side="tl" part="grau"/>
                        <lit-tag v="GD.ND.ind"/>
                        <clip pos="1" side="tl" part="lemq"/>
                      </lu>
                    </chunk>
                  </out>
                </when>
                <otherwise>
                  <out>
                    <chunk namefrom="c_name">
                      <tags>
                        <tag><lit-tag v="SV"/></tag>
                        <tag><lit-tag v="@-FMAINV"/></tag>
                        <tag><clip pos="1" side="sl" part="mode"/></tag>
                        <tag><clip pos="1" side="sl" part="modality"/></tag>
                        <tag><lit-tag v="pp"/></tag>
                        <tag><clip pos="1" side="tl" part="pers"/></tag>
                        <tag><clip pos="1" side="tl" part="nbr"/></tag>
                        <tag><clip pos="1" side="tl" part="animacy"/></tag>
                      </tags>
                      <lu>
                        <clip pos="1" side="tl" part="lemh"/>
                        <clip pos="1" side="tl" part="a_verb"/>
                        <lit-tag v="pp"/>
                        <clip pos="1" side="tl" part="lemq"/>
                      </lu>
                    </chunk>
                  </out>
                </otherwise>
              </choose>
            </when>
            <otherwise c="Not passive (might still be prepended by cnjsub or causative verb):">
              <out>
                <chunk namefrom="c_name" case="caseFirstWord">
                  <tags>
                    <tag><lit-tag v="SV"/></tag>
                    <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                    <tag><clip pos="1" side="sl" part="mode"/></tag>
                    <tag><clip pos="1" side="sl" part="modality"/></tag>
                    <tag><clip pos="1" side="tl" part="temps"/></tag>
                    <tag><clip pos="1" side="tl" part="voice"/></tag>
                    <tag><clip pos="1" side="tl" part="pers"/></tag>
                    <tag><clip pos="1" side="tl" part="nbr"/></tag>
                    <tag><clip pos="1" side="tl" part="animacy"/></tag>
                  </tags>
                  <lu>
                    <clip pos="1" side="tl" part="lemh"/>
                    <clip pos="1" side="tl" part="a_verb"/>
                    <clip pos="1" side="tl" part="temps"/>
                    <clip pos="1" side="tl" part="voice"/>
                    <clip pos="1" side="tl" part="lemq"/>
                  </lu>
                </chunk>
              </out>
            </otherwise>
          </choose>
          <choose><when c="Append 'seg' if reflexive:">
            <test><equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal></test>
            <let><var n="pron_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
            <let><var n="pron_pers"/><clip pos="1" side="tl" part="pers"/></let>
            <choose><when>
              <test><equal><clip pos="1" side="tl" part="nbr"/><lit v=""/></equal></test>
              <let><var n="pron_nbr"/><lit-tag v="sg"/></let>
            </when></choose>
            <choose><when>
              <test><equal><clip pos="1" side="tl" part="pers"/><lit v=""/></equal></test>
              <let><var n="pron_pers"/><lit-tag v="p3"/></let>
            </when></choose>
            <out>
              <b/>
              <chunk name="ref">
                <tags>
                  <tag><lit-tag v="@←OBJ"/></tag>
                  <tag><var n="pron_pers"/></tag>
                  <tag><var n="pron_nbr"/></tag>
                  <tag><lit-tag v="acc"/></tag>
                </tags>
                <lu>
                  <lit v="seg"/>
                  <lit-tag v="prn.ref"/>
                  <var n="pron_pers"/>
                  <var n="pron_nbr"/>
                </lu>
              </chunk>
            </out>
          </when></choose>          
        </otherwise>
        </choose>
      </action>
    </rule>
    
    
    <rule comment="REGLA: VERB Der/goahti: lohka+gohten => begynne å si
                   needs to be several chunks to cover: ii lohkagoađe => han begynner ikke å si
                   TODO: caseSecondWord
                   TODO: insert 'i gang med å' if actio ess
                   TODO: pret pass exception">
      <pattern>
        <pattern-item n="verb"/>
        <pattern-item n="vgoahti"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><clip pos="2" side="tl" part="temps"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <get-case-from pos="1">
                <clip pos="2" side="tl" part="lemh"/>
              </get-case-from>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="temps"/>
              <clip pos="2" side="tl" part="voice"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="part">
            <tags>
              <tag><lit-tag v="part"/></tag>
            </tags>
            <lu>
              <lit v="å"/><lit-tag v="part"/>
            </lu>
          </chunk>
          <b/>
          <chunk namefrom="c_name">
            <tags>
              <tag><lit-tag v="SV"/></tag>
              <tag><lit-tag v="@-FMAINV"/></tag>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <get-case-from pos="2">
                <clip pos="1" side="tl" part="lemh"/>
              </get-case-from>
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="inf"/>
              <clip pos="1" side="tl" part="voice"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: NOMCMP VERB
                   -----
                   skuvlavázzima => skolegående
                   (should be 'skolegang', but if it's not in bidix, adj.pprs is the best we can do)
                   Makes no periphrastics even if the verb is causative, reflexive or passive, just outputs the actual verb for now.
                   TODO: out_verb macro, to generalise over this rule, VERB and Der_goahti VERB">
      <pattern>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <call-macro n="copy_syn_label"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>

        <let><var n="c_name"/><lit v="cmp_"/></let>
        <let>
          <var n="pre-nom"/>
          <concat>
            <lit v="^"/>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            <lit v="$"/>
          </concat>
        </let>
        
        <choose>
          <when c="Output nom">
            <test><not><equal><clip pos="2" side="tl" part="a_nom"/><lit v=""/></equal></not></test>
            <call-macro n="set_defnes"><with-param pos="2"/></call-macro>
            <call-macro n="out_nom"><with-param pos="2"/></call-macro>
          </when>
          <when c="Output adj">
            <test><begins-with><clip pos="2" side="tl" part="a_adj"/><lit-tag v="adj"/></begins-with></test>
            <append n="c_name"><lit v="adj"/></append>
            <out>
              <chunk namefrom="c_name" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="sl" part="modality"/></tag>
                  <tag><clip pos="2" side="tl" part="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="voice"/></tag>
                  <tag><clip pos="2" side="tl" part="pers"/></tag>
                  <tag><clip pos="2" side="tl" part="nbr"/></tag>
                  <tag><clip pos="2" side="tl" part="animacy"/></tag>
                </tags>
                <var n="pre-nom"/>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_adj"/>
                  <clip pos="2" side="tl" part="grau"/>
                  <clip pos="2" side="tl" part="gen"/>
                  <clip pos="2" side="tl" part="nbr"/>
                  <clip pos="2" side="tl" part="art"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise c="Output verb.
                        If it's passive, reflexive, or causative we just ignore that, simply outputting the verb.">
            <append n="c_name"><lit v="verb"/></append>
            <out>
              <chunk namefrom="c_name" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SV"/></tag>
                  <tag><clip pos="2" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="2" side="sl" part="mode"/></tag>
                  <tag><clip pos="2" side="sl" part="modality"/></tag>
                  <tag><clip pos="2" side="tl" part="temps"/></tag>
                  <tag><clip pos="2" side="tl" part="voice"/></tag>
                  <tag><clip pos="2" side="tl" part="pers"/></tag>
                  <tag><clip pos="2" side="tl" part="nbr"/></tag>
                  <tag><clip pos="2" side="tl" part="animacy"/></tag>
                </tags>
                <var n="pre-nom"/>
                <lu>
                  <clip pos="2" side="tl" part="lemh"/>
                  <clip pos="2" side="tl" part="a_verb"/>
                  <clip pos="2" side="tl" part="temps"/>
                  <clip pos="2" side="tl" part="voice"/>
                  <clip pos="2" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <!-- <rules: NOM/PRON VACTIO NOM -->
    <rule comment="REGLA: PRONPERSGEN VACTIO NOM
                   -----
                   du čállin reivve => brevet som du hadde skrevet
                   The Agent Construction.
TODO! We make several chunks, should be possible to handle in interchunk like
   other relative clauses; perhaps we could make t2x relative chunking rules.
TODO: should we restrict to V.Actio.Nom/Gen ?">
      <pattern>
        <pattern-item n="pronpersgen"/>
        <pattern-item n="vactio"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
        
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <out>
          <b pos="1"/>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@OBJ→"/></tag>
              <tag><lit-tag v="Acc"/></tag>
            </tags>
            <lu><lit v="som"/><lit-tag v="cnjsub"/></lu>
          </chunk>
          <b/>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN.@SUBJ→"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="nom"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="nom"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>

        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <out>
          <b pos="2"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@+FAUXV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pret"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <lit v="ha"/><lit-tag v="vblex.pret"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@-FMAINV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pp"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <lit-tag v="pp"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM_GEN VACTIO NOM
                   -----
                   irggi čállin reivve => brevet som kjæresten hadde skrevet
                   The Agent Construction. See above rule.">
      <pattern>
        <pattern-item n="nom_gen"/>
        <pattern-item n="vactio"/>
        <pattern-item n="nom_head"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="3"/></call-macro>
        <call-macro n="out_nom"><with-param pos="3"/></call-macro>
        
        <call-macro n="set_caseFirstWord"><with-param pos="2"/></call-macro>
        <out>
          <b pos="1"/>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="@OBJ→"/></tag>
              <tag><lit-tag v="Acc"/></tag>
            </tags>
            <lu><lit v="som"/><lit-tag v="cnjsub"/></lu>
          </chunk>
          <b/>
        </out>
        
        <let><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@SUBJ→"/></let>
        <let><clip pos="1" side="sl" part="case"/><lit-tag v="Nom"/></let>
        <let><clip pos="1" side="tl" part="case"/><lit v="nom"/></let>
        <let><var n="c_name"/><lit v=""/></let>
        <let><var n="pre-nom"/><lit v=""/></let>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="out_nom"><with-param pos="1"/></call-macro>

        <call-macro n="set_caseFirstWord"><with-param pos="3"/></call-macro>
        <out>
          <b pos="2"/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@+FAUXV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pret"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <lit v="ha"/><lit-tag v="vblex.pret"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SV.@-FMAINV"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><lit-tag v="pp"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_verb"/>
              <lit-tag v="pp"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <!-- SINGLE CLOSED CLASS WORDS: -->

    <rule comment="REGLA: CONJ">
      <pattern>
        <pattern-item n="conj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ADPOS">
      <pattern>
        <pattern-item n="adpos"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adpos" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prep"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ADV">
      <pattern>
        <pattern-item n="adverb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
          <when c="Since we match on chunk lemma 'adv' in t3x, we have a two-lu chunks
                   here with the single name 'adv' (no postchunking rules for adverbs, so that's OK).">
            <test><equal><clip pos="1" side="sl" part="mode"/><lit-tag v="Qst"/></equal></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
                <b/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>        
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>
    <rule comment="REGLA: ADV PCLE.QST
                   guhká go => hvor lenge
                   Since we match on chunk lemma 'adv' in t3x, even two-lu chunks
                   here are named 'adv' (no postchunking rules, so that's OK).

TODO: this should be an mwe in the analyser.">
      <pattern>
        <pattern-item n="adverb"/>
        <pattern-item n="pcle.qst"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
            <b/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: PCLE
                   ba => engang">
      <pattern>
        <pattern-item n="pcle"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
        <choose><when>
          <test><equal><var n="c_syn"/><lit v=""/></equal></test>
          <let><var n="c_syn"/><lit-tag v="@PCLE"/></let>
        </when></choose>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><var n="c_syn"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>    
  </section-rules>
</transfer>
