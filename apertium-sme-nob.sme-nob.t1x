<?xml version="1.0" encoding="utf-8"?>

<!--
This is the first pass, it contains:
* (de-)compounding,
* derivation,
* simple noun phrases (heads and their simple modifiers/specifiers: adj nom, adj adj nom, det adj adj nom, num adj nom),
* simple periphrastic verb combinations (verb, vaux pp, vaux inf)
* Insert prepositions based on case
-->

<transfer default="chunk">
  <section-def-cats>
    <def-cat n="adpos">
      <cat-item tags="Pr.*"/>
      <cat-item tags="Po.*"/>
    </def-cat>
    <def-cat n="adverb">
      <cat-item tags="Adv"/>
      <cat-item tags="Adv.*"/>
    </def-cat>
    <def-cat n="pcle.qst">
      <cat-item lemma="go" tags="Pcle.*"/>
    </def-cat>
    <def-cat n="adj">
      <cat-item tags="A.*"/>
    </def-cat>
    <def-cat n="adj_attr">
      <cat-item tags="A.Attr.*"/>
      <cat-item tags="A.*.Attr.*"/>
    </def-cat>
    <def-cat n="num_mod">
      <cat-item tags="Num.*.*.@→N"/>
    </def-cat>
    <def-cat n="num">
      <cat-item tags="Num.*"/>
    </def-cat>
    <def-cat n="pron">
      <cat-item tags="Pron.*"/>
    </def-cat>
    <def-cat n="pronrel">
      <cat-item tags="Pron.Rel.*"/>
    </def-cat>
    <def-cat n="pronref">
      <cat-item tags="Pron.Refl.*"/>
    </def-cat>
    <def-cat n="pronitg">
      <cat-item tags="Pron.Interr.*"/>
    </def-cat>
    <def-cat n="pronpers">
      <cat-item tags="Pron.Pers.*"/>
    </def-cat>
    <def-cat n="det" c="Pronouns most likely to end up as determiners">
      <cat-item tags="Pron.Pers.*.Gen.*"/>
      <cat-item tags="Pron.Dem.*"/>
      <cat-item tags="Pron.Indef.*"/>
    </def-cat>
    <def-cat n="detpos_ADVL" c="Pronouns most likely to end up as det.pos">
      <cat-item tags="Pron.Pers.*.Gen.@X"/>
      <cat-item tags="Pron.Pers.*.Gen.@ADVL"/>
    </def-cat>
    <def-cat n="detdemqnt_gen">
      <cat-item tags="Pron.Dem.*.Gen.*"/>
      <cat-item tags="Pron.Indef.*.Gen.*"/>
    </def-cat>
    <def-cat n="cmp" c="Words only seen as compund parts">
      <cat-item tags="Cmp.*"/>
    </def-cat>
    <def-cat n="adj_cmp">
      <cat-item tags="A.*.*.Cmp"/>
      <cat-item tags="A.*.*.Cmp.*"/>
    </def-cat>
    <def-cat n="nom_cmp">
      <cat-item tags="V.*.Der2.*.N.*.*.Cmp"/>
      <cat-item tags="V.*.Der2.*.N.*.*.Cmp.*"/>
      <cat-item tags="N.*.*.Cmp"/>
      <cat-item tags="N.*.*.Cmp.*"/>
    </def-cat>
    <def-cat n="nom">
      <cat-item tags="V.*.Der2.*.N.*"/>
      <cat-item tags="N.*"/>
    </def-cat>
    <def-cat n="nom_gen">
      <cat-item tags="V.*.Der2.*.N.*.Gen.*"/>
      <cat-item tags="N.*.Gen.*"/>
    </def-cat>
    <def-cat n="nom_prop">
      <cat-item tags="N.Prop.*"/>
    </def-cat>
    <def-cat n="verb">
      <cat-item tags="V.*"/>
    </def-cat>
    <def-cat n="vneg">
      <cat-item tags="V.*.Neg.*"/>
    </def-cat>
    <def-cat n="vgoahti">
      <cat-item lemma="goahti" tags="V.*"/>
    </def-cat>
    <def-cat n="conj">
      <cat-item tags="CC.*"/>
      <cat-item tags="CS.*"/>
    </def-cat>
  </section-def-cats>
  <section-def-attrs>
    <def-attr n="a_verb">
      <attr-item tags="V"/>
      <attr-item tags="vblex"/>
    </def-attr>
    <def-attr n="a_adj">
      <attr-item tags="A"/>
      <attr-item tags="adj"/>
      <attr-item tags="adj.pp"/>
      <attr-item tags="adj.pprs"/>
    </def-attr>
    <def-attr n="a_adv">
      <attr-item tags="Adv"/>
      <attr-item tags="adv"/>
    </def-attr>
    <def-attr n="a_prep">
      <attr-item tags="Po"/>
      <attr-item tags="Pr"/>
      <attr-item tags="pr"/>
    </def-attr>
    <def-attr n="a_num">
      <attr-item tags="Num"/>
      <attr-item tags="det.qnt"/>
    </def-attr>
    <def-attr n="a_pron">
      <attr-item tags="Pron"/>
      <attr-item tags="Pron.Rel"/>
      <attr-item tags="Pron.Indef"/>
      <attr-item tags="Pron.Dem"/>
      <attr-item tags="Pron.Pers"/>
      <attr-item tags="prn"/>
      <attr-item tags="prn.itg"/>
      <attr-item tags="prn.ref"/>
    </def-attr>
    <def-attr n="a_det">
      <attr-item tags="det"/> 
      <attr-item tags="det.emph"/>
      <attr-item tags="det.dem"/>
      <attr-item tags="det.itg"/>
      <attr-item tags="det.qnt"/>
      <attr-item tags="det.pos"/>
    </def-attr>
    <def-attr n="a_conj">
      <attr-item tags="CC"/>
      <attr-item tags="CS"/>
      <attr-item tags="cnjcoo"/>
      <attr-item tags="cnjcoo.clb"/>
      <attr-item tags="cnjsub"/>
    </def-attr>
    <def-attr n="a_count">
      <attr-item tags="Coll"/>
      <attr-item tags="unc"/>
    </def-attr>
    <def-attr n="a_nom">
      <attr-item tags="N"/>
      <attr-item tags="n"/>
      <attr-item tags="N.Prop"/>
      <attr-item tags="N.Prop.Sur"/>
      <attr-item tags="np.top"/>
      <attr-item tags="np"/>
    </def-attr>
    <def-attr n="a_rel">
      <attr-item tags="Refl"/>
      <attr-item tags="ref"/>
      <attr-item tags="res" c="Reciprocal"/>
    </def-attr>
    <def-attr n="voice">
      <attr-item tags="pass"/>
    </def-attr>
    <def-attr n="animacy">
      <attr-item tags="impers"/>
      <attr-item tags="pers"/>
    </def-attr>
    <def-attr n="trans">
      <attr-item tags="TV"/>
      <attr-item tags="IV"/>
    </def-attr>
    <def-attr n="actio">                                       <!--TODO: what's the category name?-->
      <attr-item tags="Actio"/>
    </def-attr>
    <def-attr n="case">
      <attr-item tags="Nom"/>
      <attr-item tags="Acc"/>
      <attr-item tags="Gen"/>
      <attr-item tags="Com"/>
      <attr-item tags="Ess"/>
      <attr-item tags="Ill"/>
      <attr-item tags="Loc"/>
      <attr-item tags="Ine"/>
      <attr-item tags="Ela"/>
      <attr-item tags="nom"/>
      <attr-item tags="acc"/>
      <attr-item tags="gen"/>
      <attr-item tags="com"/>
      <attr-item tags="ess"/>
      <attr-item tags="ill"/>
      <attr-item tags="loc"/>
      <attr-item tags="ine"/>
      <attr-item tags="ela"/>
    </def-attr>
    <def-attr n="gen-case">
      <attr-item tags="gen"/>
    </def-attr>
    <def-attr n="foc">
      <attr-item tags="Foc_naj"/>
      <attr-item tags="Foc_ge"/>
    </def-attr>
    <def-attr n="pers">
      <attr-item tags="p1"/>
      <attr-item tags="p2"/>
      <attr-item tags="p3"/>
    </def-attr>
    <def-attr n="grau">
      <attr-item tags="Comp"/>
      <attr-item tags="Superl"/>
      <attr-item tags="posi"/>
      <attr-item tags="comp"/>
      <attr-item tags="sup"/>
      <attr-item tags="ord.posi"/>
      <attr-item tags="ord.comp"/>
      <attr-item tags="ord.sup"/>
    </def-attr>
    <def-attr n="gen">
      <attr-item tags="m"/>
      <attr-item tags="f"/>
      <attr-item tags="mf"/>
      <attr-item tags="nt"/>
      <attr-item tags="GD"/>
    </def-attr>
    <def-attr n="nbr">
      <attr-item tags="Sg"/>
      <attr-item tags="Du"/>
      <attr-item tags="Pl"/>
      <attr-item tags="sg"/>
      <attr-item tags="du"/>
      <attr-item tags="pl"/>
      <attr-item tags="ND"/>
    </def-attr>
    <def-attr n="art">
      <attr-item tags="def"/>
      <attr-item tags="ind"/>
    </def-attr>
    <def-attr n="temps">
      <attr-item tags="Prs"/>
      <attr-item tags="Prt"/>
      <attr-item tags="pres"/>
      <attr-item tags="pret"/>
      <attr-item tags="Inf"/>
      <attr-item tags="inf"/>
      <attr-item tags="Imprt"/>
      <attr-item tags="imp"/>
      <attr-item tags="PrfPrc"/>
      <attr-item tags="pp"/>
      <attr-item tags="TD"/>
    </def-attr>
    <def-attr n="neg">
      <attr-item tags="ConNeg"/>
      <attr-item tags="Neg"/>
    </def-attr>
    <def-attr n="modality">
      <attr-item tags="Ind"/>
      <attr-item tags="Cond"/>
      <attr-item tags="Pot"/>
    </def-attr>
    <def-attr n="mode">
      <attr-item tags="Qst"/>
    </def-attr>
    <def-attr n="syn_label">
      <attr-item tags="@X"/>
      <attr-item tags="@HNOUN"/>
      <attr-item tags="@CNP"/>
      <attr-item tags="@CVP"/>
      <attr-item tags="@→N"/>
      <attr-item tags="@OBJ→"/>
      <attr-item tags="@←OBJ"/>
      <attr-item tags="@OBJ"/>
      <attr-item tags="@-F←OBJ"/>
      <attr-item tags="@SUBJ→"/>
      <attr-item tags="@←SUBJ"/>
      <attr-item tags="@SPRED→"/>
      <attr-item tags="@←SPRED"/>
      <attr-item tags="@\+FMAINV"/>
      <attr-item tags="@-FMAINV"/>
      <attr-item tags="@\+FAUXV"/>
      <attr-item tags="@-FAUXV"/>
      <attr-item tags="@ADVL"/>
      <attr-item tags="@←ADVL"/>
      <attr-item tags="@→ADVL"/>
      <attr-item tags="@ADVL→"/>
      <attr-item tags="@A←"/>
      <attr-item tags="@→A"/>
      <attr-item tags="@HAB"/>
      <attr-item tags="@Num←"/>
      <attr-item tags="@→Num"/>
      <attr-item tags="@INTERJ"/>
      <attr-item tags="@PCLE"/>
      <attr-item tags="@OPRED→"/>
      <attr-item tags="@←OPRED"/>
      <attr-item tags="@→P"/>
      <attr-item tags="@P←"/>
      <attr-item tags="@-FSUBJ→"/>
      <attr-item tags="@-FOBJ→"/>
      <attr-item tags="@-F←OBJ"/>
    </def-attr>
  </section-def-attrs>
  
  <section-def-vars>
    <def-var n="pron_gen"       c="pronoun gender"/>
    <def-var n="pron_nbr"       c="pronoun number"/>
    <def-var n="pron_case"      c="pronoun case"/>
    <def-var n="defnes"         c="definiteness (noun, adj)"/>
    <def-var n="c_gen"          c="chunk gender"/>
    <def-var n="c_nbr"          c="chunk number"/>
    <def-var n="c_tag_pos"      c="chunk defnes tag position"/>
    <def-var n="c_syn"          c="chunk syn_label"/>
    <def-var n="caseFirstWord"  c="typographic case of first word"/>
    <def-var n="case-prep"      c="nob preposition (whole chunk) based on sme case"/>
    <def-var n="foc-adv"        c="focus adverbial (whole chunk) based on focus particle"/>
  </section-def-vars>

  <section-def-lists>
    <def-list n="nt-verbs">
      <!-- These are not currently in use. -->
      <!-- They're all tagged "impers" in sme-nob, trying that instead for now. -->
      <!-- todo: "det" instead of "han" for pro-drop insertion with these verbs -->
      <!-- Odne arvá. -->
      <list-item v="arvit"/>
      <list-item v="borgat"/>
      <list-item v="bieggat"/>
      <list-item v="bivaldit"/>
      <list-item v="boŋkit"/>
      <list-item v="bulžut"/>
      <list-item v="bávkit"/>
      <list-item v="bávkkihit"/>
      <list-item v="firtet"/>
      <list-item v="galbmit"/>
      <list-item v="joavgat"/>
      <list-item v="muohttit"/>
      <list-item v="sevnnjodit"/>
      <list-item v="veiggodit"/>
      <list-item v="álddagastit"/>
      <list-item v="čuorpmastit"/>
      <list-item v="čuvggodit"/>
      <list-item v="šlahttit"/>
    </def-list>
    <def-list n="loc-på">
      <list-item v="Vestlandet"/>
      <list-item v="Østlandet"/>
      <list-item v="Gjøvik"/>
      <list-item v="Lillehammer"/>
      <list-item v="Hamar"/>
      <list-item v="Bygdøy"/>
      <list-item v="Andøya"/>
      <list-item v="Sicilia"/>
      <list-item v="Cuba"/>
      <list-item v="Grønland"/>
      <list-item v="Filippinene"/>
      <list-item v="Island"/>
      <list-item v="Svalbard"/>
      <list-item v="Hovedøya"/>
      <list-item v="Kreta"/>
      <list-item v="Madagaskar"/>
      <list-item v="Hitra"/>
      <list-item v="Hidra"/>
      <list-item v="Hispaniola"/>
      <list-item v="Island"/>
      <list-item v="mandag"/>
      <list-item v="tirsdag"/>
      <list-item v="onsdag"/>
      <list-item v="torsdag"/>
      <list-item v="fredag"/>
      <list-item v="lørdag"/>
      <list-item v="søndag"/>
      <list-item v="dag"/>
      <list-item v="øy"/>
      <list-item v="topp"/>
      <list-item v="kjøkken"/>
    </def-list>
  </section-def-lists>

  <section-def-macros>
    <def-macro n="set_caseFirstWord" npar="1">
      <let><var n="caseFirstWord"/><get-case-from pos="1"><lit v="aa"/></get-case-from></let>
      <choose><when>
        <test><not><begins-with><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np"/></begins-with></not></test>        
        <modify-case><clip pos="1" side="tl" part="lemh"/><lit v="aa"/></modify-case>
      </when></choose>
    </def-macro>
    <def-macro n="set_case-prep" npar="1"
               c="First attempt (may be changed in later stages).">
      <let>
        <var n="case-prep"/><lit v=""/>
      </let>
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Loc"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="på"/>
          </let>
          <choose><when>
            <test><equal><clip pos="1" side="tl" part="a_nom"/><lit-tag v="np.top"/></equal></test>
            <let>
              <var n="case-prep"/><lit v="i"/>
            </let>
            <choose><when>
              <test><in><clip pos="1" side="tl" part="lemh"/><list n="loc-på"/></in></test>
              <let>
                <var n="case-prep"/><lit v="på"/>
              </let>
            </when></choose>
          </when></choose>
          <choose><when>
            <test><equal><clip pos="1" side="tl" part="syn_label"/><lit-tag v="@HAB"/></equal></test>
            <let>
              <var n="case-prep"/><lit v=""/>
            </let>
          </when></choose>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Com"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="med"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ess"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="som"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ill"/></equal></test>
          <let>
            <var n="case-prep"/><lit v="til"/>
          </let>
        </when>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal></test>
          <choose>
            <when>
              <test><or>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→N"/></equal>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@→A"/></equal>
              </or></test>
              <let>
                <var n="case-prep"/><lit v=""/>                <!--sin-->
              </let>
            </when>
            <otherwise>
              <let><var n="case-prep"/><lit v="til"/></let>
              <let><clip pos="1" side="tl" part="case"/><lit v=""/></let>
            </otherwise>
          </choose>
        </when>
      </choose>
      <choose>
        <when>
          <test><not><equal><var n="case-prep"/><lit v=""/></equal></not></test>
          <let>
            <var n="case-prep"/>
            <concat>
              <lit v="^"/>
              <lit v="caseprep"/>
              <lit-tag v="PR"/>
              <lit v="{^"/>
              <var n="case-prep"/>
              <lit-tag v="pr"/>
              <lit v="$}$ "/>
            </concat>
          </let>
        </when>
      </choose>
    </def-macro>
    <def-macro n="set_foc-adv" npar="1"
               c="arg.1: pronoun (might want to use this for verbs too?)
                  Set focus adverbial in case we have a tag.
                  Assumes that the space should go before the chunk
                  (ie. that var foc-adv is output after the verb).">
      <let>
        <var n="foc-adv"/><lit v=""/>
      </let>
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="foc"/><lit-tag v="Foc_naj"/></equal></test>
          <let>
            <var n="foc-adv"/>
            <concat>
              <b/>
              <lit v="^"/>
              <lit v="adv"/>
              <lit-tag v="@←ADVL"/>
              <lit v="{^"/>
              <lit v="også"/>
              <lit-tag v="adv"/>
              <lit v="$}$ "/>
            </concat>
          </let>
        </when>
      </choose>        
    </def-macro>
    
    <def-macro n="set_pron_case" npar="1"
               c="Demonstrative and indefinites can only be gen in nob,
                  personal pronouns can only be nom or acc (note: @HAB => nom),
                  det.pos (personal genitives) have no case, but this is handled in transfer rules.">
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal></test>
          <let><var n="pron_case"/><clip pos="1" side="tl" part="case"/></let>
        </when>
        <otherwise>
          <let><var n="pron_case"/><lit v=""/></let>
        </otherwise>
      </choose>      
      <choose>
        <when>
          <test><equal><clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron.Pers"/></equal></test>
          <choose>
            <when>
              <test><or>
                <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Nom"/></equal>
                <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Acc"/></equal>
              </or></test>
              <let><var n="pron_case"/><clip pos="1" side="tl" part="case"/></let>
            </when>
            <when>
              <test>
                <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@HAB"/></equal>
              </test>
              <let><var n="pron_case"/><lit-tag v="nom"/></let>
            </when>
            <otherwise>
              <let><var n="pron_case"/><lit-tag v="acc"/></let>
            </otherwise>
          </choose>
        </when>
      </choose>
    </def-macro>
    
    <def-macro n="set_pron_gen_num" npar="1">
      <!-- defaults to masc, sg (although we could set a variable from
           the subject since that's often a good heuristic for the referent)-->
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="tl" part="gen"/><lit-tag v="GD"/></equal>
          </test>
          <let><var n="pron_gen"/><lit-tag v="m"/></let>
        </when>
        <otherwise>
          <let><var n="pron_gen"/><clip pos="1" side="tl" part="gen"/></let>
        </otherwise>
      </choose>
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="ND"/></equal>
          </test>
          <let><var n="pron_nbr"/><lit-tag v="sg"/></let>
        </when>
        <otherwise>
          <let><var n="pron_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </otherwise>
      </choose>
    </def-macro>
    
    <def-macro n="set_c_gen_nbr" npar="1"
               c="Make sure we have GD or ND if no gen or num given">
      <let><var n="c_gen"/><clip pos="1" side="tl" part="gen"/></let>
      <let><var n="c_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
      <choose><when>
        <test><equal><var n="c_gen"/><lit v=""/></equal></test>
        <let><var n="c_gen"/><lit-tag v="GD"/></let>
      </when></choose>
      <choose><when>
        <test><equal><var n="c_nbr"/><lit v=""/></equal></test>
        <let><var n="c_nbr"/><lit-tag v="ND"/></let>
      </when></choose>
    </def-macro>

    <def-macro n="set_pos_gen_nbr" npar="1" c="arg.1: possessed object">
      <let><var n="pron_gen"/><clip pos="1" side="tl" part="gen"/></let>
      <let><var n="pron_nbr"/><clip pos="1" side="tl" part="nbr"/></let>
      <choose>
        <when>
          <test>
            <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="pl"/></equal>
          </test>
          <let><var n="pron_gen"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="guess_adj_gen_nbr" npar="1" c="attributive superlatives are 
always(?) def in nob; predicative superlatives are only if they have a determiner first
                 1. min viktigste.def oppgave
                 2. min oppgave er viktigst.ind
                 3. min oppgave er den viktigste.def (rarer than 2)">
      <choose>
        <when>
          <test>
            <or>
              <equal><clip pos="1" side="tl" part="grau"/><lit-tag v="pp"/></equal>
              <ends-with><clip pos="1" side="tl" part="grau"/><lit-tag v="posi"/></ends-with>
            </or>
          </test>
          <let><clip pos="1" side="tl" part="gen"/><lit-tag v="nt"/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></let>
        </when>
        <when>
          <test>
            <equal> 
              <clip pos="1" side="tl" part="grau"/>
              <lit-tag v="comp"/>
            </equal>
          </test>
          <let><clip pos="1" side="tl" part="gen"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when>
        <when>
          <test>
            <equal> 
              <clip pos="1" side="tl" part="grau"/>
              <lit-tag v="sup"/>
            </equal>
          </test>
          <let><clip pos="1" side="tl" part="gen"/><lit v=""/></let>
          <let><clip pos="1" side="tl" part="nbr"/><lit v=""/></let>
        </when>
      </choose>
    </def-macro>


    <def-macro n="set_defnes-helper" npar="1"
               c="arg.1: noun/adj                   c_syn_label must be set first!
                  -----
                  Default to indefinite, guess definite for certain GF's, genitives, ...
                  Locatives only indefinite in first position with leat
                  Adjectives given to this macro will be (predicative and) indefinite
                   (or do we ever get 'det er den røde.Def' here?)">
      <let><var n="defnes"/><lit-tag v="ind"/></let>
      <choose>
        <when>
          <test><and>
            <not><equal><clip pos="1" side="tl" part="a_count"/><lit-tag v="unc"/></equal></not>
            <equal><clip pos="1" side="tl" part="a_adj"/><lit v=""/></equal>
            <or>
              <equal><var n="c_syn"/><lit-tag v="@OBJ→"/></equal>
              <equal><var n="c_syn"/><lit-tag v="@HAB"/></equal>
              <equal><var n="c_syn"/><lit-tag v="@SUBJ→"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Loc"/></equal>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ill"/></equal>
              <and>
                <equal><clip pos="1" side="tl" part="nbr"/><lit-tag v="sg"/></equal>
                <not><equal><var n="c_syn"/><lit-tag v="@←SPRED"/></equal></not>
                <not><equal><var n="c_syn"/><lit-tag v="@←OPRED"/></equal></not>
                <not><equal><var n="c_syn"/><lit-tag v="@ADVL"/></equal></not>
                <not><equal><var n="c_syn"/><lit-tag v="@ADVL→"/></equal></not>
<!--                 <not><equal><var n="c_syn"/><lit-tag v="@←ADVL"/></equal></not> -->
                <not><equal><var n="c_syn"/><lit-tag v="@HNOUN"/></equal></not>
                <not><equal><var n="c_syn"/><lit-tag v="@X"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ess"/></equal></not>
                <not><equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal></not>
              </and>
            </or></and>
          </test>
          <let><var n="defnes"/><lit-tag v="def"/></let>
        </when>
      </choose>
    </def-macro>
    
    <def-macro n="set_defnes" npar="1"
               c="arg.1: noun with syn_label">
      <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
      <call-macro n="set_defnes-helper"><with-param pos="1"/></call-macro>
    </def-macro>
    
    <def-macro n="set_defnes2.cmp_syn" npar="2"
               c="arg.1: inflected noun, arg.2: left part of compound (might have syn_label)
                  Also sets c_syn_label.">
      <let><var n="c_syn"/><clip pos="1" side="sl" part="syn_label"/></let>
      <choose><when>
        <test><equal><clip pos="1" side="sl" part="syn_label"/><lit v=""/></equal></test>
        <let><var n="c_syn"/><clip pos="2" side="sl" part="syn_label"/></let>
      </when></choose>
      <call-macro n="set_defnes-helper"><with-param pos="1"/></call-macro>
    </def-macro>

    <def-macro n="set_defnes2" npar="2"
               c="arg.1: noun, arg.2: determiner. With 'det (adj) nom' the noun is definitely
                  * indefinite if the determiner is a possessive or quantifier,
                  * definite if it is a demonstrative
                  Otherwise, keep old defnes.
                  Assumes that clean_a_det has been called.">      
      <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
      <choose>
	<when>
          <test><or>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.pos"/></equal>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.qnt"/></equal>
          </or></test>
	  <let><var n="defnes"/><lit-tag v="ind"/></let>
	</when>
        <when>
          <test>
            <equal><clip pos="2" side="tl" part="a_det"/><lit-tag v="det.dem"/></equal>
          </test>
	  <let><var n="defnes"/><lit-tag v="def"/></let>
	</when>
      </choose>
    </def-macro>

    <def-macro n="clean_a_det" npar="1"
               c="arg.1: determiner. Change pron.gen into det.pos">
      <choose>
        <when>
          <test><and>
            <begins-with><clip pos="1" side="sl" part="a_pron"/><lit-tag v="Pron"/></begins-with>
            <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Gen"/></equal>
          </and></test>
          <let><clip pos="1" side="tl" part="a_pron"/><lit-tag v="det.pos"/></let>
        </when>
      </choose>
    </def-macro>

    <def-macro n="set_adj_nbr" npar="2" c="arg.1: noun, arg.1: adjective
           Number is only a feature of positive/pp adjectives in nob.">
      <choose>
        <when>
          <test>
            <or>
              <equal><clip pos="2" side="tl" part="grau"/><lit-tag v="pp"/></equal>
              <ends-with><clip pos="2" side="tl" part="grau"/><lit-tag v="posi"/></ends-with>
            </or>
          </test>
          <let><clip pos="2" side="tl" part="nbr"/><clip pos="1" side="tl" part="nbr"/></let>
        </when>
        <otherwise>
          <let><clip pos="2" side="tl" part="nbr"/><lit v=""/></let>
        </otherwise>
      </choose>
    </def-macro>
    
    <def-macro n="set_adj_gen" npar="2" c="arg.1: noun, arg.2: adjective
                                           nob adj's never have m or f tags.">
      <let><clip pos="2" side="tl" part="gen"/><clip pos="1" side="tl" part="gen"/></let>
      <choose>
        <when>
          <test>
            <or>
              <equal><clip pos="2" side="tl" part="gen"/><lit-tag v="m"/></equal>
              <equal><clip pos="2" side="tl" part="gen"/><lit-tag v="f"/></equal>
            </or>
          </test>
          <let><clip pos="2" side="tl" part="gen"/><lit-tag v="mf"/></let>
        </when>
      </choose>      
    </def-macro>
    
  </section-def-macros>
  
  <section-rules>
    
    <rule comment="REGLA: NOM_PROP
                   Needs to be before the NOM rule.">
      <pattern>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM_PROP NOM_PROP
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom_prop"/>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="prop_prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM_PROP NOM_PROP NOM_PROP
                   Gender from the first np, syntax from the last one">
      <pattern>
        <pattern-item n="nom_prop"/>
        <pattern-item n="nom_prop"/>
        <pattern-item n="nom_prop"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="3"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="prop_prop_prop" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM (tl: NOM, VERB)">
      <pattern>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
          
          <when>
            <test><equal><clip pos="1" side="tl" part="a_verb"/><lit-tag v="vblex"/></equal></test>
            <out>
              <chunk name="verb" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><clip pos="1" side="tl" part="temps"/></tag>
                  <tag><clip pos="1" side="tl" part="voice"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_verb"/>
                  <clip pos="1" side="tl" part="temps"/>
                  <clip pos="1" side="tl" part="voice"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>

          <otherwise>
            <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
            <call-macro n="set_defnes"><with-param pos="1"/></call-macro>

            <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
            <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
            <choose><when>
              <test><not><equal>
                <clip pos="1" side="sl" part="mode"/><lit v=""/>
              </equal></not></test>
              <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
            </when></choose>
            <out>
              <var n="case-prep"/>
              <chunk name="nom" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="SN"/></tag>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><var n="c_gen"/></tag>
                  <tag><var n="c_nbr"/></tag>
                  <tag><var n="defnes"/></tag>
                  <tag><clip pos="1" side="tl" part="case"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_nom"/>
                  <clip pos="1" side="tl" part="gen"/>
                  <clip pos="1" side="tl" part="nbr"/>
                  <var n="c_tag_pos"/>
                  <clip pos="1" side="tl" part="gen-case"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>

    <rule comment="REGLA: NUM NOM_GEN
                   Numerals take genitive case, chunk case is numeral case.
                   TODO: use @Num← instead of/in addition to genitive requirement?
                   TODO: enforce double defnes? (de tre bilene)">
      <pattern>
        <pattern-item n="num"/>
        <pattern-item n="nom_gen"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <!-- Here we call set_defnes2 because after a numeral quantifier it should be indefinite -->
        <call-macro n="set_defnes2"><with-param pos="2"/><with-param pos="1"/></call-macro> 
        
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="num_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: NUM_MOD NOM
                   Rule for oblique use of num / nom ">
      <pattern>
        <pattern-item n="num_mod"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        <!-- Here we call set_defnes2 because after a numeral quantifier it should be indefinite -->
        <call-macro n="set_defnes2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="num_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <rule comment="REGLA: ADJCMP NOM allaskuvla => høyskole">
      <pattern>
        <pattern-item n="adj_cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes2.cmp_syn"><with-param pos="2"/><with-param pos="1"/></call-macro>
                
        <call-macro n="set_adj_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_adj_gen"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="2" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="cmp_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOMCMP NOM politiijastašuvnna => politistasjon(s)
                   Defaults to indefinite w/o context">
      <pattern>
        <pattern-item n="nom_cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes2.cmp_syn"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="2" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="cmp_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <lit-tag v="sg.ind"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: CMP NOM vuođđofága => grunnfag
                   Words which only appear as comopund parts should be fully specified in bidix.
                   (But unfortunately there's no way to remove the syn_label in bidix)">
      <pattern>
        <pattern-item n="cmp"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>        
        <call-macro n="set_defnes2.cmp_syn"><with-param pos="2"/><with-param pos="1"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let>

        <let><clip pos="1" side="tl" part="syn_label"/><lit v=""/></let>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="cmp_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><var n="c_syn"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="whole"/>
            </lu>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: DETPOS_ADVL (lone genitive pronoun likely to be a determiner)
                   TODO: any reason to do GD ND here?">
      <pattern>
        <pattern-item n="detpos_ADVL"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: RELATIVE_PRONOUN gii => som
                   Just removes everything.
                   (Should we call the chunk something else maybe?)">
      <pattern>
        <pattern-item n="pronrel"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="rel" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: REFLEXIVE_PRONOUN ieš => seg
                   Just removes everything.
                   (Should we call the chunk something else maybe?)">
      <pattern>
        <pattern-item n="pronref"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="ref" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: DET dán => dette
                              munno [geažil] => [på grunn av] oss to
                   TODO: set_pron_case needs more work">
      <pattern>
        <pattern-item n="det"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>

        <call-macro n="set_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_gen_num"><with-param pos="1"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="det" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <var n="pron_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: INTERROGATIVE_PRONOUN mii => hva">
      <pattern>
        <pattern-item n="pronitg"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: PERSONAL_PRONOUN
                   This will catch genitive pronouns too (we're outputting both a_pron and a_det).
                   Not all genitive pronouns turn into determiners.">
      <pattern>
        <pattern-item n="pronpers"/>
      </pattern>
      <action>
        <call-macro n="set_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_gen_num"><with-param pos="1"/></call-macro>

        <call-macro n="set_foc-adv"><with-param pos="1"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="pron" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="pers"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_pron"/>
              <clip pos="1" side="tl" part="a_det"/>
              <clip pos="1" side="tl" part="pers"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <var n="pron_case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <var n="foc-adv"/>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: DET NOM
                   du bávččas => din smerte">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pos_gen_nbr"><with-param pos="2"/></call-macro>
        <call-macro n="set_defnes2">
          <with-param pos="2"/>
          <with-param pos="1"/>
        </call-macro>

        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>
        
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="det_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
     
    <rule comment="REGLA: DET ADJ_ATTR NOM
                   min nuoramus bártni => til vår yngste gutt
                   min nuoramus olbmot => våre yngste mennesker
                   du deháleamos doaibma => din viktigste oppgave
                   mu stuora givssi => til min store plage
                   juohke lágán geđggiiguin => med alle slags steiner
                   TODO: demonstrative 'denne viktige oppgaven' (def!)">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pos_gen_nbr"><with-param pos="3"/></call-macro>

        <call-macro n="set_adj_nbr">
          <with-param pos="3"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_adj_gen">
          <with-param pos="3"/>
          <with-param pos="2"/>
        </call-macro>
        <call-macro n="set_defnes2">
          <with-param pos="3"/>
          <with-param pos="1"/>
        </call-macro>

        <call-macro n="set_case-prep"><with-param pos="3"/></call-macro>
        
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="det_adj_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="3" side="tl" part="pers"/></tag>
              <tag><clip pos="3" side="tl" part="gen"/></tag>
              <tag><clip pos="3" side="tl" part="nbr"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_adj"/>
              <clip pos="2" side="tl" part="grau"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="def"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <var n="defnes"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: DET NOM_GEN NOM">
      <pattern>
        <pattern-item n="det"/>
        <pattern-item n="nom_gen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pos_gen_nbr"><with-param pos="2"/></call-macro>

        <call-macro n="set_case-prep"><with-param pos="3"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="3"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>
        
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="det_nom_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="3" side="tl" part="pers"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    <rule comment="REGLA: NOM_GEN NOM
               The possessed is always ind, possessor uses set_defnes2">
      <pattern>
        <pattern-item n="nom_gen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_pos_gen_nbr"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes2"><with-param pos="1"/><with-param pos="2"/></call-macro>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>
        
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="nom_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_nom"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="1" side="tl" part="gen-case"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>
    
    <rule comment="REGLA: DEMONSTRATIVE/QUANTIFIER_GEN NOM_GEN NOM
                   dán jagi válggas => dette år(et)s valg
                   Second nom is always ind, first might be def...TODO">
      <pattern>
        <pattern-item n="detdemqnt_gen"/>
        <pattern-item n="nom_gen"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="clean_a_det"><with-param pos="1"/></call-macro>
        <call-macro n="set_pron_case"><with-param pos="1"/></call-macro>
        <call-macro n="set_pos_gen_nbr"><with-param pos="2"/></call-macro>

        <call-macro n="set_case-prep"><with-param pos="3"/></call-macro>

        <call-macro n="set_c_gen_nbr"><with-param pos="3"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>
        
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="det_nom_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="3" side="sl" part="syn_label"/></tag>
              <tag><clip pos="3" side="sl" part="mode"/></tag>
              <tag><clip pos="3" side="tl" part="pers"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="3" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_det"/>
              <var n="pron_gen"/>
              <var n="pron_nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
            <b pos="2"/>
            <lu>
              <clip pos="3" side="tl" part="lemh"/>
              <clip pos="3" side="tl" part="a_nom"/>
              <clip pos="3" side="tl" part="gen"/>
              <clip pos="3" side="tl" part="nbr"/>
              <lit-tag v="ind"/>
              <clip pos="3" side="tl" part="gen-case"/>
              <clip pos="3" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ADJ_ATTR NOM almmolaš bálvalusaide => til offentlige tjenester
                   The noun is indef since we don't have a determiner before.">
      <pattern>
        <pattern-item n="adj_attr"/>
        <pattern-item n="nom"/>
      </pattern>
      <action>
        <call-macro n="set_case-prep"><with-param pos="2"/></call-macro>
        
        <call-macro n="set_adj_nbr"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_adj_gen"><with-param pos="2"/><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="2"/></call-macro>

        <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
        <choose><when>
          <test><not><equal>
            <clip pos="1" side="sl" part="mode"/><lit v=""/>
          </equal></not></test>
          <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
        </when></choose>
        
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <var n="case-prep"/>
          <chunk name="adj_nom" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="2" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><lit-tag v="ind"/></tag>
              <tag><clip pos="2" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
            <b pos="1"/>
            <lu>
              <clip pos="2" side="tl" part="lemh"/>
              <clip pos="2" side="tl" part="a_nom"/>
              <clip pos="2" side="tl" part="gen"/>
              <clip pos="2" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="2" side="tl" part="gen-case"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ADJ: dehálaš => viktig, deháleamos => viktigst">
      <pattern>
        <pattern-item n="adj"/>
      </pattern>
      <action>
        <call-macro n="guess_adj_gen_nbr"><with-param pos="1"/></call-macro>
        <call-macro n="set_defnes"><with-param pos="1"/></call-macro>
        <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
        <let><var n="c_tag_pos"/><lit-tag v="5"/></let>

        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adj" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SA"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><var n="c_gen"/></tag>
              <tag><var n="c_nbr"/></tag>
              <tag><var n="defnes"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adj"/>
              <clip pos="1" side="tl" part="grau"/>
              <clip pos="1" side="tl" part="gen"/>
              <clip pos="1" side="tl" part="nbr"/>
              <var n="c_tag_pos"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <rule comment="REGLA: NUMERAL">
      <pattern>
        <pattern-item n="num"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="num" case="caseFirstWord">
            <tags>
              <tag><lit-tag v="SN"/></tag>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
              <tag><clip pos="1" side="tl" part="gen"/></tag>
              <tag><clip pos="1" side="tl" part="nbr"/></tag>
              <tag><clip pos="1" side="tl" part="case"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_num"/>
              <clip pos="1" side="tl" part="nbr"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>



    <!-- VERB PHRASES ETC. -->        
    
    <rule comment="REGLA: VERB (tl: VERB, ADV, ADJ, NOUN)
                   dansún => dans (noun, explicitly in bidix)
                   oažžun => fående (adj.pprs, using fallback rule)
                   ii => adv.p3.sg{ikke}
                   Itgo => adv.p2.sg.Qst{ikke}

TODO: caseSecondWord
TODO: Compounds with these. Should put it all in a macro then...
TODO: should VERB->ADJ always be tagged SN?">
      <pattern>
        <pattern-item n="verb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        
        <choose>
          <when>
            <test><not><equal><clip pos="1" side="tl" part="a_adv"/><lit v=""/></equal></not></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="neg"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                  <tag><clip pos="1" side="sl" part="modality"/></tag>
                  <tag><clip pos="1" side="tl" part="temps"/></tag>
                  <tag><clip pos="1" side="tl" part="voice"/></tag>
                  <tag><clip pos="1" side="tl" part="pers"/></tag>
                  <tag><clip pos="1" side="tl" part="nbr"/></tag>
                  <tag><clip pos="1" side="tl" part="animacy"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
        </when>        
        <when>
          <test><not><equal><clip pos="1" side="tl" part="a_nom"/><lit v=""/></equal></not></test>
          <call-macro n="set_case-prep"><with-param pos="1"/></call-macro>
          <call-macro n="set_defnes"><with-param pos="1"/></call-macro>

          <call-macro n="set_c_gen_nbr"><with-param pos="1"/></call-macro>
          <let><var n="c_tag_pos"/><lit-tag v="5"/></let> 
          <choose><when>
            <test><not><equal>
              <clip pos="1" side="sl" part="mode"/><lit v=""/>
            </equal></not></test>
            <let><var n="c_tag_pos"/><lit-tag v="6"/></let>
          </when></choose>
          <out>
            <var n="case-prep"/>
            <chunk name="nom" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><var n="c_gen"/></tag>
                <tag><var n="c_nbr"/></tag>
                <tag><var n="defnes"/></tag>
                <tag><clip pos="1" side="tl" part="case"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_nom"/>
                <clip pos="1" side="tl" part="gen"/>
                <clip pos="1" side="tl" part="nbr"/>
                <var n="c_tag_pos"/>
                <clip pos="1" side="tl" part="gen-case"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <when>
          <test><begins-with><clip pos="1" side="tl" part="a_adj"/><lit-tag v="adj"/></begins-with></test>
          <out>
            <chunk name="adj" case="caseFirstWord">
              <tags>
                <tag><lit-tag v="SN"/></tag>
                <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                <tag><clip pos="1" side="sl" part="mode"/></tag>
                <tag><clip pos="1" side="sl" part="modality"/></tag>
                <tag><clip pos="1" side="tl" part="temps"/></tag>
                <tag><clip pos="1" side="tl" part="voice"/></tag>
                <tag><clip pos="1" side="tl" part="pers"/></tag>
                <tag><clip pos="1" side="tl" part="nbr"/></tag>
                <tag><clip pos="1" side="tl" part="animacy"/></tag>
              </tags>
              <lu>
                <clip pos="1" side="tl" part="lemh"/>
                <clip pos="1" side="tl" part="a_adj"/>
                <clip pos="1" side="tl" part="lemq"/>
              </lu>
            </chunk>
          </out>
        </when>
        <otherwise>
          <choose c="Prepend cnjsub if present progressive:"><when>
            <test><and>
              <equal><clip pos="1" side="sl" part="case"/><lit-tag v="Ess"/></equal>
              <equal><clip pos="1" side="sl" part="actio"/><lit-tag v="Actio"/></equal>
              <equal><clip pos="1" side="sl" part="syn_label"/><lit-tag v="@-FMAINV"/></equal>
            </and></test>
            <let><clip pos="1" side="tl" part="temps"/><lit-tag v="inf"/></let>
            <out>
              <chunk name="conj" case="caseFirstWord">
                <tags>
                  <tag><lit-tag v="@CVP.cnjsub"/></tag>
                </tags>
                <lu>
                  <lit v="i gang med å"/>
                  <lit-tag v="cnjsub"/>
                </lu>
              </chunk>
              <b/>
            </out>
          </when></choose>
          <choose c="Output verb, inserting aux (with temps) iff passive pret:
                     TODO: OK to just discard syn_label from pret.passives?">
            <when>
              <test><and>
                <equal><clip pos="1" side="tl" part="temps"/><lit-tag v="pret"/></equal>
                <equal><clip pos="1" side="tl" part="voice"/><lit-tag v="pass"/></equal>
              </and></test>
              <out>
                <chunk name="verb" case="caseFirstWord">
                  <tags>
                    <tag><lit-tag v="@+FAUXV"/></tag>
                    <tag><clip pos="1" side="sl" part="mode"/></tag>
                    <tag><clip pos="1" side="sl" part="modality"/></tag>
                    <tag><clip pos="1" side="tl" part="temps"/></tag>
                    <tag><clip pos="1" side="tl" part="pers"/></tag>
                    <tag><clip pos="1" side="tl" part="nbr"/></tag>
                    <tag><clip pos="1" side="tl" part="animacy"/></tag>
                  </tags>
                  <lu>
                    <lit v="bli"/>
                    <clip pos="1" side="tl" part="a_verb"/>
                    <clip pos="1" side="tl" part="temps"/>
                    <clip pos="1" side="tl" part="lemq"/>
                  </lu>
                </chunk>
                <b/>
                <chunk name="verb">
                  <tags>
                    <tag><lit-tag v="@-FMAINV"/></tag>
                    <tag><clip pos="1" side="sl" part="mode"/></tag>
                    <tag><clip pos="1" side="sl" part="modality"/></tag>
                    <tag><lit-tag v="pp"/></tag>
                    <tag><clip pos="1" side="tl" part="pers"/></tag>
                    <tag><clip pos="1" side="tl" part="nbr"/></tag>
                    <tag><clip pos="1" side="tl" part="animacy"/></tag>
                  </tags>
                  <lu>
                    <clip pos="1" side="tl" part="lemh"/>
                    <clip pos="1" side="tl" part="a_verb"/>
                    <lit-tag v="pp"/>
                    <clip pos="1" side="tl" part="lemq"/>
                  </lu>
                </chunk>
              </out>
            </when>
            <otherwise c="Not passive pret (might still be prepended by cnjsub):">
              <out>
                <chunk name="verb" case="caseFirstWord">
                  <tags>
                    <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                    <tag><clip pos="1" side="sl" part="mode"/></tag>
                    <tag><clip pos="1" side="sl" part="modality"/></tag>
                    <tag><clip pos="1" side="tl" part="temps"/></tag>
                    <tag><clip pos="1" side="tl" part="voice"/></tag>
                    <tag><clip pos="1" side="tl" part="pers"/></tag>
                    <tag><clip pos="1" side="tl" part="nbr"/></tag>
                    <tag><clip pos="1" side="tl" part="animacy"/></tag>
                  </tags>
                  <lu>
                    <clip pos="1" side="tl" part="lemh"/>
                    <clip pos="1" side="tl" part="a_verb"/>
                    <clip pos="1" side="tl" part="temps"/>
                    <clip pos="1" side="tl" part="voice"/>
                    <clip pos="1" side="tl" part="lemq"/>
                  </lu>
                </chunk>
              </out>
            </otherwise>
          </choose>
          <choose c="Append 'seg' if reflexive:"><when>
            <test><equal><clip pos="1" side="tl" part="a_rel"/><lit-tag v="ref"/></equal></test>
            <out>
              <b/>
              <chunk name="ref">
                <tags>
                  <tag><lit-tag v="@←OBJ.sg.Acc"/></tag>
                </tags>
                <lu>
                  <lit v="seg"/>
                  <lit-tag v="prn.ref.sg"/>
                </lu>
              </chunk>
            </out>
          </when></choose>          
        </otherwise>
        </choose>
      </action>
    </rule>
    
    
    <rule comment="REGLA: VERB Der/goahti: lohka+gohten => begynne å lese
                   needs to be several chunks to cover: ii lohkagoađe => han begynner ikke å lese
                   TODO: caseSecondWord
                   TODO: insert 'i gang med å' if actio ess
                   TODO: pret pass exception">
      <pattern>
        <pattern-item n="verb"/>
        <pattern-item n="vgoahti"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="verb" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="2" side="sl" part="mode"/></tag>
              <tag><clip pos="2" side="sl" part="modality"/></tag>
              <tag><clip pos="2" side="tl" part="temps"/></tag>
              <tag><clip pos="2" side="tl" part="voice"/></tag>
              <tag><clip pos="2" side="tl" part="pers"/></tag>
              <tag><clip pos="2" side="tl" part="nbr"/></tag>
              <tag><clip pos="2" side="tl" part="animacy"/></tag>
            </tags>
            <lu>
              <get-case-from pos="1">
                <clip pos="2" side="tl" part="lemh"/>
              </get-case-from>
              <clip pos="2" side="tl" part="a_verb"/>
              <clip pos="2" side="tl" part="temps"/>
              <clip pos="2" side="tl" part="voice"/>
              <clip pos="2" side="tl" part="lemq"/>
            </lu>
          </chunk>
          <b pos="1"/>
          <chunk name="part">
            <tags>
              <tag><lit-tag v="part"/></tag>
            </tags>
            <lu>
              <lit v="å"/><lit-tag v="part"/>
            </lu>
          </chunk>
          <b/>
          <chunk name="verb">
            <tags>
              <tag><lit-tag v="inf"/></tag>
            </tags>
            <lu>
              <get-case-from pos="2">
                <clip pos="1" side="tl" part="lemh"/>
              </get-case-from>
              <clip pos="1" side="tl" part="a_verb"/>
              <lit-tag v="inf"/>
              <clip pos="1" side="tl" part="voice"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


    <!-- SINGLE CLOSED CLASS WORDS: -->

    <rule comment="REGLA: CONJ">
      <pattern>
        <pattern-item n="conj"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="conj" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="tl" part="a_conj"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_conj"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ADPOS">
      <pattern>
        <pattern-item n="adpos"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adpos" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
            </tags>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_prep"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>

    <rule comment="REGLA: ADV
                   Since we match on chunk lemma 'adv' in t3x, even two-lu chunks
                   here are named 'adv' (no postchunking rules, so that's OK).">
      <pattern>
        <pattern-item n="adverb"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <choose>
          <when>
            <test><equal><clip pos="1" side="sl" part="mode"/><lit-tag v="Qst"/></equal></test>
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
                <b/>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </when>
          <otherwise>        
            <out>
              <chunk name="adv" case="caseFirstWord">
                <tags>
                  <tag><clip pos="1" side="sl" part="syn_label"/></tag>
                  <tag><clip pos="1" side="sl" part="mode"/></tag>
                </tags>
                <lu>
                  <clip pos="1" side="tl" part="lemh"/>
                  <clip pos="1" side="tl" part="a_adv"/>
                  <clip pos="1" side="tl" part="lemq"/>
                </lu>
              </chunk>
            </out>
          </otherwise>
        </choose>
      </action>
    </rule>
    <rule comment="REGLA: ADV PCLE.QST
                   guhká go => hvor lenge
                   Since we match on chunk lemma 'adv' in t3x, even two-lu chunks
                   here are named 'adv' (no postchunking rules, so that's OK).

TODO: this should be an mwe in the analyser.">
      <pattern>
        <pattern-item n="adverb"/>
        <pattern-item n="pcle.qst"/>
      </pattern>
      <action>
        <call-macro n="set_caseFirstWord"><with-param pos="1"/></call-macro>
        <out>
          <chunk name="adv" case="caseFirstWord">
            <tags>
              <tag><clip pos="1" side="sl" part="syn_label"/></tag>
              <tag><clip pos="1" side="sl" part="mode"/></tag>
            </tags>
            <lu><lit v="hvor"/><lit-tag v="adv"/></lu>
            <b/>
            <lu>
              <clip pos="1" side="tl" part="lemh"/>
              <clip pos="1" side="tl" part="a_adv"/>
              <clip pos="1" side="tl" part="lemq"/>
            </lu>
          </chunk>
        </out>
      </action>
    </rule>


  </section-rules>
</transfer>
